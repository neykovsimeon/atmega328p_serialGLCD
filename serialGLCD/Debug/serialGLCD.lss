
serialGLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000150  00800100  00000950  000009c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000950  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b44  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001669  00000000  00000000  00000c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b26  00000000  00000000  000022c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c10  00000000  00000000  00002deb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000023c  00000000  00000000  000039fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000713  00000000  00000000  00003c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f4c  00000000  00000000  0000434b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00005297  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e5       	ldi	r30, 0x50	; 80
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 35       	cpi	r26, 0x50	; 80
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <main>
  8e:	0c 94 a6 04 	jmp	0x94c	; 0x94c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <start>:
 *
 * Consider UART was initialized and enabled if LCD operation.
 *
 */
void start (void){
	serialGLCD_clear();
  96:	0e 94 cb 02 	call	0x596	; 0x596 <serialGLCD_clear>
	serialGLCD_goto21x8_XY(3, 3);
  9a:	63 e0       	ldi	r22, 0x03	; 3
  9c:	83 e0       	ldi	r24, 0x03	; 3
  9e:	0e 94 2c 03 	call	0x658	; 0x658 <serialGLCD_goto21x8_XY>
	serialGLCD_sendString("!This is SPARTA!");
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	91 e0       	ldi	r25, 0x01	; 1
  a6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <serialGLCD_sendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	87 ea       	ldi	r24, 0xA7	; 167
  ae:	91 e6       	ldi	r25, 0x61	; 97
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <start+0x1a>
  b8:	00 c0       	rjmp	.+0      	; 0xba <start+0x24>
  ba:	00 00       	nop
	_delay_ms(2000);
	selected = 1;
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <selected>
	serialGLCD_clear();
  c2:	0e 94 cb 02 	call	0x596	; 0x596 <serialGLCD_clear>
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	87 ea       	ldi	r24, 0xA7	; 167
  ca:	91 e6       	ldi	r25, 0x61	; 97
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <start+0x36>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <start+0x40>
  d6:	00 00       	nop
  d8:	08 95       	ret

000000da <serialGLCD_writeMenuString>:
 * @param add_line if 1 (or just > 1) then complete the row with character given in add_char. If add_line =0 the row would not be completed till the end.
 * @param add_char character to be used to complete the row after the menu string if add_line >=1.
 *
 */
void serialGLCD_writeMenuString (unsigned char refX, unsigned char refY, const char *lcd_menu_items, unsigned char add_line, char add_char) 
{
  da:	af 92       	push	r10
  dc:	bf 92       	push	r11
  de:	cf 92       	push	r12
  e0:	df 92       	push	r13
  e2:	ef 92       	push	r14
  e4:	ff 92       	push	r15
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	b8 2e       	mov	r11, r24
  f0:	6a 01       	movw	r12, r20
  f2:	a2 2e       	mov	r10, r18
	unsigned char lcd_i;
	unsigned char lcd_offset = 0;
	// find pixel X
	unsigned char pixelX = (refX) * 6;
  f4:	98 2f       	mov	r25, r24
  f6:	99 0f       	add	r25, r25
  f8:	98 0f       	add	r25, r24
	// find pixel Y
	unsigned char pixelY = (refY) * 8;
  fa:	66 0f       	add	r22, r22
  fc:	66 0f       	add	r22, r22
  fe:	66 0f       	add	r22, r22
	// check the range
	if (pixelX > INITIAL_pixel_MAXX) pixelX = 0;
 100:	89 2f       	mov	r24, r25
 102:	88 0f       	add	r24, r24
 104:	96 fd       	sbrc	r25, 6
 106:	80 e0       	ldi	r24, 0x00	; 0
	if (pixelY > INITIAL_pixel_MAXY) pixelY = 0;
 108:	60 34       	cpi	r22, 0x40	; 64
 10a:	08 f0       	brcs	.+2      	; 0x10e <serialGLCD_writeMenuString+0x34>
 10c:	60 e0       	ldi	r22, 0x00	; 0
	
	serialGLCD_gotoPixel_XY(pixelX, pixelY);
 10e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <serialGLCD_gotoPixel_XY>
	
	lcd_offset = strlen(lcd_menu_items);
 112:	f6 01       	movw	r30, r12
 114:	01 90       	ld	r0, Z+
 116:	00 20       	and	r0, r0
 118:	e9 f7       	brne	.-6      	; 0x114 <serialGLCD_writeMenuString+0x3a>
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	1e 2f       	mov	r17, r30
 11e:	1c 19       	sub	r17, r12
 120:	16 31       	cpi	r17, 0x16	; 22
 122:	08 f0       	brcs	.+2      	; 0x126 <serialGLCD_writeMenuString+0x4c>
 124:	15 e1       	ldi	r17, 0x15	; 21
	
	if (lcd_offset > INITIAL_MAXX) lcd_offset = INITIAL_MAXX;
	for (lcd_i = lcd_offset; lcd_i; lcd_i--)
 126:	11 23       	and	r17, r17
 128:	81 f0       	breq	.+32     	; 0x14a <serialGLCD_writeMenuString+0x70>
 12a:	e6 01       	movw	r28, r12
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	81 0f       	add	r24, r17
 130:	e8 2e       	mov	r14, r24
 132:	f1 2c       	mov	r15, r1
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	e8 1a       	sub	r14, r24
 138:	f8 0a       	sbc	r15, r24
 13a:	ec 0c       	add	r14, r12
 13c:	fd 1c       	adc	r15, r13
	{
		serialGLCD_sendChar(*lcd_menu_items++);
 13e:	89 91       	ld	r24, Y+
 140:	0e 94 db 02 	call	0x5b6	; 0x5b6 <serialGLCD_sendChar>
	serialGLCD_gotoPixel_XY(pixelX, pixelY);
	
	lcd_offset = strlen(lcd_menu_items);
	
	if (lcd_offset > INITIAL_MAXX) lcd_offset = INITIAL_MAXX;
	for (lcd_i = lcd_offset; lcd_i; lcd_i--)
 144:	ce 15       	cp	r28, r14
 146:	df 05       	cpc	r29, r15
 148:	d1 f7       	brne	.-12     	; 0x13e <serialGLCD_writeMenuString+0x64>
	{
		serialGLCD_sendChar(*lcd_menu_items++);
	}
	if (add_line)
 14a:	aa 20       	and	r10, r10
 14c:	49 f0       	breq	.+18     	; 0x160 <serialGLCD_writeMenuString+0x86>
	{
		for (lcd_i = INITIAL_MAXX - lcd_offset - refX; lcd_i; lcd_i--) 
 14e:	c5 e1       	ldi	r28, 0x15	; 21
 150:	cb 19       	sub	r28, r11
 152:	c1 1b       	sub	r28, r17
 154:	29 f0       	breq	.+10     	; 0x160 <serialGLCD_writeMenuString+0x86>
		{
			serialGLCD_sendChar(add_char);
 156:	80 2f       	mov	r24, r16
 158:	0e 94 db 02 	call	0x5b6	; 0x5b6 <serialGLCD_sendChar>
	{
		serialGLCD_sendChar(*lcd_menu_items++);
	}
	if (add_line)
	{
		for (lcd_i = INITIAL_MAXX - lcd_offset - refX; lcd_i; lcd_i--) 
 15c:	c1 50       	subi	r28, 0x01	; 1
 15e:	d9 f7       	brne	.-10     	; 0x156 <serialGLCD_writeMenuString+0x7c>
		{
			serialGLCD_sendChar(add_char);
		}
	}
}
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	1f 91       	pop	r17
 166:	0f 91       	pop	r16
 168:	ff 90       	pop	r15
 16a:	ef 90       	pop	r14
 16c:	df 90       	pop	r13
 16e:	cf 90       	pop	r12
 170:	bf 90       	pop	r11
 172:	af 90       	pop	r10
 174:	08 95       	ret

00000176 <show_menu>:
 *
 * Consider UART was initialized and enabled.
 * 
 */
void show_menu(void)
{
 176:	ff 92       	push	r15
 178:	0f 93       	push	r16
 17a:	1f 93       	push	r17
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
	unsigned char varDisplay_rows = DISPLAY_ROWS;
	unsigned char varUpper_space = UPPER_SPACE;
	static unsigned char enClear = 1;
	
	// define from and till spec for the menu
	if (my_menu[selected].num_menupoints < DISPLAY_ROWS) 
 180:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <selected>
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	ee 0f       	add	r30, r30
 188:	ff 1f       	adc	r31, r31
 18a:	ee 0f       	add	r30, r30
 18c:	ff 1f       	adc	r31, r31
 18e:	ee 0f       	add	r30, r30
 190:	ff 1f       	adc	r31, r31
 192:	ed 5e       	subi	r30, 0xED	; 237
 194:	fe 4f       	sbci	r31, 0xFE	; 254
 196:	12 81       	ldd	r17, Z+2	; 0x02
 198:	18 30       	cpi	r17, 0x08	; 8
 19a:	70 f4       	brcc	.+28     	; 0x1b8 <show_menu+0x42>
	{
		varDisplay_rows = my_menu[selected].num_menupoints;
		varUpper_space = varDisplay_rows - 2;
 19c:	de ef       	ldi	r29, 0xFE	; 254
 19e:	d1 0f       	add	r29, r17
		if (enClear)
 1a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1a4:	88 23       	and	r24, r24
 1a6:	21 f0       	breq	.+8      	; 0x1b0 <show_menu+0x3a>
		{
			serialGLCD_clear();
 1a8:	0e 94 cb 02 	call	0x596	; 0x596 <serialGLCD_clear>
			enClear = 0;
 1ac:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		}
	} else 
	{
		enClear = 1;
	}
	while (till <= selected)
 1b0:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <selected>
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	06 c0       	rjmp	.+12     	; 0x1c4 <show_menu+0x4e>
			serialGLCD_clear();
			enClear = 0;
		}
	} else 
	{
		enClear = 1;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	unsigned char line_cnt = 0;
	unsigned char from = 0;		// from which row of menu points
	unsigned char till = 0;		// till which row of menu points
	unsigned char temp = 0;
	unsigned char varDisplay_rows = DISPLAY_ROWS;
	unsigned char varUpper_space = UPPER_SPACE;
 1be:	d6 e0       	ldi	r29, 0x06	; 6
{
	unsigned char line_cnt = 0;
	unsigned char from = 0;		// from which row of menu points
	unsigned char till = 0;		// till which row of menu points
	unsigned char temp = 0;
	unsigned char varDisplay_rows = DISPLAY_ROWS;
 1c0:	18 e0       	ldi	r17, 0x08	; 8
 1c2:	f6 cf       	rjmp	.-20     	; 0x1b0 <show_menu+0x3a>
	{
		enClear = 1;
	}
	while (till <= selected)
	{
		till += my_menu[till].num_menupoints;
 1c4:	e8 2f       	mov	r30, r24
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	ee 0f       	add	r30, r30
 1ca:	ff 1f       	adc	r31, r31
 1cc:	ee 0f       	add	r30, r30
 1ce:	ff 1f       	adc	r31, r31
 1d0:	ee 0f       	add	r30, r30
 1d2:	ff 1f       	adc	r31, r31
 1d4:	ed 5e       	subi	r30, 0xED	; 237
 1d6:	fe 4f       	sbci	r31, 0xFE	; 254
 1d8:	92 81       	ldd	r25, Z+2	; 0x02
 1da:	89 0f       	add	r24, r25
		}
	} else 
	{
		enClear = 1;
	}
	while (till <= selected)
 1dc:	28 17       	cp	r18, r24
 1de:	90 f7       	brcc	.-28     	; 0x1c4 <show_menu+0x4e>
	{
		till += my_menu[till].num_menupoints;
	}
	from = till - my_menu[selected].num_menupoints;
 1e0:	42 2f       	mov	r20, r18
 1e2:	50 e0       	ldi	r21, 0x00	; 0
 1e4:	fa 01       	movw	r30, r20
 1e6:	ee 0f       	add	r30, r30
 1e8:	ff 1f       	adc	r31, r31
 1ea:	ee 0f       	add	r30, r30
 1ec:	ff 1f       	adc	r31, r31
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	ed 5e       	subi	r30, 0xED	; 237
 1f4:	fe 4f       	sbci	r31, 0xFE	; 254
 1f6:	92 81       	ldd	r25, Z+2	; 0x02
 1f8:	f8 2e       	mov	r15, r24
 1fa:	f9 1a       	sub	r15, r25
	temp = from;
	till--;
	
	if ((selected >= (from +varUpper_space)) && (selected <= (till - LOWER_SPACE))) 
 1fc:	ef 2d       	mov	r30, r15
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	bf 01       	movw	r22, r30
 202:	6d 0f       	add	r22, r29
 204:	71 1d       	adc	r23, r1
 206:	46 17       	cp	r20, r22
 208:	57 07       	cpc	r21, r23
 20a:	0c f4       	brge	.+2      	; 0x20e <show_menu+0x98>
 20c:	57 c0       	rjmp	.+174    	; 0x2bc <show_menu+0x146>
	{
		till += my_menu[till].num_menupoints;
	}
	from = till - my_menu[selected].num_menupoints;
	temp = from;
	till--;
 20e:	cf ef       	ldi	r28, 0xFF	; 255
 210:	c8 0f       	add	r28, r24
	
	if ((selected >= (from +varUpper_space)) && (selected <= (till - LOWER_SPACE))) 
 212:	8c 2f       	mov	r24, r28
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	84 17       	cp	r24, r20
 21a:	95 07       	cpc	r25, r21
 21c:	0c f4       	brge	.+2      	; 0x220 <show_menu+0xaa>
 21e:	8b c0       	rjmp	.+278    	; 0x336 <show_menu+0x1c0>
	{
		from = selected - varUpper_space;
 220:	c2 2f       	mov	r28, r18
 222:	cd 1b       	sub	r28, r29
		till = from + (varDisplay_rows - 1);
 224:	11 50       	subi	r17, 0x01	; 1
 226:	f1 2e       	mov	r15, r17
 228:	fc 0e       	add	r15, r28
		if (VISIBLE_MENU_HEADER) 
		{
			serialGLCD_writeMenuString(0, 0, my_menu[temp].text, 1, ' ');
 22a:	ee 0f       	add	r30, r30
 22c:	ff 1f       	adc	r31, r31
 22e:	ee 0f       	add	r30, r30
 230:	ff 1f       	adc	r31, r31
 232:	ee 0f       	add	r30, r30
 234:	ff 1f       	adc	r31, r31
 236:	ed 5e       	subi	r30, 0xED	; 237
 238:	fe 4f       	sbci	r31, 0xFE	; 254
 23a:	40 81       	ld	r20, Z
 23c:	51 81       	ldd	r21, Z+1	; 0x01
 23e:	00 e2       	ldi	r16, 0x20	; 32
 240:	21 e0       	ldi	r18, 0x01	; 1
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0e 94 6d 00 	call	0xda	; 0xda <serialGLCD_writeMenuString>
			line_cnt = 1;
			from ++;
 24a:	cf 5f       	subi	r28, 0xFF	; 255
		}
		for (from; from <= till; from++) 
 24c:	fc 16       	cp	r15, r28
 24e:	70 f1       	brcs	.+92     	; 0x2ac <show_menu+0x136>
 250:	12 e0       	ldi	r17, 0x02	; 2
 252:	6f ef       	ldi	r22, 0xFF	; 255
 254:	61 0f       	add	r22, r17
		{
			if (from == selected) 
 256:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <selected>
 25a:	8c 13       	cpse	r24, r28
 25c:	12 c0       	rjmp	.+36     	; 0x282 <show_menu+0x10c>
			{
				serialGLCD_writeMenuString(0, line_cnt, my_menu[from].text, 1, SELECTION_CHAR_END);
 25e:	ec 2f       	mov	r30, r28
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	ee 0f       	add	r30, r30
 264:	ff 1f       	adc	r31, r31
 266:	ee 0f       	add	r30, r30
 268:	ff 1f       	adc	r31, r31
 26a:	ee 0f       	add	r30, r30
 26c:	ff 1f       	adc	r31, r31
 26e:	ed 5e       	subi	r30, 0xED	; 237
 270:	fe 4f       	sbci	r31, 0xFE	; 254
 272:	40 81       	ld	r20, Z
 274:	51 81       	ldd	r21, Z+1	; 0x01
 276:	0c e3       	ldi	r16, 0x3C	; 60
 278:	21 e0       	ldi	r18, 0x01	; 1
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	0e 94 6d 00 	call	0xda	; 0xda <serialGLCD_writeMenuString>
 280:	11 c0       	rjmp	.+34     	; 0x2a4 <show_menu+0x12e>
				line_cnt++;
			} else {
				serialGLCD_writeMenuString(0, line_cnt, my_menu[from].text, 1, ' ');
 282:	ec 2f       	mov	r30, r28
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	ee 0f       	add	r30, r30
 288:	ff 1f       	adc	r31, r31
 28a:	ee 0f       	add	r30, r30
 28c:	ff 1f       	adc	r31, r31
 28e:	ee 0f       	add	r30, r30
 290:	ff 1f       	adc	r31, r31
 292:	ed 5e       	subi	r30, 0xED	; 237
 294:	fe 4f       	sbci	r31, 0xFE	; 254
 296:	40 81       	ld	r20, Z
 298:	51 81       	ldd	r21, Z+1	; 0x01
 29a:	00 e2       	ldi	r16, 0x20	; 32
 29c:	21 e0       	ldi	r18, 0x01	; 1
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	0e 94 6d 00 	call	0xda	; 0xda <serialGLCD_writeMenuString>
		{
			serialGLCD_writeMenuString(0, 0, my_menu[temp].text, 1, ' ');
			line_cnt = 1;
			from ++;
		}
		for (from; from <= till; from++) 
 2a4:	cf 5f       	subi	r28, 0xFF	; 255
 2a6:	1f 5f       	subi	r17, 0xFF	; 255
 2a8:	fc 16       	cp	r15, r28
 2aa:	98 f6       	brcc	.-90     	; 0x252 <show_menu+0xdc>
			} else {
				serialGLCD_writeMenuString(0, line_cnt, my_menu[from].text, 1, ' ');
				line_cnt++;
			}
		}
		serialGLCD_goto21x8_XY(0, varUpper_space);
 2ac:	6d 2f       	mov	r22, r29
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	0e 94 2c 03 	call	0x658	; 0x658 <serialGLCD_goto21x8_XY>
		serialGLCD_sendChar(SELECTION_CHAR);
 2b4:	8e e3       	ldi	r24, 0x3E	; 62
 2b6:	0e 94 db 02 	call	0x5b6	; 0x5b6 <serialGLCD_sendChar>
 2ba:	8c c0       	rjmp	.+280    	; 0x3d4 <show_menu+0x25e>
	} else {
		if (selected < (from +varUpper_space)) 
		{
			till = from + (varDisplay_rows - 1);
 2bc:	11 50       	subi	r17, 0x01	; 1
 2be:	1f 0d       	add	r17, r15
			for (from; from <= till; from++) 
 2c0:	1f 15       	cp	r17, r15
 2c2:	78 f1       	brcs	.+94     	; 0x322 <show_menu+0x1ac>
 2c4:	cf 2d       	mov	r28, r15
 2c6:	d1 e0       	ldi	r29, 0x01	; 1
 2c8:	6f ef       	ldi	r22, 0xFF	; 255
 2ca:	6d 0f       	add	r22, r29
			{
				if (from == selected) 
 2cc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <selected>
 2d0:	8c 13       	cpse	r24, r28
 2d2:	12 c0       	rjmp	.+36     	; 0x2f8 <show_menu+0x182>
				{
					serialGLCD_writeMenuString(0, line_cnt, my_menu[from].text, 1, SELECTION_CHAR_END);
 2d4:	ec 2f       	mov	r30, r28
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	ee 0f       	add	r30, r30
 2da:	ff 1f       	adc	r31, r31
 2dc:	ee 0f       	add	r30, r30
 2de:	ff 1f       	adc	r31, r31
 2e0:	ee 0f       	add	r30, r30
 2e2:	ff 1f       	adc	r31, r31
 2e4:	ed 5e       	subi	r30, 0xED	; 237
 2e6:	fe 4f       	sbci	r31, 0xFE	; 254
 2e8:	40 81       	ld	r20, Z
 2ea:	51 81       	ldd	r21, Z+1	; 0x01
 2ec:	0c e3       	ldi	r16, 0x3C	; 60
 2ee:	21 e0       	ldi	r18, 0x01	; 1
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0e 94 6d 00 	call	0xda	; 0xda <serialGLCD_writeMenuString>
 2f6:	11 c0       	rjmp	.+34     	; 0x31a <show_menu+0x1a4>
					line_cnt++;
				} else {
					serialGLCD_writeMenuString(0, line_cnt, my_menu[from].text, 1, ' ');
 2f8:	ec 2f       	mov	r30, r28
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	ee 0f       	add	r30, r30
 2fe:	ff 1f       	adc	r31, r31
 300:	ee 0f       	add	r30, r30
 302:	ff 1f       	adc	r31, r31
 304:	ee 0f       	add	r30, r30
 306:	ff 1f       	adc	r31, r31
 308:	ed 5e       	subi	r30, 0xED	; 237
 30a:	fe 4f       	sbci	r31, 0xFE	; 254
 30c:	40 81       	ld	r20, Z
 30e:	51 81       	ldd	r21, Z+1	; 0x01
 310:	00 e2       	ldi	r16, 0x20	; 32
 312:	21 e0       	ldi	r18, 0x01	; 1
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	0e 94 6d 00 	call	0xda	; 0xda <serialGLCD_writeMenuString>
		serialGLCD_sendChar(SELECTION_CHAR);
	} else {
		if (selected < (from +varUpper_space)) 
		{
			till = from + (varDisplay_rows - 1);
			for (from; from <= till; from++) 
 31a:	cf 5f       	subi	r28, 0xFF	; 255
 31c:	df 5f       	subi	r29, 0xFF	; 255
 31e:	1c 17       	cp	r17, r28
 320:	98 f6       	brcc	.-90     	; 0x2c8 <show_menu+0x152>
				} else {
					serialGLCD_writeMenuString(0, line_cnt, my_menu[from].text, 1, ' ');
					line_cnt++;
				}
			}
			serialGLCD_goto21x8_XY(0,selected - temp);
 322:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <selected>
 326:	6f 19       	sub	r22, r15
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	0e 94 2c 03 	call	0x658	; 0x658 <serialGLCD_goto21x8_XY>
			serialGLCD_sendChar(SELECTION_CHAR);
 32e:	8e e3       	ldi	r24, 0x3E	; 62
 330:	0e 94 db 02 	call	0x5b6	; 0x5b6 <serialGLCD_sendChar>
 334:	4f c0       	rjmp	.+158    	; 0x3d4 <show_menu+0x25e>
		} else {
			if (selected == till)
 336:	c2 13       	cpse	r28, r18
 338:	4d c0       	rjmp	.+154    	; 0x3d4 <show_menu+0x25e>
			{
				from = till - (varDisplay_rows - 1);
				if (VISIBLE_MENU_HEADER) 
				{
					serialGLCD_writeMenuString(0, 0, my_menu[temp].text, 1, ' '); 
 33a:	ee 0f       	add	r30, r30
 33c:	ff 1f       	adc	r31, r31
 33e:	ee 0f       	add	r30, r30
 340:	ff 1f       	adc	r31, r31
 342:	ee 0f       	add	r30, r30
 344:	ff 1f       	adc	r31, r31
 346:	ed 5e       	subi	r30, 0xED	; 237
 348:	fe 4f       	sbci	r31, 0xFE	; 254
 34a:	40 81       	ld	r20, Z
 34c:	51 81       	ldd	r21, Z+1	; 0x01
 34e:	00 e2       	ldi	r16, 0x20	; 32
 350:	21 e0       	ldi	r18, 0x01	; 1
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	0e 94 6d 00 	call	0xda	; 0xda <serialGLCD_writeMenuString>
					line_cnt = 1; 
					from ++;
 35a:	dc 2f       	mov	r29, r28
 35c:	d1 1b       	sub	r29, r17
 35e:	de 5f       	subi	r29, 0xFE	; 254
					
				}
				for (from; from <= till; from++) 
 360:	cd 17       	cp	r28, r29
 362:	80 f1       	brcs	.+96     	; 0x3c4 <show_menu+0x24e>
 364:	68 94       	set
 366:	ff 24       	eor	r15, r15
 368:	f1 f8       	bld	r15, 1
 36a:	6f ef       	ldi	r22, 0xFF	; 255
 36c:	6f 0d       	add	r22, r15
				{
					if (from == selected) 
 36e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <selected>
 372:	8d 13       	cpse	r24, r29
 374:	12 c0       	rjmp	.+36     	; 0x39a <show_menu+0x224>
					{
						serialGLCD_writeMenuString(0, line_cnt, my_menu[from].text, 1, SELECTION_CHAR_END);
 376:	ed 2f       	mov	r30, r29
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	ee 0f       	add	r30, r30
 37c:	ff 1f       	adc	r31, r31
 37e:	ee 0f       	add	r30, r30
 380:	ff 1f       	adc	r31, r31
 382:	ee 0f       	add	r30, r30
 384:	ff 1f       	adc	r31, r31
 386:	ed 5e       	subi	r30, 0xED	; 237
 388:	fe 4f       	sbci	r31, 0xFE	; 254
 38a:	40 81       	ld	r20, Z
 38c:	51 81       	ldd	r21, Z+1	; 0x01
 38e:	0c e3       	ldi	r16, 0x3C	; 60
 390:	21 e0       	ldi	r18, 0x01	; 1
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	0e 94 6d 00 	call	0xda	; 0xda <serialGLCD_writeMenuString>
 398:	11 c0       	rjmp	.+34     	; 0x3bc <show_menu+0x246>
						line_cnt++;
					} else {
						serialGLCD_writeMenuString(0, line_cnt, my_menu[from].text, 1, ' ');
 39a:	ed 2f       	mov	r30, r29
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	ee 0f       	add	r30, r30
 3a0:	ff 1f       	adc	r31, r31
 3a2:	ee 0f       	add	r30, r30
 3a4:	ff 1f       	adc	r31, r31
 3a6:	ee 0f       	add	r30, r30
 3a8:	ff 1f       	adc	r31, r31
 3aa:	ed 5e       	subi	r30, 0xED	; 237
 3ac:	fe 4f       	sbci	r31, 0xFE	; 254
 3ae:	40 81       	ld	r20, Z
 3b0:	51 81       	ldd	r21, Z+1	; 0x01
 3b2:	00 e2       	ldi	r16, 0x20	; 32
 3b4:	21 e0       	ldi	r18, 0x01	; 1
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	0e 94 6d 00 	call	0xda	; 0xda <serialGLCD_writeMenuString>
					serialGLCD_writeMenuString(0, 0, my_menu[temp].text, 1, ' '); 
					line_cnt = 1; 
					from ++;
					
				}
				for (from; from <= till; from++) 
 3bc:	df 5f       	subi	r29, 0xFF	; 255
 3be:	f3 94       	inc	r15
 3c0:	cd 17       	cp	r28, r29
 3c2:	98 f6       	brcc	.-90     	; 0x36a <show_menu+0x1f4>
					} else {
						serialGLCD_writeMenuString(0, line_cnt, my_menu[from].text, 1, ' ');
						line_cnt++;
					}
				}
				serialGLCD_goto21x8_XY(0,(varDisplay_rows - 1));
 3c4:	6f ef       	ldi	r22, 0xFF	; 255
 3c6:	61 0f       	add	r22, r17
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	0e 94 2c 03 	call	0x658	; 0x658 <serialGLCD_goto21x8_XY>
				serialGLCD_sendChar(SELECTION_CHAR);
 3ce:	8e e3       	ldi	r24, 0x3E	; 62
 3d0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <serialGLCD_sendChar>
			}
		}
	}
}
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	1f 91       	pop	r17
 3da:	0f 91       	pop	r16
 3dc:	ff 90       	pop	r15
 3de:	08 95       	ret

000003e0 <main>:
{
	int buttonPressed = 0;
	int buttonPressed_delay = 0;
	int buttonReleased_delay = 0;	
	unsigned char update_menu = 1;
	selected = 1; // initialize first menu item after the menu header/title from main menu	
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <selected>
	 * - INPUT  sets a particular pin as an input in the corresponding DDR register
	 * - CLEAR sets a particular output pin to LOW
	 * - SET sets a particular output pin to HIGH
	 * - TOGGLE changes the state of the selected otput pin
	 */
	OUTPUT(dirLEDs_PORT, LED_RED);				// port C, pin 5 as output (red LED)
 3e6:	3d 9a       	sbi	0x07, 5	; 7
	CLEAR(LEDs_PORT, LED_RED);					// set it to LOW (LED is OFF)
 3e8:	45 98       	cbi	0x08, 5	; 8
	INPUT(dirPUSHBUTTON_PORT, BUTTON_enter);	// set port C data direction register pin 4 as input (button "enter")
 3ea:	3c 98       	cbi	0x07, 4	; 7
	SET(PUSHBUTTON_PORT, BUTTON_enter);         // set its latch to HIGH (not pressed)
 3ec:	44 9a       	sbi	0x08, 4	; 8
	INPUT(dirPUSHBUTTON_PORT, BUTTON_up);		// set port C data direction register pin 4 as input (button "up")
 3ee:	3a 98       	cbi	0x07, 2	; 7
	SET(PUSHBUTTON_PORT, BUTTON_up);			// set its latch to HIGH (not pressed)
 3f0:	42 9a       	sbi	0x08, 2	; 8
	INPUT(dirPUSHBUTTON_PORT, BUTTON_down);		// set port C data direction register pin 4 as input (button "down")
 3f2:	3b 98       	cbi	0x07, 3	; 7
	SET(PUSHBUTTON_PORT, BUTTON_down);          // set its latch to HIGH (not pressed)		
 3f4:	43 9a       	sbi	0x08, 3	; 8
	 * ##USART Initialization in asynchronous mode
	 *  - set the baud
	 *	- set the data framer (8bits, 1 stop bit, no parity)
	 *	- enable UART
	 */                                                                  
	UART0_Init (UART_BAUD, UART_DOUBLE_SPEED, UART_DATA_LENGTH, NO_PARITY);
 3f6:	23 e0       	ldi	r18, 0x03	; 3
 3f8:	48 e0       	ldi	r20, 0x08	; 8
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	80 e8       	ldi	r24, 0x80	; 128
 3fe:	94 e0       	ldi	r25, 0x04	; 4
 400:	0e 94 36 03 	call	0x66c	; 0x66c <UART0_Init>
    /** 
	 * ##Intro Screen
	 *  - clear screen
	 *	- after 2 sec delay put an intro screen
	 */	
	serialGLCD_clear();
 404:	0e 94 cb 02 	call	0x596	; 0x596 <serialGLCD_clear>
 408:	2f ef       	ldi	r18, 0xFF	; 255
 40a:	87 ea       	ldi	r24, 0xA7	; 167
 40c:	91 e6       	ldi	r25, 0x61	; 97
 40e:	21 50       	subi	r18, 0x01	; 1
 410:	80 40       	sbci	r24, 0x00	; 0
 412:	90 40       	sbci	r25, 0x00	; 0
 414:	e1 f7       	brne	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 418:	00 00       	nop
	_delay_ms(2000);
	start();
 41a:	0e 94 4b 00 	call	0x96	; 0x96 <start>
int main(void)
{
	int buttonPressed = 0;
	int buttonPressed_delay = 0;
	int buttonReleased_delay = 0;	
	unsigned char update_menu = 1;
 41e:	81 e0       	ldi	r24, 0x01	; 1
 */
int main(void)
{
	int buttonPressed = 0;
	int buttonPressed_delay = 0;
	int buttonReleased_delay = 0;	
 420:	e1 2c       	mov	r14, r1
 422:	f1 2c       	mov	r15, r1
 *
 */
int main(void)
{
	int buttonPressed = 0;
	int buttonPressed_delay = 0;
 424:	c0 e0       	ldi	r28, 0x00	; 0
 426:	d0 e0       	ldi	r29, 0x00	; 0
 *		- Check buttons and act respectively. Consider debouncing delays.
 *
 */
int main(void)
{
	int buttonPressed = 0;
 428:	00 e0       	ldi	r16, 0x00	; 0
 42a:	10 e0       	ldi	r17, 0x00	; 0
    while (1) 
    {
		if (update_menu == 1)
		{
			show_menu();
			update_menu = 0;	
 42c:	91 2c       	mov	r9, r1
			buttonPressed_delay = 0;
			buttonReleased_delay++;
			if (buttonReleased_delay > 1)
			{
				buttonReleased_delay = 0;
				buttonPressed = 0;
 42e:	71 2c       	mov	r7, r1
 430:	81 2c       	mov	r8, r1
			if (buttonPressed_delay > 1)
			{
				if (buttonPressed == 0)
				{
					buttonPressed = 1;
					TOGGLE(LEDs_PORT, LED_RED);
 432:	68 94       	set
 434:	aa 24       	eor	r10, r10
 436:	a5 f8       	bld	r10, 5
					selected  = my_menu[selected].down;
					update_menu = 1;
 438:	bb 24       	eor	r11, r11
 43a:	b3 94       	inc	r11
			buttonReleased_delay = 0;
			if (buttonPressed_delay > 1)
			{
				if (buttonPressed == 0)
				{
					buttonPressed = 1;
 43c:	cc 24       	eor	r12, r12
 43e:	c3 94       	inc	r12
 440:	d1 2c       	mov	r13, r1
 442:	1a c0       	rjmp	.+52     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
		}
		// check button status, de-bouncing
		if (READ(readPUSHBUTTON, BUTTON_enter) == 0) 
		{
			buttonPressed_delay++;
			buttonReleased_delay = 0;
 444:	e1 2c       	mov	r14, r1
 446:	f1 2c       	mov	r15, r1
 448:	17 c0       	rjmp	.+46     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 44a:	e1 2c       	mov	r14, r1
 44c:	f1 2c       	mov	r15, r1
					TOGGLE(LEDs_PORT, LED_RED);
					update_menu = 1;
					if (my_menu[selected].fp != 0) my_menu[selected].fp();
					selected  = my_menu[selected].enter;
				}
				buttonPressed_delay = 0;
 44e:	c0 e0       	ldi	r28, 0x00	; 0
 450:	d0 e0       	ldi	r29, 0x00	; 0
 452:	12 c0       	rjmp	.+36     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
			}						
		} else if  (READ(readPUSHBUTTON, BUTTON_up) == 0) {
			buttonPressed_delay++;
			buttonReleased_delay = 0;
 454:	e1 2c       	mov	r14, r1
 456:	f1 2c       	mov	r15, r1
 458:	0f c0       	rjmp	.+30     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 45a:	e1 2c       	mov	r14, r1
 45c:	f1 2c       	mov	r15, r1
					buttonPressed = 1;
					TOGGLE(LEDs_PORT, LED_RED);
					selected  = my_menu[selected].up;
					update_menu = 1;
				}
				buttonPressed_delay = 0;
 45e:	c0 e0       	ldi	r28, 0x00	; 0
 460:	d0 e0       	ldi	r29, 0x00	; 0
 462:	0a c0       	rjmp	.+20     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
			}
		} else if  (READ(readPUSHBUTTON, BUTTON_down) == 0) {
			buttonPressed_delay++;
			buttonReleased_delay = 0;
 464:	e1 2c       	mov	r14, r1
 466:	f1 2c       	mov	r15, r1
 468:	07 c0       	rjmp	.+14     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 46a:	e1 2c       	mov	r14, r1
 46c:	f1 2c       	mov	r15, r1
					buttonPressed = 1;
					TOGGLE(LEDs_PORT, LED_RED);
					selected  = my_menu[selected].down;
					update_menu = 1;
				}
				buttonPressed_delay = 0;
 46e:	c0 e0       	ldi	r28, 0x00	; 0
 470:	d0 e0       	ldi	r29, 0x00	; 0
 472:	02 c0       	rjmp	.+4      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
			}		
		} else {
			buttonPressed_delay = 0;
 474:	c0 e0       	ldi	r28, 0x00	; 0
 476:	d0 e0       	ldi	r29, 0x00	; 0
	 * ##Infinite loop
	 *  - Browse the menu respectively
	 */
    while (1) 
    {
		if (update_menu == 1)
 478:	81 30       	cpi	r24, 0x01	; 1
 47a:	19 f4       	brne	.+6      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
		{
			show_menu();
 47c:	0e 94 bb 00 	call	0x176	; 0x176 <show_menu>
			update_menu = 0;	
 480:	89 2d       	mov	r24, r9
		}
		// check button status, de-bouncing
		if (READ(readPUSHBUTTON, BUTTON_enter) == 0) 
 482:	34 99       	sbic	0x06, 4	; 6
 484:	31 c0       	rjmp	.+98     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
		{
			buttonPressed_delay++;
 486:	21 96       	adiw	r28, 0x01	; 1
			buttonReleased_delay = 0;
			if (buttonPressed_delay > 1)
 488:	c2 30       	cpi	r28, 0x02	; 2
 48a:	d1 05       	cpc	r29, r1
 48c:	dc f2       	brlt	.-74     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
			{
				if (buttonPressed == 0)
 48e:	01 15       	cp	r16, r1
 490:	11 05       	cpc	r17, r1
 492:	d9 f6       	brne	.-74     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
				{
					buttonPressed = 1;
					TOGGLE(LEDs_PORT, LED_RED);
 494:	88 b1       	in	r24, 0x08	; 8
 496:	8a 25       	eor	r24, r10
 498:	88 b9       	out	0x08, r24	; 8
					update_menu = 1;
					if (my_menu[selected].fp != 0) my_menu[selected].fp();
 49a:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <selected>
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	ee 0f       	add	r30, r30
 4a2:	ff 1f       	adc	r31, r31
 4a4:	ee 0f       	add	r30, r30
 4a6:	ff 1f       	adc	r31, r31
 4a8:	ee 0f       	add	r30, r30
 4aa:	ff 1f       	adc	r31, r31
 4ac:	ed 5e       	subi	r30, 0xED	; 237
 4ae:	fe 4f       	sbci	r31, 0xFE	; 254
 4b0:	06 80       	ldd	r0, Z+6	; 0x06
 4b2:	f7 81       	ldd	r31, Z+7	; 0x07
 4b4:	e0 2d       	mov	r30, r0
 4b6:	30 97       	sbiw	r30, 0x00	; 0
 4b8:	09 f0       	breq	.+2      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4ba:	09 95       	icall
					selected  = my_menu[selected].enter;
 4bc:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <selected>
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	ee 0f       	add	r30, r30
 4c4:	ff 1f       	adc	r31, r31
 4c6:	ee 0f       	add	r30, r30
 4c8:	ff 1f       	adc	r31, r31
 4ca:	ee 0f       	add	r30, r30
 4cc:	ff 1f       	adc	r31, r31
 4ce:	ed 5e       	subi	r30, 0xED	; 237
 4d0:	fe 4f       	sbci	r31, 0xFE	; 254
 4d2:	85 81       	ldd	r24, Z+5	; 0x05
 4d4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <selected>
			{
				if (buttonPressed == 0)
				{
					buttonPressed = 1;
					TOGGLE(LEDs_PORT, LED_RED);
					update_menu = 1;
 4d8:	8b 2d       	mov	r24, r11
		}
		// check button status, de-bouncing
		if (READ(readPUSHBUTTON, BUTTON_enter) == 0) 
		{
			buttonPressed_delay++;
			buttonReleased_delay = 0;
 4da:	e1 2c       	mov	r14, r1
 4dc:	f1 2c       	mov	r15, r1
					TOGGLE(LEDs_PORT, LED_RED);
					update_menu = 1;
					if (my_menu[selected].fp != 0) my_menu[selected].fp();
					selected  = my_menu[selected].enter;
				}
				buttonPressed_delay = 0;
 4de:	c0 e0       	ldi	r28, 0x00	; 0
 4e0:	d0 e0       	ldi	r29, 0x00	; 0
			buttonReleased_delay = 0;
			if (buttonPressed_delay > 1)
			{
				if (buttonPressed == 0)
				{
					buttonPressed = 1;
 4e2:	0c 2d       	mov	r16, r12
 4e4:	1d 2d       	mov	r17, r13
 4e6:	c8 cf       	rjmp	.-112    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
					if (my_menu[selected].fp != 0) my_menu[selected].fp();
					selected  = my_menu[selected].enter;
				}
				buttonPressed_delay = 0;
			}						
		} else if  (READ(readPUSHBUTTON, BUTTON_up) == 0) {
 4e8:	32 99       	sbic	0x06, 2	; 6
 4ea:	22 c0       	rjmp	.+68     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
			buttonPressed_delay++;
 4ec:	21 96       	adiw	r28, 0x01	; 1
			buttonReleased_delay = 0;
			if (buttonPressed_delay > 1)
 4ee:	c2 30       	cpi	r28, 0x02	; 2
 4f0:	d1 05       	cpc	r29, r1
 4f2:	0c f4       	brge	.+2      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4f4:	af cf       	rjmp	.-162    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			{
				if (buttonPressed == 0)
 4f6:	01 15       	cp	r16, r1
 4f8:	11 05       	cpc	r17, r1
 4fa:	09 f0       	breq	.+2      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 4fc:	ae cf       	rjmp	.-164    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
				{
					buttonPressed = 1;
					TOGGLE(LEDs_PORT, LED_RED);
 4fe:	88 b1       	in	r24, 0x08	; 8
 500:	8a 25       	eor	r24, r10
 502:	88 b9       	out	0x08, r24	; 8
					selected  = my_menu[selected].up;
 504:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <selected>
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	ee 0f       	add	r30, r30
 50c:	ff 1f       	adc	r31, r31
 50e:	ee 0f       	add	r30, r30
 510:	ff 1f       	adc	r31, r31
 512:	ee 0f       	add	r30, r30
 514:	ff 1f       	adc	r31, r31
 516:	ed 5e       	subi	r30, 0xED	; 237
 518:	fe 4f       	sbci	r31, 0xFE	; 254
 51a:	83 81       	ldd	r24, Z+3	; 0x03
 51c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <selected>
					update_menu = 1;
 520:	8b 2d       	mov	r24, r11
				}
				buttonPressed_delay = 0;
			}						
		} else if  (READ(readPUSHBUTTON, BUTTON_up) == 0) {
			buttonPressed_delay++;
			buttonReleased_delay = 0;
 522:	e1 2c       	mov	r14, r1
 524:	f1 2c       	mov	r15, r1
					buttonPressed = 1;
					TOGGLE(LEDs_PORT, LED_RED);
					selected  = my_menu[selected].up;
					update_menu = 1;
				}
				buttonPressed_delay = 0;
 526:	c0 e0       	ldi	r28, 0x00	; 0
 528:	d0 e0       	ldi	r29, 0x00	; 0
			buttonReleased_delay = 0;
			if (buttonPressed_delay > 1)
			{
				if (buttonPressed == 0)
				{
					buttonPressed = 1;
 52a:	0c 2d       	mov	r16, r12
 52c:	1d 2d       	mov	r17, r13
 52e:	a4 cf       	rjmp	.-184    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
					selected  = my_menu[selected].up;
					update_menu = 1;
				}
				buttonPressed_delay = 0;
			}
		} else if  (READ(readPUSHBUTTON, BUTTON_down) == 0) {
 530:	33 99       	sbic	0x06, 3	; 6
 532:	22 c0       	rjmp	.+68     	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
			buttonPressed_delay++;
 534:	21 96       	adiw	r28, 0x01	; 1
			buttonReleased_delay = 0;
			if (buttonPressed_delay > 1)
 536:	c2 30       	cpi	r28, 0x02	; 2
 538:	d1 05       	cpc	r29, r1
 53a:	0c f4       	brge	.+2      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 53c:	93 cf       	rjmp	.-218    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
			{
				if (buttonPressed == 0)
 53e:	01 15       	cp	r16, r1
 540:	11 05       	cpc	r17, r1
 542:	09 f0       	breq	.+2      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 544:	92 cf       	rjmp	.-220    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
				{
					buttonPressed = 1;
					TOGGLE(LEDs_PORT, LED_RED);
 546:	88 b1       	in	r24, 0x08	; 8
 548:	8a 25       	eor	r24, r10
 54a:	88 b9       	out	0x08, r24	; 8
					selected  = my_menu[selected].down;
 54c:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <selected>
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	ee 0f       	add	r30, r30
 554:	ff 1f       	adc	r31, r31
 556:	ee 0f       	add	r30, r30
 558:	ff 1f       	adc	r31, r31
 55a:	ee 0f       	add	r30, r30
 55c:	ff 1f       	adc	r31, r31
 55e:	ed 5e       	subi	r30, 0xED	; 237
 560:	fe 4f       	sbci	r31, 0xFE	; 254
 562:	84 81       	ldd	r24, Z+4	; 0x04
 564:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <selected>
					update_menu = 1;
 568:	8b 2d       	mov	r24, r11
				}
				buttonPressed_delay = 0;
			}
		} else if  (READ(readPUSHBUTTON, BUTTON_down) == 0) {
			buttonPressed_delay++;
			buttonReleased_delay = 0;
 56a:	e1 2c       	mov	r14, r1
 56c:	f1 2c       	mov	r15, r1
					buttonPressed = 1;
					TOGGLE(LEDs_PORT, LED_RED);
					selected  = my_menu[selected].down;
					update_menu = 1;
				}
				buttonPressed_delay = 0;
 56e:	c0 e0       	ldi	r28, 0x00	; 0
 570:	d0 e0       	ldi	r29, 0x00	; 0
			buttonReleased_delay = 0;
			if (buttonPressed_delay > 1)
			{
				if (buttonPressed == 0)
				{
					buttonPressed = 1;
 572:	0c 2d       	mov	r16, r12
 574:	1d 2d       	mov	r17, r13
 576:	80 cf       	rjmp	.-256    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
				}
				buttonPressed_delay = 0;
			}		
		} else {
			buttonPressed_delay = 0;
			buttonReleased_delay++;
 578:	2f ef       	ldi	r18, 0xFF	; 255
 57a:	e2 1a       	sub	r14, r18
 57c:	f2 0a       	sbc	r15, r18
			if (buttonReleased_delay > 1)
 57e:	92 e0       	ldi	r25, 0x02	; 2
 580:	e9 16       	cp	r14, r25
 582:	f1 04       	cpc	r15, r1
 584:	0c f4       	brge	.+2      	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 586:	76 cf       	rjmp	.-276    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
			{
				buttonReleased_delay = 0;
 588:	e1 2c       	mov	r14, r1
 58a:	f1 2c       	mov	r15, r1
					update_menu = 1;
				}
				buttonPressed_delay = 0;
			}		
		} else {
			buttonPressed_delay = 0;
 58c:	c0 e0       	ldi	r28, 0x00	; 0
 58e:	d0 e0       	ldi	r29, 0x00	; 0
			buttonReleased_delay++;
			if (buttonReleased_delay > 1)
			{
				buttonReleased_delay = 0;
				buttonPressed = 0;
 590:	07 2d       	mov	r16, r7
 592:	18 2d       	mov	r17, r8
 594:	71 cf       	rjmp	.-286    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>

00000596 <serialGLCD_clear>:
 * If you're operating in normal mode, all pixels are reset.
 * If you're operating in reverse mode, all pixels are set.
 *
 */
void serialGLCD_clear()
{
 596:	cf 93       	push	r28
 598:	df 93       	push	r29
	wait_while_UART0_is_busy(0); // check if the transmitter is busy
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	0e 94 b9 03 	call	0x772	; 0x772 <wait_while_UART0_is_busy>
	UDR0 = 0x7C;
 5a0:	c6 ec       	ldi	r28, 0xC6	; 198
 5a2:	d0 e0       	ldi	r29, 0x00	; 0
 5a4:	8c e7       	ldi	r24, 0x7C	; 124
 5a6:	88 83       	st	Y, r24
	wait_while_UART0_is_busy(0); // check if the transmitter is busy
 5a8:	80 e0       	ldi	r24, 0x00	; 0
 5aa:	0e 94 b9 03 	call	0x772	; 0x772 <wait_while_UART0_is_busy>
	UDR0 = 0x00;
 5ae:	18 82       	st	Y, r1
}
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	08 95       	ret

000005b6 <serialGLCD_sendChar>:
 * - Initially used added delay in _sendChar function but finally moved it into wait_while_UART0_is_busy();
 * - Consider 5ms should be sufficient delay but could depends of the complexity of the screen we want to show
 *
 */
void serialGLCD_sendChar(unsigned char myChar)
{
 5b6:	cf 93       	push	r28
 5b8:	c8 2f       	mov	r28, r24
	wait_while_UART0_is_busy(1); // check if the transmitter is busy
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	0e 94 b9 03 	call	0x772	; 0x772 <wait_while_UART0_is_busy>
	//_delay_ms(GLCD_DELAY);
	UDR0 = myChar;
 5c0:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 5c4:	cf 91       	pop	r28
 5c6:	08 95       	ret

000005c8 <serialGLCD_sendString>:
 * - First character of the string is being displayed at current X, Y position and it is moved forward to next position.
 * - Thus the display is acting like the known type character LCD
 *
 */
void serialGLCD_sendString(char *myString)
{
 5c8:	cf 93       	push	r28
 5ca:	df 93       	push	r29
 5cc:	ec 01       	movw	r28, r24
	while (*myString > 0)
 5ce:	88 81       	ld	r24, Y
 5d0:	88 23       	and	r24, r24
 5d2:	31 f0       	breq	.+12     	; 0x5e0 <serialGLCD_sendString+0x18>
 5d4:	21 96       	adiw	r28, 0x01	; 1
	{
		serialGLCD_sendChar(*myString++);
 5d6:	0e 94 db 02 	call	0x5b6	; 0x5b6 <serialGLCD_sendChar>
 * - Thus the display is acting like the known type character LCD
 *
 */
void serialGLCD_sendString(char *myString)
{
	while (*myString > 0)
 5da:	89 91       	ld	r24, Y+
 5dc:	81 11       	cpse	r24, r1
 5de:	fb cf       	rjmp	.-10     	; 0x5d6 <serialGLCD_sendString+0xe>
	{
		serialGLCD_sendChar(*myString++);
	}	
}
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	08 95       	ret

000005e6 <serialGLCD_gotoPixel_XY>:
 * @param pixelX	range 0, 127
 * @param pixelY	range 0, 63
 *
 */
void serialGLCD_gotoPixel_XY(unsigned char pixelX, unsigned char pixelY)
{
 5e6:	ff 92       	push	r15
 5e8:	0f 93       	push	r16
 5ea:	1f 93       	push	r17
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	08 2f       	mov	r16, r24
 5f2:	16 2f       	mov	r17, r22
	// check the range
	if (pixelX > INITIAL_pixel_MAXX) pixelX = 0;
 5f4:	88 23       	and	r24, r24
 5f6:	0c f4       	brge	.+2      	; 0x5fa <serialGLCD_gotoPixel_XY+0x14>
 5f8:	00 e0       	ldi	r16, 0x00	; 0
	if (pixelY > INITIAL_pixel_MAXY) pixelY = 0;
 5fa:	10 34       	cpi	r17, 0x40	; 64
 5fc:	08 f0       	brcs	.+2      	; 0x600 <serialGLCD_gotoPixel_XY+0x1a>
 5fe:	10 e0       	ldi	r17, 0x00	; 0
	// send X
	wait_while_UART0_is_busy(0); // check if the transmitter is busy
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	0e 94 b9 03 	call	0x772	; 0x772 <wait_while_UART0_is_busy>
	UDR0 = 0x7C;
 606:	c6 ec       	ldi	r28, 0xC6	; 198
 608:	d0 e0       	ldi	r29, 0x00	; 0
 60a:	0f 2e       	mov	r0, r31
 60c:	fc e7       	ldi	r31, 0x7C	; 124
 60e:	ff 2e       	mov	r15, r31
 610:	f0 2d       	mov	r31, r0
 612:	f8 82       	st	Y, r15
	wait_while_UART0_is_busy(0); // check if the transmitter is busy
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	0e 94 b9 03 	call	0x772	; 0x772 <wait_while_UART0_is_busy>
	UDR0 = 0x18;
 61a:	88 e1       	ldi	r24, 0x18	; 24
 61c:	88 83       	st	Y, r24
	wait_while_UART0_is_busy(0); // check if the transmitter is busy
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	0e 94 b9 03 	call	0x772	; 0x772 <wait_while_UART0_is_busy>
	UDR0 = pixelX;
 624:	08 83       	st	Y, r16
	
	// send Y
	wait_while_UART0_is_busy(0); // check if the transmitter is busy
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	0e 94 b9 03 	call	0x772	; 0x772 <wait_while_UART0_is_busy>
	UDR0 = 0x7C;
 62c:	f8 82       	st	Y, r15
	wait_while_UART0_is_busy(0); // check if the transmitter is busy
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	0e 94 b9 03 	call	0x772	; 0x772 <wait_while_UART0_is_busy>
	UDR0 = 0x19;
 634:	89 e1       	ldi	r24, 0x19	; 25
 636:	88 83       	st	Y, r24
	wait_while_UART0_is_busy(0); // check if the transmitter is busy
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	0e 94 b9 03 	call	0x772	; 0x772 <wait_while_UART0_is_busy>
	UDR0 = pixelY;	
 63e:	18 83       	st	Y, r17
 640:	8f e1       	ldi	r24, 0x1F	; 31
 642:	9e e4       	ldi	r25, 0x4E	; 78
 644:	01 97       	sbiw	r24, 0x01	; 1
 646:	f1 f7       	brne	.-4      	; 0x644 <serialGLCD_gotoPixel_XY+0x5e>
 648:	00 c0       	rjmp	.+0      	; 0x64a <serialGLCD_gotoPixel_XY+0x64>
 64a:	00 00       	nop
	_delay_ms(5);
}
 64c:	df 91       	pop	r29
 64e:	cf 91       	pop	r28
 650:	1f 91       	pop	r17
 652:	0f 91       	pop	r16
 654:	ff 90       	pop	r15
 656:	08 95       	ret

00000658 <serialGLCD_goto21x8_XY>:
	unsigned char pixelX = (refX) * 6; ///< pixelX	range 0, 127
	// find pixel Y
	unsigned char pixelY = (refY) * 8; ///< pixelY	range 0, 63
	
	// goto pixel X, Y
	serialGLCD_gotoPixel_XY(pixelX, pixelY);
 658:	66 0f       	add	r22, r22
 65a:	66 0f       	add	r22, r22
 65c:	66 0f       	add	r22, r22
 65e:	98 2f       	mov	r25, r24
 660:	99 0f       	add	r25, r25
 662:	89 0f       	add	r24, r25
 664:	88 0f       	add	r24, r24
 666:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <serialGLCD_gotoPixel_XY>
 66a:	08 95       	ret

0000066c <UART0_Init>:
 *	- Transmitter is enabled by setting the Transmit Enable (TXEN) bit in the UCSRnB Register
 *  - Receiver is enabled by setting the Receive Enable (RXEN) bit in the UCSRnB Register
 *
 */
void UART0_Init (uint16_t baud, char AsyncDoubleSpeed, char dataLength, char Parity, char stopbits)
{
 66c:	cf 92       	push	r12
 66e:	df 92       	push	r13
 670:	ef 92       	push	r14
 672:	ff 92       	push	r15
 674:	0f 93       	push	r16
 676:	cf 93       	push	r28
 678:	df 93       	push	r29
 67a:	6c 01       	movw	r12, r24
 67c:	c4 2f       	mov	r28, r20
 67e:	d2 2f       	mov	r29, r18
	char K = 1;
	if (AsyncDoubleSpeed == 1) 
 680:	61 30       	cpi	r22, 0x01	; 1
 682:	39 f4       	brne	.+14     	; 0x692 <UART0_Init+0x26>
	{
		K = 2;
		UCSR0A |= (1 << U2X0);
 684:	e0 ec       	ldi	r30, 0xC0	; 192
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	80 81       	ld	r24, Z
 68a:	82 60       	ori	r24, 0x02	; 2
 68c:	80 83       	st	Z, r24
void UART0_Init (uint16_t baud, char AsyncDoubleSpeed, char dataLength, char Parity, char stopbits)
{
	char K = 1;
	if (AsyncDoubleSpeed == 1) 
	{
		K = 2;
 68e:	a2 e0       	ldi	r26, 0x02	; 2
 690:	01 c0       	rjmp	.+2      	; 0x694 <UART0_Init+0x28>
 *  - Receiver is enabled by setting the Receive Enable (RXEN) bit in the UCSRnB Register
 *
 */
void UART0_Init (uint16_t baud, char AsyncDoubleSpeed, char dataLength, char Parity, char stopbits)
{
	char K = 1;
 692:	a1 e0       	ldi	r26, 0x01	; 1
	{
		K = 2;
		UCSR0A |= (1 << U2X0);
	}
	//uint16_t UBRRvalue = 16; //lrint((K*F_CPU/16*100*baud) -1);
	uint16_t UBRRvalue = lrint((K*F_CPU/16/100/baud) -1);
 694:	b0 e0       	ldi	r27, 0x00	; 0
 696:	20 e0       	ldi	r18, 0x00	; 0
 698:	34 e2       	ldi	r19, 0x24	; 36
 69a:	44 ef       	ldi	r20, 0xF4	; 244
 69c:	50 e0       	ldi	r21, 0x00	; 0
 69e:	0e 94 8c 04 	call	0x918	; 0x918 <__muluhisi3>
 6a2:	20 e4       	ldi	r18, 0x40	; 64
 6a4:	36 e0       	ldi	r19, 0x06	; 6
 6a6:	40 e0       	ldi	r20, 0x00	; 0
 6a8:	50 e0       	ldi	r21, 0x00	; 0
 6aa:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__udivmodsi4>
 6ae:	e1 2c       	mov	r14, r1
 6b0:	f1 2c       	mov	r15, r1
 6b2:	ca 01       	movw	r24, r20
 6b4:	b9 01       	movw	r22, r18
 6b6:	a7 01       	movw	r20, r14
 6b8:	96 01       	movw	r18, r12
 6ba:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__udivmodsi4>
 6be:	ca 01       	movw	r24, r20
 6c0:	b9 01       	movw	r22, r18
 6c2:	61 50       	subi	r22, 0x01	; 1
 6c4:	71 09       	sbc	r23, r1
 6c6:	81 09       	sbc	r24, r1
 6c8:	91 09       	sbc	r25, r1
 6ca:	0e 94 c7 03 	call	0x78e	; 0x78e <__floatunsisf>
 6ce:	0e 94 04 04 	call	0x808	; 0x808 <lrint>
	UBRR0H = (unsigned char) (UBRRvalue >> 8);
 6d2:	27 2f       	mov	r18, r23
 6d4:	33 27       	eor	r19, r19
 6d6:	20 93 c5 00 	sts	0x00C5, r18	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char) (UBRRvalue);
 6da:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	// setting frame format, 8bit, no parity, 1 stop
	if (Parity == PARITY_EVEN)	UCSR0C |= (1 << UPM01); // set parity for EVEN
 6de:	d1 11       	cpse	r29, r1
 6e0:	06 c0       	rjmp	.+12     	; 0x6ee <UART0_Init+0x82>
 6e2:	e2 ec       	ldi	r30, 0xC2	; 194
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	80 81       	ld	r24, Z
 6e8:	80 62       	ori	r24, 0x20	; 32
 6ea:	80 83       	st	Z, r24
 6ec:	07 c0       	rjmp	.+14     	; 0x6fc <UART0_Init+0x90>
	if (Parity == PARITY_ODD)	UCSR0C |= (3 << UPM00); // set parity for ODD
 6ee:	d1 30       	cpi	r29, 0x01	; 1
 6f0:	29 f4       	brne	.+10     	; 0x6fc <UART0_Init+0x90>
 6f2:	e2 ec       	ldi	r30, 0xC2	; 194
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	80 81       	ld	r24, Z
 6f8:	80 63       	ori	r24, 0x30	; 48
 6fa:	80 83       	st	Z, r24
	
	// frame format used by the USART is set by the UCSZn2:0, UPMn1:0 and USBSn bits in UCSRnB and UCSRnC
	if (stopbits == 1) UCSR0C &= ~(1 << USBS0);		// 1 stop bit, this is default. We need to clear if it was previously set
 6fc:	01 30       	cpi	r16, 0x01	; 1
 6fe:	31 f4       	brne	.+12     	; 0x70c <UART0_Init+0xa0>
 700:	e2 ec       	ldi	r30, 0xC2	; 194
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	80 81       	ld	r24, Z
 706:	87 7f       	andi	r24, 0xF7	; 247
 708:	80 83       	st	Z, r24
 70a:	07 c0       	rjmp	.+14     	; 0x71a <UART0_Init+0xae>
	if (stopbits == 2) UCSR0C |= (1 << USBS0);		// 2 stop bits
 70c:	02 30       	cpi	r16, 0x02	; 2
 70e:	29 f4       	brne	.+10     	; 0x71a <UART0_Init+0xae>
 710:	e2 ec       	ldi	r30, 0xC2	; 194
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	80 81       	ld	r24, Z
 716:	88 60       	ori	r24, 0x08	; 8
 718:	80 83       	st	Z, r24
	
	if (dataLength == 6) UCSR0C |= (1 << UCSZ00);	// 6 bits UART data length
 71a:	c6 30       	cpi	r28, 0x06	; 6
 71c:	31 f4       	brne	.+12     	; 0x72a <UART0_Init+0xbe>
 71e:	e2 ec       	ldi	r30, 0xC2	; 194
 720:	f0 e0       	ldi	r31, 0x00	; 0
 722:	80 81       	ld	r24, Z
 724:	82 60       	ori	r24, 0x02	; 2
 726:	80 83       	st	Z, r24
 728:	10 c0       	rjmp	.+32     	; 0x74a <UART0_Init+0xde>
	if (dataLength == 7) UCSR0C |= (2 << UCSZ00);	// 7 bits UART data length
 72a:	c7 30       	cpi	r28, 0x07	; 7
 72c:	31 f4       	brne	.+12     	; 0x73a <UART0_Init+0xce>
 72e:	e2 ec       	ldi	r30, 0xC2	; 194
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	80 81       	ld	r24, Z
 734:	84 60       	ori	r24, 0x04	; 4
 736:	80 83       	st	Z, r24
 738:	0f c0       	rjmp	.+30     	; 0x758 <UART0_Init+0xec>
	if (dataLength == 8) UCSR0C |= (3 << UCSZ00);	// 8 bits UART data length
 73a:	c8 30       	cpi	r28, 0x08	; 8
 73c:	31 f4       	brne	.+12     	; 0x74a <UART0_Init+0xde>
 73e:	e2 ec       	ldi	r30, 0xC2	; 194
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	80 81       	ld	r24, Z
 744:	86 60       	ori	r24, 0x06	; 6
 746:	80 83       	st	Z, r24
 748:	07 c0       	rjmp	.+14     	; 0x758 <UART0_Init+0xec>
	if (dataLength == 9) UCSR0C |= (7 << UCSZ00);	// 9 bits UART data length
 74a:	c9 30       	cpi	r28, 0x09	; 9
 74c:	29 f4       	brne	.+10     	; 0x758 <UART0_Init+0xec>
 74e:	e2 ec       	ldi	r30, 0xC2	; 194
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	80 81       	ld	r24, Z
 754:	8e 60       	ori	r24, 0x0E	; 14
 756:	80 83       	st	Z, r24
		
	// Enable transmit or/and receive operation
	// Transmitter is enabled by setting the Transmit Enable (TXEN) bit in the UCSRnB Register
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0);
 758:	e1 ec       	ldi	r30, 0xC1	; 193
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	80 81       	ld	r24, Z
 75e:	88 61       	ori	r24, 0x18	; 24
 760:	80 83       	st	Z, r24
}
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	0f 91       	pop	r16
 768:	ff 90       	pop	r15
 76a:	ef 90       	pop	r14
 76c:	df 90       	pop	r13
 76e:	cf 90       	pop	r12
 770:	08 95       	ret

00000772 <wait_while_UART0_is_busy>:
 * @param add_delay One may consider an additional delay depends of the receiver needs (e.g. serial graphic LCD)
 *
 */
void wait_while_UART0_is_busy(unsigned char add_delay)
{
	while (!(UCSR0A & (1 << UDRE0))); // check if the transmitter is busy
 772:	e0 ec       	ldi	r30, 0xC0	; 192
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	90 81       	ld	r25, Z
 778:	95 ff       	sbrs	r25, 5
 77a:	fd cf       	rjmp	.-6      	; 0x776 <wait_while_UART0_is_busy+0x4>
	if (add_delay) _delay_ms(GLCD_DELAY);
 77c:	88 23       	and	r24, r24
 77e:	31 f0       	breq	.+12     	; 0x78c <wait_while_UART0_is_busy+0x1a>
 780:	8f e1       	ldi	r24, 0x1F	; 31
 782:	9e e4       	ldi	r25, 0x4E	; 78
 784:	01 97       	sbiw	r24, 0x01	; 1
 786:	f1 f7       	brne	.-4      	; 0x784 <wait_while_UART0_is_busy+0x12>
 788:	00 c0       	rjmp	.+0      	; 0x78a <wait_while_UART0_is_busy+0x18>
 78a:	00 00       	nop
 78c:	08 95       	ret

0000078e <__floatunsisf>:
 78e:	e8 94       	clt
 790:	09 c0       	rjmp	.+18     	; 0x7a4 <__floatsisf+0x12>

00000792 <__floatsisf>:
 792:	97 fb       	bst	r25, 7
 794:	3e f4       	brtc	.+14     	; 0x7a4 <__floatsisf+0x12>
 796:	90 95       	com	r25
 798:	80 95       	com	r24
 79a:	70 95       	com	r23
 79c:	61 95       	neg	r22
 79e:	7f 4f       	sbci	r23, 0xFF	; 255
 7a0:	8f 4f       	sbci	r24, 0xFF	; 255
 7a2:	9f 4f       	sbci	r25, 0xFF	; 255
 7a4:	99 23       	and	r25, r25
 7a6:	a9 f0       	breq	.+42     	; 0x7d2 <__floatsisf+0x40>
 7a8:	f9 2f       	mov	r31, r25
 7aa:	96 e9       	ldi	r25, 0x96	; 150
 7ac:	bb 27       	eor	r27, r27
 7ae:	93 95       	inc	r25
 7b0:	f6 95       	lsr	r31
 7b2:	87 95       	ror	r24
 7b4:	77 95       	ror	r23
 7b6:	67 95       	ror	r22
 7b8:	b7 95       	ror	r27
 7ba:	f1 11       	cpse	r31, r1
 7bc:	f8 cf       	rjmp	.-16     	; 0x7ae <__floatsisf+0x1c>
 7be:	fa f4       	brpl	.+62     	; 0x7fe <__floatsisf+0x6c>
 7c0:	bb 0f       	add	r27, r27
 7c2:	11 f4       	brne	.+4      	; 0x7c8 <__floatsisf+0x36>
 7c4:	60 ff       	sbrs	r22, 0
 7c6:	1b c0       	rjmp	.+54     	; 0x7fe <__floatsisf+0x6c>
 7c8:	6f 5f       	subi	r22, 0xFF	; 255
 7ca:	7f 4f       	sbci	r23, 0xFF	; 255
 7cc:	8f 4f       	sbci	r24, 0xFF	; 255
 7ce:	9f 4f       	sbci	r25, 0xFF	; 255
 7d0:	16 c0       	rjmp	.+44     	; 0x7fe <__floatsisf+0x6c>
 7d2:	88 23       	and	r24, r24
 7d4:	11 f0       	breq	.+4      	; 0x7da <__floatsisf+0x48>
 7d6:	96 e9       	ldi	r25, 0x96	; 150
 7d8:	11 c0       	rjmp	.+34     	; 0x7fc <__floatsisf+0x6a>
 7da:	77 23       	and	r23, r23
 7dc:	21 f0       	breq	.+8      	; 0x7e6 <__floatsisf+0x54>
 7de:	9e e8       	ldi	r25, 0x8E	; 142
 7e0:	87 2f       	mov	r24, r23
 7e2:	76 2f       	mov	r23, r22
 7e4:	05 c0       	rjmp	.+10     	; 0x7f0 <__floatsisf+0x5e>
 7e6:	66 23       	and	r22, r22
 7e8:	71 f0       	breq	.+28     	; 0x806 <__floatsisf+0x74>
 7ea:	96 e8       	ldi	r25, 0x86	; 134
 7ec:	86 2f       	mov	r24, r22
 7ee:	70 e0       	ldi	r23, 0x00	; 0
 7f0:	60 e0       	ldi	r22, 0x00	; 0
 7f2:	2a f0       	brmi	.+10     	; 0x7fe <__floatsisf+0x6c>
 7f4:	9a 95       	dec	r25
 7f6:	66 0f       	add	r22, r22
 7f8:	77 1f       	adc	r23, r23
 7fa:	88 1f       	adc	r24, r24
 7fc:	da f7       	brpl	.-10     	; 0x7f4 <__floatsisf+0x62>
 7fe:	88 0f       	add	r24, r24
 800:	96 95       	lsr	r25
 802:	87 95       	ror	r24
 804:	97 f9       	bld	r25, 7
 806:	08 95       	ret

00000808 <lrint>:
 808:	0e 94 49 04 	call	0x892	; 0x892 <__fp_splitA>
 80c:	a8 f1       	brcs	.+106    	; 0x878 <lrint+0x70>
 80e:	9e 57       	subi	r25, 0x7E	; 126
 810:	b0 f1       	brcs	.+108    	; 0x87e <lrint+0x76>
 812:	98 51       	subi	r25, 0x18	; 24
 814:	60 f0       	brcs	.+24     	; 0x82e <lrint+0x26>
 816:	39 f1       	breq	.+78     	; 0x866 <lrint+0x5e>
 818:	98 30       	cpi	r25, 0x08	; 8
 81a:	70 f5       	brcc	.+92     	; 0x878 <lrint+0x70>
 81c:	09 2e       	mov	r0, r25
 81e:	99 27       	eor	r25, r25
 820:	66 0f       	add	r22, r22
 822:	77 1f       	adc	r23, r23
 824:	88 1f       	adc	r24, r24
 826:	99 1f       	adc	r25, r25
 828:	0a 94       	dec	r0
 82a:	d1 f7       	brne	.-12     	; 0x820 <lrint+0x18>
 82c:	1c c0       	rjmp	.+56     	; 0x866 <lrint+0x5e>
 82e:	bb 27       	eor	r27, r27
 830:	99 3f       	cpi	r25, 0xF9	; 249
 832:	4c f4       	brge	.+18     	; 0x846 <lrint+0x3e>
 834:	b1 11       	cpse	r27, r1
 836:	b1 e0       	ldi	r27, 0x01	; 1
 838:	b6 2b       	or	r27, r22
 83a:	67 2f       	mov	r22, r23
 83c:	78 2f       	mov	r23, r24
 83e:	88 27       	eor	r24, r24
 840:	98 5f       	subi	r25, 0xF8	; 248
 842:	b1 f7       	brne	.-20     	; 0x830 <lrint+0x28>
 844:	08 c0       	rjmp	.+16     	; 0x856 <lrint+0x4e>
 846:	86 95       	lsr	r24
 848:	77 95       	ror	r23
 84a:	67 95       	ror	r22
 84c:	b7 95       	ror	r27
 84e:	08 f4       	brcc	.+2      	; 0x852 <lrint+0x4a>
 850:	b1 60       	ori	r27, 0x01	; 1
 852:	93 95       	inc	r25
 854:	c1 f7       	brne	.-16     	; 0x846 <lrint+0x3e>
 856:	bb 0f       	add	r27, r27
 858:	30 f4       	brcc	.+12     	; 0x866 <lrint+0x5e>
 85a:	11 f4       	brne	.+4      	; 0x860 <lrint+0x58>
 85c:	60 ff       	sbrs	r22, 0
 85e:	03 c0       	rjmp	.+6      	; 0x866 <lrint+0x5e>
 860:	6f 5f       	subi	r22, 0xFF	; 255
 862:	7f 4f       	sbci	r23, 0xFF	; 255
 864:	8f 4f       	sbci	r24, 0xFF	; 255
 866:	3e f4       	brtc	.+14     	; 0x876 <lrint+0x6e>
 868:	90 95       	com	r25
 86a:	80 95       	com	r24
 86c:	70 95       	com	r23
 86e:	61 95       	neg	r22
 870:	7f 4f       	sbci	r23, 0xFF	; 255
 872:	8f 4f       	sbci	r24, 0xFF	; 255
 874:	9f 4f       	sbci	r25, 0xFF	; 255
 876:	08 95       	ret
 878:	68 94       	set
 87a:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__fp_szero>
 87e:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__fp_zero>

00000882 <__fp_split3>:
 882:	57 fd       	sbrc	r21, 7
 884:	90 58       	subi	r25, 0x80	; 128
 886:	44 0f       	add	r20, r20
 888:	55 1f       	adc	r21, r21
 88a:	59 f0       	breq	.+22     	; 0x8a2 <__fp_splitA+0x10>
 88c:	5f 3f       	cpi	r21, 0xFF	; 255
 88e:	71 f0       	breq	.+28     	; 0x8ac <__fp_splitA+0x1a>
 890:	47 95       	ror	r20

00000892 <__fp_splitA>:
 892:	88 0f       	add	r24, r24
 894:	97 fb       	bst	r25, 7
 896:	99 1f       	adc	r25, r25
 898:	61 f0       	breq	.+24     	; 0x8b2 <__fp_splitA+0x20>
 89a:	9f 3f       	cpi	r25, 0xFF	; 255
 89c:	79 f0       	breq	.+30     	; 0x8bc <__fp_splitA+0x2a>
 89e:	87 95       	ror	r24
 8a0:	08 95       	ret
 8a2:	12 16       	cp	r1, r18
 8a4:	13 06       	cpc	r1, r19
 8a6:	14 06       	cpc	r1, r20
 8a8:	55 1f       	adc	r21, r21
 8aa:	f2 cf       	rjmp	.-28     	; 0x890 <__fp_split3+0xe>
 8ac:	46 95       	lsr	r20
 8ae:	f1 df       	rcall	.-30     	; 0x892 <__fp_splitA>
 8b0:	08 c0       	rjmp	.+16     	; 0x8c2 <__fp_splitA+0x30>
 8b2:	16 16       	cp	r1, r22
 8b4:	17 06       	cpc	r1, r23
 8b6:	18 06       	cpc	r1, r24
 8b8:	99 1f       	adc	r25, r25
 8ba:	f1 cf       	rjmp	.-30     	; 0x89e <__fp_splitA+0xc>
 8bc:	86 95       	lsr	r24
 8be:	71 05       	cpc	r23, r1
 8c0:	61 05       	cpc	r22, r1
 8c2:	08 94       	sec
 8c4:	08 95       	ret

000008c6 <__fp_zero>:
 8c6:	e8 94       	clt

000008c8 <__fp_szero>:
 8c8:	bb 27       	eor	r27, r27
 8ca:	66 27       	eor	r22, r22
 8cc:	77 27       	eor	r23, r23
 8ce:	cb 01       	movw	r24, r22
 8d0:	97 f9       	bld	r25, 7
 8d2:	08 95       	ret

000008d4 <__udivmodsi4>:
 8d4:	a1 e2       	ldi	r26, 0x21	; 33
 8d6:	1a 2e       	mov	r1, r26
 8d8:	aa 1b       	sub	r26, r26
 8da:	bb 1b       	sub	r27, r27
 8dc:	fd 01       	movw	r30, r26
 8de:	0d c0       	rjmp	.+26     	; 0x8fa <__udivmodsi4_ep>

000008e0 <__udivmodsi4_loop>:
 8e0:	aa 1f       	adc	r26, r26
 8e2:	bb 1f       	adc	r27, r27
 8e4:	ee 1f       	adc	r30, r30
 8e6:	ff 1f       	adc	r31, r31
 8e8:	a2 17       	cp	r26, r18
 8ea:	b3 07       	cpc	r27, r19
 8ec:	e4 07       	cpc	r30, r20
 8ee:	f5 07       	cpc	r31, r21
 8f0:	20 f0       	brcs	.+8      	; 0x8fa <__udivmodsi4_ep>
 8f2:	a2 1b       	sub	r26, r18
 8f4:	b3 0b       	sbc	r27, r19
 8f6:	e4 0b       	sbc	r30, r20
 8f8:	f5 0b       	sbc	r31, r21

000008fa <__udivmodsi4_ep>:
 8fa:	66 1f       	adc	r22, r22
 8fc:	77 1f       	adc	r23, r23
 8fe:	88 1f       	adc	r24, r24
 900:	99 1f       	adc	r25, r25
 902:	1a 94       	dec	r1
 904:	69 f7       	brne	.-38     	; 0x8e0 <__udivmodsi4_loop>
 906:	60 95       	com	r22
 908:	70 95       	com	r23
 90a:	80 95       	com	r24
 90c:	90 95       	com	r25
 90e:	9b 01       	movw	r18, r22
 910:	ac 01       	movw	r20, r24
 912:	bd 01       	movw	r22, r26
 914:	cf 01       	movw	r24, r30
 916:	08 95       	ret

00000918 <__muluhisi3>:
 918:	0e 94 97 04 	call	0x92e	; 0x92e <__umulhisi3>
 91c:	a5 9f       	mul	r26, r21
 91e:	90 0d       	add	r25, r0
 920:	b4 9f       	mul	r27, r20
 922:	90 0d       	add	r25, r0
 924:	a4 9f       	mul	r26, r20
 926:	80 0d       	add	r24, r0
 928:	91 1d       	adc	r25, r1
 92a:	11 24       	eor	r1, r1
 92c:	08 95       	ret

0000092e <__umulhisi3>:
 92e:	a2 9f       	mul	r26, r18
 930:	b0 01       	movw	r22, r0
 932:	b3 9f       	mul	r27, r19
 934:	c0 01       	movw	r24, r0
 936:	a3 9f       	mul	r26, r19
 938:	70 0d       	add	r23, r0
 93a:	81 1d       	adc	r24, r1
 93c:	11 24       	eor	r1, r1
 93e:	91 1d       	adc	r25, r1
 940:	b2 9f       	mul	r27, r18
 942:	70 0d       	add	r23, r0
 944:	81 1d       	adc	r24, r1
 946:	11 24       	eor	r1, r1
 948:	91 1d       	adc	r25, r1
 94a:	08 95       	ret

0000094c <_exit>:
 94c:	f8 94       	cli

0000094e <__stop_program>:
 94e:	ff cf       	rjmp	.-2      	; 0x94e <__stop_program>
