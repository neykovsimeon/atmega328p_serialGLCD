
serialGLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000586  000005fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000586  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000638  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d10  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e7  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000783  00000000  00000000  00001d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000019c  00000000  00000000  00002494  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000589  00000000  00000000  00002630  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006e3  00000000  00000000  00002bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000329c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e8       	ldi	r30, 0x86	; 134
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 c1 02 	jmp	0x582	; 0x582 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
	int buttonReleased_delay = 0;
	
	int cmdPinter = 0;		// to be used to toggle between clear screen and any screen effect
	int cmdStepPointer = 0;	// points to the particular command step		
	
	OUTPUT(dirLEDs_PORT, LED_WHITE);			// port C, pin 6 as output
  96:	3d 9a       	sbi	0x07, 5	; 7
	OUTPUT(dirLEDs_PORT, LED_RED);				// port C, pin 5 as output
  98:	3e 9a       	sbi	0x07, 6	; 7
	SET(LEDs_PORT, LED_RED);					// set it to HIGH
  9a:	46 9a       	sbi	0x08, 6	; 8
	CLEAR(LEDs_PORT, LED_WHITE);				// set it to LOW
  9c:	45 98       	cbi	0x08, 5	; 8
	INPUT(dirPUSHBUTTON_PORT, BUTTON_enter);	// set port C pin 4 as input
  9e:	3c 98       	cbi	0x07, 4	; 7
	SET(PUSHBUTTON_PORT, BUTTON_enter);         // set it to HIGH (not pressed)
  a0:	44 9a       	sbi	0x08, 4	; 8
	INPUT(dirPUSHBUTTON_PORT, BUTTON_up);		// set port C pin 4 as input
  a2:	3a 98       	cbi	0x07, 2	; 7
	SET(PUSHBUTTON_PORT, BUTTON_up);			// set it to HIGH (not pressed)
  a4:	42 9a       	sbi	0x08, 2	; 8
	INPUT(dirPUSHBUTTON_PORT, BUTTON_down);		// set port C pin 4 as input
  a6:	3b 98       	cbi	0x07, 3	; 7
	SET(PUSHBUTTON_PORT, BUTTON_down);          // set it to HIGH (not pressed)	
  a8:	43 9a       	sbi	0x08, 3	; 8
	
	// initialize USART
	UART0_Init (UART_BAUD, UART_DOUBLE_SPEED, UART_DATA_LENGTH, NO_PARITY);
  aa:	23 e0       	ldi	r18, 0x03	; 3
  ac:	48 e0       	ldi	r20, 0x08	; 8
  ae:	61 e0       	ldi	r22, 0x01	; 1
  b0:	80 e8       	ldi	r24, 0x80	; 128
  b2:	94 e0       	ldi	r25, 0x04	; 4
  b4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <UART0_Init>

		// no driven by interrupt
		
	serialGLCD_clear();
  b8:	0e 94 ce 00 	call	0x19c	; 0x19c <serialGLCD_clear>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	83 ed       	ldi	r24, 0xD3	; 211
  c0:	90 e3       	ldi	r25, 0x30	; 48
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x2c>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x36>
  cc:	00 00       	nop
int main(void)
{
    // initialize LEDs, Button
	int buttonPressed = 0;
	int buttonPressed_delay = 0;
	int buttonReleased_delay = 0;
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	50 e0       	ldi	r21, 0x00	; 0

int main(void)
{
    // initialize LEDs, Button
	int buttonPressed = 0;
	int buttonPressed_delay = 0;
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	30 e0       	ldi	r19, 0x00	; 0
unsigned char sampleData[] =		{'B', 'a', 's', 'i', ' ', 'M', 'a', 'm', 'a', 't', 'a'};	

int main(void)
{
    // initialize LEDs, Button
	int buttonPressed = 0;
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	70 e0       	ldi	r23, 0x00	; 0
			buttonPressed_delay = 0;
			buttonReleased_delay++;
			if (buttonReleased_delay > 16000)
			{
				buttonReleased_delay = 0;
				buttonPressed = 0;
  da:	f1 2c       	mov	r15, r1
  dc:	10 e0       	ldi	r17, 0x00	; 0
			if (buttonPressed_delay > 16000)
			{
				if (buttonPressed == 0)
				{
					buttonPressed = 1;
					TOGGLE(LEDs_PORT, LED_RED);
  de:	68 94       	set
  e0:	dd 24       	eor	r13, r13
  e2:	d6 f8       	bld	r13, 6
					TOGGLE(LEDs_PORT, LED_WHITE);
  e4:	68 94       	set
  e6:	ee 24       	eor	r14, r14
  e8:	e5 f8       	bld	r14, 5
			buttonReleased_delay = 0;
			if (buttonPressed_delay > 16000)
			{
				if (buttonPressed == 0)
				{
					buttonPressed = 1;
  ea:	bb 24       	eor	r11, r11
  ec:	b3 94       	inc	r11
  ee:	c1 2c       	mov	r12, r1
  f0:	0a c0       	rjmp	.+20     	; 0x106 <main+0x70>
    {
		// check button status, de-bouncing
		if (READ(readPUSHBUTTON, BUTTON_enter) == 0) 
		{
			buttonPressed_delay++;
			buttonReleased_delay = 0;
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	07 c0       	rjmp	.+14     	; 0x106 <main+0x70>
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	50 e0       	ldi	r21, 0x00	; 0
						serialGLCD_sendString("Test Display");
						serialGLCD_drawBox(0, (Ypos-1)*8, 127, (Ypos-1)*8+7, 0x01);
						_delay_ms(1000);
					}
				}
				buttonPressed_delay = 0;
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <main+0x70>
			}						
		} 
		else
		{
			buttonPressed_delay = 0;
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
	_delay_ms(1000);
	
    while (1) 
    {
		// check button status, de-bouncing
		if (READ(readPUSHBUTTON, BUTTON_enter) == 0) 
 106:	86 b1       	in	r24, 0x06	; 6
 108:	c8 2f       	mov	r28, r24
 10a:	c0 71       	andi	r28, 0x10	; 16
 10c:	84 fd       	sbrc	r24, 4
 10e:	38 c0       	rjmp	.+112    	; 0x180 <main+0xea>
		{
			buttonPressed_delay++;
 110:	2f 5f       	subi	r18, 0xFF	; 255
 112:	3f 4f       	sbci	r19, 0xFF	; 255
			buttonReleased_delay = 0;
			if (buttonPressed_delay > 16000)
 114:	21 38       	cpi	r18, 0x81	; 129
 116:	8e e3       	ldi	r24, 0x3E	; 62
 118:	38 07       	cpc	r19, r24
 11a:	5c f3       	brlt	.-42     	; 0xf2 <main+0x5c>
			{
				if (buttonPressed == 0)
 11c:	61 15       	cp	r22, r1
 11e:	71 05       	cpc	r23, r1
 120:	59 f7       	brne	.-42     	; 0xf8 <main+0x62>
				{
					buttonPressed = 1;
					TOGGLE(LEDs_PORT, LED_RED);
 122:	88 b1       	in	r24, 0x08	; 8
 124:	8d 25       	eor	r24, r13
 126:	88 b9       	out	0x08, r24	; 8
					TOGGLE(LEDs_PORT, LED_WHITE);
 128:	88 b1       	in	r24, 0x08	; 8
 12a:	8e 25       	eor	r24, r14
 12c:	88 b9       	out	0x08, r24	; 8
					serialGLCD_clear();
 12e:	0e 94 ce 00 	call	0x19c	; 0x19c <serialGLCD_clear>
						serialGLCD_sendString("Test Display");
						serialGLCD_drawBox(0, Ypos, 127, Ypos+8, 0x00);
						_delay_ms(1000);
					}
					*/	
					for (unsigned char Ypos = 1; Ypos < 9; Ypos++)
 132:	d1 e0       	ldi	r29, 0x01	; 1
					{
						serialGLCD_clear();
 134:	0e 94 ce 00 	call	0x19c	; 0x19c <serialGLCD_clear>
						//if (Ypos > 0) serialGLCD_drawBox(0, Ypos-8, 127, Ypos, 0x01);
						serialGLCD_goto21x8_XY(6, Ypos);
 138:	6d 2f       	mov	r22, r29
 13a:	86 e0       	ldi	r24, 0x06	; 6
 13c:	0e 94 20 01 	call	0x240	; 0x240 <serialGLCD_goto21x8_XY>
						serialGLCD_sendString("Test Display");
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <serialGLCD_sendString>
						serialGLCD_drawBox(0, (Ypos-1)*8, 127, (Ypos-1)*8+7, 0x01);
 148:	27 e0       	ldi	r18, 0x07	; 7
 14a:	2c 0f       	add	r18, r28
 14c:	01 e0       	ldi	r16, 0x01	; 1
 14e:	4f e7       	ldi	r20, 0x7F	; 127
 150:	6c 2f       	mov	r22, r28
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	0e 94 2d 01 	call	0x25a	; 0x25a <serialGLCD_drawBox>
 158:	9f ef       	ldi	r25, 0xFF	; 255
 15a:	23 ed       	ldi	r18, 0xD3	; 211
 15c:	80 e3       	ldi	r24, 0x30	; 48
 15e:	91 50       	subi	r25, 0x01	; 1
 160:	20 40       	sbci	r18, 0x00	; 0
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0xc8>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0xd2>
 168:	00 00       	nop
						serialGLCD_sendString("Test Display");
						serialGLCD_drawBox(0, Ypos, 127, Ypos+8, 0x00);
						_delay_ms(1000);
					}
					*/	
					for (unsigned char Ypos = 1; Ypos < 9; Ypos++)
 16a:	df 5f       	subi	r29, 0xFF	; 255
 16c:	c8 5f       	subi	r28, 0xF8	; 248
 16e:	d9 30       	cpi	r29, 0x09	; 9
 170:	09 f7       	brne	.-62     	; 0x134 <main+0x9e>
    {
		// check button status, de-bouncing
		if (READ(readPUSHBUTTON, BUTTON_enter) == 0) 
		{
			buttonPressed_delay++;
			buttonReleased_delay = 0;
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	50 e0       	ldi	r21, 0x00	; 0
						serialGLCD_sendString("Test Display");
						serialGLCD_drawBox(0, (Ypos-1)*8, 127, (Ypos-1)*8+7, 0x01);
						_delay_ms(1000);
					}
				}
				buttonPressed_delay = 0;
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	30 e0       	ldi	r19, 0x00	; 0
			buttonReleased_delay = 0;
			if (buttonPressed_delay > 16000)
			{
				if (buttonPressed == 0)
				{
					buttonPressed = 1;
 17a:	6b 2d       	mov	r22, r11
 17c:	7c 2d       	mov	r23, r12
 17e:	c3 cf       	rjmp	.-122    	; 0x106 <main+0x70>
			}						
		} 
		else
		{
			buttonPressed_delay = 0;
			buttonReleased_delay++;
 180:	4f 5f       	subi	r20, 0xFF	; 255
 182:	5f 4f       	sbci	r21, 0xFF	; 255
			if (buttonReleased_delay > 16000)
 184:	41 38       	cpi	r20, 0x81	; 129
 186:	9e e3       	ldi	r25, 0x3E	; 62
 188:	59 07       	cpc	r21, r25
 18a:	0c f4       	brge	.+2      	; 0x18e <main+0xf8>
 18c:	ba cf       	rjmp	.-140    	; 0x102 <main+0x6c>
			{
				buttonReleased_delay = 0;
 18e:	40 e0       	ldi	r20, 0x00	; 0
 190:	50 e0       	ldi	r21, 0x00	; 0
				buttonPressed_delay = 0;
			}						
		} 
		else
		{
			buttonPressed_delay = 0;
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e0       	ldi	r19, 0x00	; 0
			buttonReleased_delay++;
			if (buttonReleased_delay > 16000)
			{
				buttonReleased_delay = 0;
				buttonPressed = 0;
 196:	6f 2d       	mov	r22, r15
 198:	71 2f       	mov	r23, r17
 19a:	b5 cf       	rjmp	.-150    	; 0x106 <main+0x70>

0000019c <serialGLCD_clear>:
 */
void serialGLCD_sendChar(unsigned char myChar)
{
	wait_while_UART0_is_busy(); // check if the transmitter is busy
	UDR0 = myChar;
}
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <wait_while_UART0_is_busy>
 1a4:	c6 ec       	ldi	r28, 0xC6	; 198
 1a6:	d0 e0       	ldi	r29, 0x00	; 0
 1a8:	8c e7       	ldi	r24, 0x7C	; 124
 1aa:	88 83       	st	Y, r24
 1ac:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <wait_while_UART0_is_busy>
 1b0:	18 82       	st	Y, r1
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <serialGLCD_sendString>:
 * - Consider needed X, Y coordinates have been set before.
 * - First character of the string is being displayed at current X, Y position.
 *
 */
void serialGLCD_sendString(char *myString)
{
 1b8:	ef 92       	push	r14
 1ba:	ff 92       	push	r15
 1bc:	0f 93       	push	r16
 1be:	1f 93       	push	r17
 1c0:	cf 93       	push	r28
	while (*myString > 0)
 1c2:	fc 01       	movw	r30, r24
 1c4:	c0 81       	ld	r28, Z
 1c6:	cc 23       	and	r28, r28
 1c8:	89 f0       	breq	.+34     	; 0x1ec <serialGLCD_sendString+0x34>
 1ca:	8c 01       	movw	r16, r24
 1cc:	0f 5f       	subi	r16, 0xFF	; 255
 1ce:	1f 4f       	sbci	r17, 0xFF	; 255
 *
 */
void serialGLCD_sendChar(unsigned char myChar)
{
	wait_while_UART0_is_busy(); // check if the transmitter is busy
	UDR0 = myChar;
 1d0:	0f 2e       	mov	r0, r31
 1d2:	f6 ec       	ldi	r31, 0xC6	; 198
 1d4:	ef 2e       	mov	r14, r31
 1d6:	f1 2c       	mov	r15, r1
 1d8:	f0 2d       	mov	r31, r0
 * - Character is being displayed at current X, Y positon.
 *
 */
void serialGLCD_sendChar(unsigned char myChar)
{
	wait_while_UART0_is_busy(); // check if the transmitter is busy
 1da:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <wait_while_UART0_is_busy>
	UDR0 = myChar;
 1de:	f7 01       	movw	r30, r14
 1e0:	c0 83       	st	Z, r28
 * - First character of the string is being displayed at current X, Y position.
 *
 */
void serialGLCD_sendString(char *myString)
{
	while (*myString > 0)
 1e2:	f8 01       	movw	r30, r16
 1e4:	c1 91       	ld	r28, Z+
 1e6:	8f 01       	movw	r16, r30
 1e8:	c1 11       	cpse	r28, r1
 1ea:	f7 cf       	rjmp	.-18     	; 0x1da <serialGLCD_sendString+0x22>
	{
		serialGLCD_sendChar(*myString++);
	}
	
}
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	ff 90       	pop	r15
 1f4:	ef 90       	pop	r14
 1f6:	08 95       	ret

000001f8 <serialGLCD_gotoPixel_XY>:
 * If the offsets are within 6 pixels of the right edge of the screen or 8 pixels of the bottom, 
 * the text generator will revert to the next logical line for text so as to print a whole character and not parts.
 *
 */
void serialGLCD_gotoPixel_XY(unsigned char PixelX, unsigned char PixelY)
{
 1f8:	ff 92       	push	r15
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	f8 2e       	mov	r15, r24
 204:	06 2f       	mov	r16, r22
	// send X
	wait_while_UART0_is_busy(); // check if the transmitter is busy
 206:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <wait_while_UART0_is_busy>
	UDR0 = 0x7C;
 20a:	c6 ec       	ldi	r28, 0xC6	; 198
 20c:	d0 e0       	ldi	r29, 0x00	; 0
 20e:	1c e7       	ldi	r17, 0x7C	; 124
 210:	18 83       	st	Y, r17
	wait_while_UART0_is_busy(); // check if the transmitter is busy
 212:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <wait_while_UART0_is_busy>
	UDR0 = 0x18;
 216:	88 e1       	ldi	r24, 0x18	; 24
 218:	88 83       	st	Y, r24
	wait_while_UART0_is_busy(); // check if the transmitter is busy
 21a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <wait_while_UART0_is_busy>
	UDR0 = PixelX;
 21e:	f8 82       	st	Y, r15
	
	// send Y
	wait_while_UART0_is_busy(); // check if the transmitter is busy
 220:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <wait_while_UART0_is_busy>
	UDR0 = 0x7C;
 224:	18 83       	st	Y, r17
	wait_while_UART0_is_busy(); // check if the transmitter is busy
 226:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <wait_while_UART0_is_busy>
	UDR0 = 0x19;
 22a:	89 e1       	ldi	r24, 0x19	; 25
 22c:	88 83       	st	Y, r24
	wait_while_UART0_is_busy(); // check if the transmitter is busy
 22e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <wait_while_UART0_is_busy>
	UDR0 = PixelY;	
 232:	08 83       	st	Y, r16
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	ff 90       	pop	r15
 23e:	08 95       	ret

00000240 <serialGLCD_goto21x8_XY>:
	unsigned char pixelX = (refX - 1) * 6;
	// find pixel Y
	unsigned char pixelY = (refY - 1) * 8;
	
	// goto pixel X, Y
	serialGLCD_gotoPixel_XY(pixelX, pixelY);
 240:	66 0f       	add	r22, r22
 242:	66 0f       	add	r22, r22
 244:	66 0f       	add	r22, r22
 246:	68 50       	subi	r22, 0x08	; 8
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	98 2f       	mov	r25, r24
 24e:	99 0f       	add	r25, r25
 250:	89 0f       	add	r24, r25
 252:	88 0f       	add	r24, r24
 254:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <serialGLCD_gotoPixel_XY>
 258:	08 95       	ret

0000025a <serialGLCD_drawBox>:
 * If the offsets are within 6 pixels of the right edge of the screen or 8 pixels of the bottom, 
 * the text generator will revert to the next logical line for text so as to print a whole character and not parts.
 *
 */
void serialGLCD_drawBox(unsigned char TopLeftX, unsigned char TopLeftY, unsigned char BottomRightX, unsigned char BottomRightY, unsigned char draw)
{
 25a:	df 92       	push	r13
 25c:	ef 92       	push	r14
 25e:	ff 92       	push	r15
 260:	0f 93       	push	r16
 262:	1f 93       	push	r17
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	d8 2e       	mov	r13, r24
 26a:	e6 2e       	mov	r14, r22
 26c:	f4 2e       	mov	r15, r20
 26e:	12 2f       	mov	r17, r18
	// send X
	wait_while_UART0_is_busy(); // check if the transmitter is busy
 270:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <wait_while_UART0_is_busy>
	UDR0 = 0x7C;
 274:	c6 ec       	ldi	r28, 0xC6	; 198
 276:	d0 e0       	ldi	r29, 0x00	; 0
 278:	8c e7       	ldi	r24, 0x7C	; 124
 27a:	88 83       	st	Y, r24
	wait_while_UART0_is_busy(); // check if the transmitter is busy
 27c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <wait_while_UART0_is_busy>
	UDR0 = 0x0F;
 280:	8f e0       	ldi	r24, 0x0F	; 15
 282:	88 83       	st	Y, r24
	wait_while_UART0_is_busy(); // check if the transmitter is busy
 284:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <wait_while_UART0_is_busy>
	UDR0 = TopLeftX;
 288:	d8 82       	st	Y, r13
	wait_while_UART0_is_busy(); // check if the transmitter is busy
 28a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <wait_while_UART0_is_busy>
	UDR0 = TopLeftY;
 28e:	e8 82       	st	Y, r14
	wait_while_UART0_is_busy(); // check if the transmitter is busy
 290:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <wait_while_UART0_is_busy>
	UDR0 = BottomRightX;
 294:	f8 82       	st	Y, r15
	wait_while_UART0_is_busy(); // check if the transmitter is busy
 296:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <wait_while_UART0_is_busy>
	UDR0 = BottomRightY;
 29a:	18 83       	st	Y, r17
	wait_while_UART0_is_busy(); // check if the transmitter is busy
 29c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <wait_while_UART0_is_busy>
	UDR0 = draw;	
 2a0:	08 83       	st	Y, r16
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	ff 90       	pop	r15
 2ac:	ef 90       	pop	r14
 2ae:	df 90       	pop	r13
 2b0:	08 95       	ret

000002b2 <UART0_Init>:
 *	- Transmitter is enabled by setting the Transmit Enable (TXEN) bit in the UCSRnB Register
 *  - Receiver is enabled by setting the Receive Enable (RXEN) bit in the UCSRnB Register
 *
 */
void UART0_Init (uint16_t baud, char AsyncDoubleSpeed, char dataLength, char Parity, char stopbits)
{
 2b2:	cf 92       	push	r12
 2b4:	df 92       	push	r13
 2b6:	ef 92       	push	r14
 2b8:	ff 92       	push	r15
 2ba:	0f 93       	push	r16
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	6c 01       	movw	r12, r24
 2c2:	c4 2f       	mov	r28, r20
 2c4:	d2 2f       	mov	r29, r18
	char K = 1;
	if (AsyncDoubleSpeed == 1) 
 2c6:	61 30       	cpi	r22, 0x01	; 1
 2c8:	39 f4       	brne	.+14     	; 0x2d8 <UART0_Init+0x26>
	{
		K = 2;
		UCSR0A |= (1 << U2X0);
 2ca:	e0 ec       	ldi	r30, 0xC0	; 192
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	82 60       	ori	r24, 0x02	; 2
 2d2:	80 83       	st	Z, r24
void UART0_Init (uint16_t baud, char AsyncDoubleSpeed, char dataLength, char Parity, char stopbits)
{
	char K = 1;
	if (AsyncDoubleSpeed == 1) 
	{
		K = 2;
 2d4:	a2 e0       	ldi	r26, 0x02	; 2
 2d6:	01 c0       	rjmp	.+2      	; 0x2da <UART0_Init+0x28>
 *  - Receiver is enabled by setting the Receive Enable (RXEN) bit in the UCSRnB Register
 *
 */
void UART0_Init (uint16_t baud, char AsyncDoubleSpeed, char dataLength, char Parity, char stopbits)
{
	char K = 1;
 2d8:	a1 e0       	ldi	r26, 0x01	; 1
	{
		K = 2;
		UCSR0A |= (1 << U2X0);
	}
	//uint16_t UBRRvalue = 16; //lrint((K*F_CPU/16*100*baud) -1);
	uint16_t UBRRvalue = lrint((K*F_CPU/16/100/baud) -1);
 2da:	b0 e0       	ldi	r27, 0x00	; 0
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	34 e2       	ldi	r19, 0x24	; 36
 2e0:	44 ef       	ldi	r20, 0xF4	; 244
 2e2:	50 e0       	ldi	r21, 0x00	; 0
 2e4:	0e 94 a7 02 	call	0x54e	; 0x54e <__muluhisi3>
 2e8:	20 e4       	ldi	r18, 0x40	; 64
 2ea:	36 e0       	ldi	r19, 0x06	; 6
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	0e 94 85 02 	call	0x50a	; 0x50a <__udivmodsi4>
 2f4:	e1 2c       	mov	r14, r1
 2f6:	f1 2c       	mov	r15, r1
 2f8:	ca 01       	movw	r24, r20
 2fa:	b9 01       	movw	r22, r18
 2fc:	a7 01       	movw	r20, r14
 2fe:	96 01       	movw	r18, r12
 300:	0e 94 85 02 	call	0x50a	; 0x50a <__udivmodsi4>
 304:	ca 01       	movw	r24, r20
 306:	b9 01       	movw	r22, r18
 308:	61 50       	subi	r22, 0x01	; 1
 30a:	71 09       	sbc	r23, r1
 30c:	81 09       	sbc	r24, r1
 30e:	91 09       	sbc	r25, r1
 310:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__floatunsisf>
 314:	0e 94 1f 02 	call	0x43e	; 0x43e <lrint>
	UBRR0H = (unsigned char) (UBRRvalue >> 8);
 318:	27 2f       	mov	r18, r23
 31a:	33 27       	eor	r19, r19
 31c:	20 93 c5 00 	sts	0x00C5, r18	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char) (UBRRvalue);
 320:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	// setting frame format, 8bit, no parity, 1 stop
	if (Parity == PARITY_EVEN)	UCSR0C |= (1 << UPM01); // set parity for EVEN
 324:	d1 11       	cpse	r29, r1
 326:	06 c0       	rjmp	.+12     	; 0x334 <UART0_Init+0x82>
 328:	e2 ec       	ldi	r30, 0xC2	; 194
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	80 62       	ori	r24, 0x20	; 32
 330:	80 83       	st	Z, r24
 332:	07 c0       	rjmp	.+14     	; 0x342 <UART0_Init+0x90>
	if (Parity == PARITY_ODD)	UCSR0C |= (3 << UPM00); // set parity for ODD
 334:	d1 30       	cpi	r29, 0x01	; 1
 336:	29 f4       	brne	.+10     	; 0x342 <UART0_Init+0x90>
 338:	e2 ec       	ldi	r30, 0xC2	; 194
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	80 63       	ori	r24, 0x30	; 48
 340:	80 83       	st	Z, r24
	
	// frame format used by the USART is set by the UCSZn2:0, UPMn1:0 and USBSn bits in UCSRnB and UCSRnC
	if (stopbits == 1) UCSR0C &= ~(1 << USBS0);		// 1 stop bit, this is default. We need to clear if it was previously set
 342:	01 30       	cpi	r16, 0x01	; 1
 344:	31 f4       	brne	.+12     	; 0x352 <UART0_Init+0xa0>
 346:	e2 ec       	ldi	r30, 0xC2	; 194
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	87 7f       	andi	r24, 0xF7	; 247
 34e:	80 83       	st	Z, r24
 350:	07 c0       	rjmp	.+14     	; 0x360 <UART0_Init+0xae>
	if (stopbits == 2) UCSR0C |= (1 << USBS0);		// 2 stop bits
 352:	02 30       	cpi	r16, 0x02	; 2
 354:	29 f4       	brne	.+10     	; 0x360 <UART0_Init+0xae>
 356:	e2 ec       	ldi	r30, 0xC2	; 194
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	88 60       	ori	r24, 0x08	; 8
 35e:	80 83       	st	Z, r24
	
	if (dataLength == 6) UCSR0C |= (1 << UCSZ00);	// 6 bits UART data length
 360:	c6 30       	cpi	r28, 0x06	; 6
 362:	31 f4       	brne	.+12     	; 0x370 <UART0_Init+0xbe>
 364:	e2 ec       	ldi	r30, 0xC2	; 194
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	82 60       	ori	r24, 0x02	; 2
 36c:	80 83       	st	Z, r24
 36e:	10 c0       	rjmp	.+32     	; 0x390 <UART0_Init+0xde>
	if (dataLength == 7) UCSR0C |= (2 << UCSZ00);	// 7 bits UART data length
 370:	c7 30       	cpi	r28, 0x07	; 7
 372:	31 f4       	brne	.+12     	; 0x380 <UART0_Init+0xce>
 374:	e2 ec       	ldi	r30, 0xC2	; 194
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	84 60       	ori	r24, 0x04	; 4
 37c:	80 83       	st	Z, r24
 37e:	0f c0       	rjmp	.+30     	; 0x39e <UART0_Init+0xec>
	if (dataLength == 8) UCSR0C |= (3 << UCSZ00);	// 8 bits UART data length
 380:	c8 30       	cpi	r28, 0x08	; 8
 382:	31 f4       	brne	.+12     	; 0x390 <UART0_Init+0xde>
 384:	e2 ec       	ldi	r30, 0xC2	; 194
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	86 60       	ori	r24, 0x06	; 6
 38c:	80 83       	st	Z, r24
 38e:	07 c0       	rjmp	.+14     	; 0x39e <UART0_Init+0xec>
	if (dataLength == 9) UCSR0C |= (7 << UCSZ00);	// 9 bits UART data length
 390:	c9 30       	cpi	r28, 0x09	; 9
 392:	29 f4       	brne	.+10     	; 0x39e <UART0_Init+0xec>
 394:	e2 ec       	ldi	r30, 0xC2	; 194
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	8e 60       	ori	r24, 0x0E	; 14
 39c:	80 83       	st	Z, r24
		
	// Enable transmit or/and receive operation
	// Transmitter is enabled by setting the Transmit Enable (TXEN) bit in the UCSRnB Register
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0);
 39e:	e1 ec       	ldi	r30, 0xC1	; 193
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	88 61       	ori	r24, 0x18	; 24
 3a6:	80 83       	st	Z, r24
}
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	0f 91       	pop	r16
 3ae:	ff 90       	pop	r15
 3b0:	ef 90       	pop	r14
 3b2:	df 90       	pop	r13
 3b4:	cf 90       	pop	r12
 3b6:	08 95       	ret

000003b8 <wait_while_UART0_is_busy>:
 * One should use this each time before loading the transmit buffer UDRn with new data.
 *
 */
void wait_while_UART0_is_busy()
{
	while (!(UCSR0A & (1 << UDRE0))); // check if the transmitter is busy
 3b8:	e0 ec       	ldi	r30, 0xC0	; 192
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	85 ff       	sbrs	r24, 5
 3c0:	fd cf       	rjmp	.-6      	; 0x3bc <wait_while_UART0_is_busy+0x4>
}
 3c2:	08 95       	ret

000003c4 <__floatunsisf>:
 3c4:	e8 94       	clt
 3c6:	09 c0       	rjmp	.+18     	; 0x3da <__floatsisf+0x12>

000003c8 <__floatsisf>:
 3c8:	97 fb       	bst	r25, 7
 3ca:	3e f4       	brtc	.+14     	; 0x3da <__floatsisf+0x12>
 3cc:	90 95       	com	r25
 3ce:	80 95       	com	r24
 3d0:	70 95       	com	r23
 3d2:	61 95       	neg	r22
 3d4:	7f 4f       	sbci	r23, 0xFF	; 255
 3d6:	8f 4f       	sbci	r24, 0xFF	; 255
 3d8:	9f 4f       	sbci	r25, 0xFF	; 255
 3da:	99 23       	and	r25, r25
 3dc:	a9 f0       	breq	.+42     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3de:	f9 2f       	mov	r31, r25
 3e0:	96 e9       	ldi	r25, 0x96	; 150
 3e2:	bb 27       	eor	r27, r27
 3e4:	93 95       	inc	r25
 3e6:	f6 95       	lsr	r31
 3e8:	87 95       	ror	r24
 3ea:	77 95       	ror	r23
 3ec:	67 95       	ror	r22
 3ee:	b7 95       	ror	r27
 3f0:	f1 11       	cpse	r31, r1
 3f2:	f8 cf       	rjmp	.-16     	; 0x3e4 <__floatsisf+0x1c>
 3f4:	fa f4       	brpl	.+62     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3f6:	bb 0f       	add	r27, r27
 3f8:	11 f4       	brne	.+4      	; 0x3fe <__floatsisf+0x36>
 3fa:	60 ff       	sbrs	r22, 0
 3fc:	1b c0       	rjmp	.+54     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3fe:	6f 5f       	subi	r22, 0xFF	; 255
 400:	7f 4f       	sbci	r23, 0xFF	; 255
 402:	8f 4f       	sbci	r24, 0xFF	; 255
 404:	9f 4f       	sbci	r25, 0xFF	; 255
 406:	16 c0       	rjmp	.+44     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 408:	88 23       	and	r24, r24
 40a:	11 f0       	breq	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40c:	96 e9       	ldi	r25, 0x96	; 150
 40e:	11 c0       	rjmp	.+34     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 410:	77 23       	and	r23, r23
 412:	21 f0       	breq	.+8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 414:	9e e8       	ldi	r25, 0x8E	; 142
 416:	87 2f       	mov	r24, r23
 418:	76 2f       	mov	r23, r22
 41a:	05 c0       	rjmp	.+10     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 41c:	66 23       	and	r22, r22
 41e:	71 f0       	breq	.+28     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 420:	96 e8       	ldi	r25, 0x86	; 134
 422:	86 2f       	mov	r24, r22
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	2a f0       	brmi	.+10     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 42a:	9a 95       	dec	r25
 42c:	66 0f       	add	r22, r22
 42e:	77 1f       	adc	r23, r23
 430:	88 1f       	adc	r24, r24
 432:	da f7       	brpl	.-10     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 434:	88 0f       	add	r24, r24
 436:	96 95       	lsr	r25
 438:	87 95       	ror	r24
 43a:	97 f9       	bld	r25, 7
 43c:	08 95       	ret

0000043e <lrint>:
 43e:	0e 94 64 02 	call	0x4c8	; 0x4c8 <__fp_splitA>
 442:	a8 f1       	brcs	.+106    	; 0x4ae <lrint+0x70>
 444:	9e 57       	subi	r25, 0x7E	; 126
 446:	b0 f1       	brcs	.+108    	; 0x4b4 <lrint+0x76>
 448:	98 51       	subi	r25, 0x18	; 24
 44a:	60 f0       	brcs	.+24     	; 0x464 <lrint+0x26>
 44c:	39 f1       	breq	.+78     	; 0x49c <lrint+0x5e>
 44e:	98 30       	cpi	r25, 0x08	; 8
 450:	70 f5       	brcc	.+92     	; 0x4ae <lrint+0x70>
 452:	09 2e       	mov	r0, r25
 454:	99 27       	eor	r25, r25
 456:	66 0f       	add	r22, r22
 458:	77 1f       	adc	r23, r23
 45a:	88 1f       	adc	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	0a 94       	dec	r0
 460:	d1 f7       	brne	.-12     	; 0x456 <lrint+0x18>
 462:	1c c0       	rjmp	.+56     	; 0x49c <lrint+0x5e>
 464:	bb 27       	eor	r27, r27
 466:	99 3f       	cpi	r25, 0xF9	; 249
 468:	4c f4       	brge	.+18     	; 0x47c <lrint+0x3e>
 46a:	b1 11       	cpse	r27, r1
 46c:	b1 e0       	ldi	r27, 0x01	; 1
 46e:	b6 2b       	or	r27, r22
 470:	67 2f       	mov	r22, r23
 472:	78 2f       	mov	r23, r24
 474:	88 27       	eor	r24, r24
 476:	98 5f       	subi	r25, 0xF8	; 248
 478:	b1 f7       	brne	.-20     	; 0x466 <lrint+0x28>
 47a:	08 c0       	rjmp	.+16     	; 0x48c <lrint+0x4e>
 47c:	86 95       	lsr	r24
 47e:	77 95       	ror	r23
 480:	67 95       	ror	r22
 482:	b7 95       	ror	r27
 484:	08 f4       	brcc	.+2      	; 0x488 <lrint+0x4a>
 486:	b1 60       	ori	r27, 0x01	; 1
 488:	93 95       	inc	r25
 48a:	c1 f7       	brne	.-16     	; 0x47c <lrint+0x3e>
 48c:	bb 0f       	add	r27, r27
 48e:	30 f4       	brcc	.+12     	; 0x49c <lrint+0x5e>
 490:	11 f4       	brne	.+4      	; 0x496 <lrint+0x58>
 492:	60 ff       	sbrs	r22, 0
 494:	03 c0       	rjmp	.+6      	; 0x49c <lrint+0x5e>
 496:	6f 5f       	subi	r22, 0xFF	; 255
 498:	7f 4f       	sbci	r23, 0xFF	; 255
 49a:	8f 4f       	sbci	r24, 0xFF	; 255
 49c:	3e f4       	brtc	.+14     	; 0x4ac <lrint+0x6e>
 49e:	90 95       	com	r25
 4a0:	80 95       	com	r24
 4a2:	70 95       	com	r23
 4a4:	61 95       	neg	r22
 4a6:	7f 4f       	sbci	r23, 0xFF	; 255
 4a8:	8f 4f       	sbci	r24, 0xFF	; 255
 4aa:	9f 4f       	sbci	r25, 0xFF	; 255
 4ac:	08 95       	ret
 4ae:	68 94       	set
 4b0:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__fp_szero>
 4b4:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__fp_zero>

000004b8 <__fp_split3>:
 4b8:	57 fd       	sbrc	r21, 7
 4ba:	90 58       	subi	r25, 0x80	; 128
 4bc:	44 0f       	add	r20, r20
 4be:	55 1f       	adc	r21, r21
 4c0:	59 f0       	breq	.+22     	; 0x4d8 <__fp_splitA+0x10>
 4c2:	5f 3f       	cpi	r21, 0xFF	; 255
 4c4:	71 f0       	breq	.+28     	; 0x4e2 <__fp_splitA+0x1a>
 4c6:	47 95       	ror	r20

000004c8 <__fp_splitA>:
 4c8:	88 0f       	add	r24, r24
 4ca:	97 fb       	bst	r25, 7
 4cc:	99 1f       	adc	r25, r25
 4ce:	61 f0       	breq	.+24     	; 0x4e8 <__fp_splitA+0x20>
 4d0:	9f 3f       	cpi	r25, 0xFF	; 255
 4d2:	79 f0       	breq	.+30     	; 0x4f2 <__fp_splitA+0x2a>
 4d4:	87 95       	ror	r24
 4d6:	08 95       	ret
 4d8:	12 16       	cp	r1, r18
 4da:	13 06       	cpc	r1, r19
 4dc:	14 06       	cpc	r1, r20
 4de:	55 1f       	adc	r21, r21
 4e0:	f2 cf       	rjmp	.-28     	; 0x4c6 <__fp_split3+0xe>
 4e2:	46 95       	lsr	r20
 4e4:	f1 df       	rcall	.-30     	; 0x4c8 <__fp_splitA>
 4e6:	08 c0       	rjmp	.+16     	; 0x4f8 <__fp_splitA+0x30>
 4e8:	16 16       	cp	r1, r22
 4ea:	17 06       	cpc	r1, r23
 4ec:	18 06       	cpc	r1, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	f1 cf       	rjmp	.-30     	; 0x4d4 <__fp_splitA+0xc>
 4f2:	86 95       	lsr	r24
 4f4:	71 05       	cpc	r23, r1
 4f6:	61 05       	cpc	r22, r1
 4f8:	08 94       	sec
 4fa:	08 95       	ret

000004fc <__fp_zero>:
 4fc:	e8 94       	clt

000004fe <__fp_szero>:
 4fe:	bb 27       	eor	r27, r27
 500:	66 27       	eor	r22, r22
 502:	77 27       	eor	r23, r23
 504:	cb 01       	movw	r24, r22
 506:	97 f9       	bld	r25, 7
 508:	08 95       	ret

0000050a <__udivmodsi4>:
 50a:	a1 e2       	ldi	r26, 0x21	; 33
 50c:	1a 2e       	mov	r1, r26
 50e:	aa 1b       	sub	r26, r26
 510:	bb 1b       	sub	r27, r27
 512:	fd 01       	movw	r30, r26
 514:	0d c0       	rjmp	.+26     	; 0x530 <__udivmodsi4_ep>

00000516 <__udivmodsi4_loop>:
 516:	aa 1f       	adc	r26, r26
 518:	bb 1f       	adc	r27, r27
 51a:	ee 1f       	adc	r30, r30
 51c:	ff 1f       	adc	r31, r31
 51e:	a2 17       	cp	r26, r18
 520:	b3 07       	cpc	r27, r19
 522:	e4 07       	cpc	r30, r20
 524:	f5 07       	cpc	r31, r21
 526:	20 f0       	brcs	.+8      	; 0x530 <__udivmodsi4_ep>
 528:	a2 1b       	sub	r26, r18
 52a:	b3 0b       	sbc	r27, r19
 52c:	e4 0b       	sbc	r30, r20
 52e:	f5 0b       	sbc	r31, r21

00000530 <__udivmodsi4_ep>:
 530:	66 1f       	adc	r22, r22
 532:	77 1f       	adc	r23, r23
 534:	88 1f       	adc	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	1a 94       	dec	r1
 53a:	69 f7       	brne	.-38     	; 0x516 <__udivmodsi4_loop>
 53c:	60 95       	com	r22
 53e:	70 95       	com	r23
 540:	80 95       	com	r24
 542:	90 95       	com	r25
 544:	9b 01       	movw	r18, r22
 546:	ac 01       	movw	r20, r24
 548:	bd 01       	movw	r22, r26
 54a:	cf 01       	movw	r24, r30
 54c:	08 95       	ret

0000054e <__muluhisi3>:
 54e:	0e 94 b2 02 	call	0x564	; 0x564 <__umulhisi3>
 552:	a5 9f       	mul	r26, r21
 554:	90 0d       	add	r25, r0
 556:	b4 9f       	mul	r27, r20
 558:	90 0d       	add	r25, r0
 55a:	a4 9f       	mul	r26, r20
 55c:	80 0d       	add	r24, r0
 55e:	91 1d       	adc	r25, r1
 560:	11 24       	eor	r1, r1
 562:	08 95       	ret

00000564 <__umulhisi3>:
 564:	a2 9f       	mul	r26, r18
 566:	b0 01       	movw	r22, r0
 568:	b3 9f       	mul	r27, r19
 56a:	c0 01       	movw	r24, r0
 56c:	a3 9f       	mul	r26, r19
 56e:	70 0d       	add	r23, r0
 570:	81 1d       	adc	r24, r1
 572:	11 24       	eor	r1, r1
 574:	91 1d       	adc	r25, r1
 576:	b2 9f       	mul	r27, r18
 578:	70 0d       	add	r23, r0
 57a:	81 1d       	adc	r24, r1
 57c:	11 24       	eor	r1, r1
 57e:	91 1d       	adc	r25, r1
 580:	08 95       	ret

00000582 <_exit>:
 582:	f8 94       	cli

00000584 <__stop_program>:
 584:	ff cf       	rjmp	.-2      	; 0x584 <__stop_program>
