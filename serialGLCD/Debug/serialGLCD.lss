
serialGLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000176  00800100  00001bee  00001c82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  00800276  00800276  00001df8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001df8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00001e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dd5  00000000  00000000  00001fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c91  00000000  00000000  00003d79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f51  00000000  00000000  00004a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  0000595c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008be  00000000  00000000  00005c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012bb  00000000  00000000  0000651e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000077d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2332>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	ee ee       	ldi	r30, 0xEE	; 238
     17e:	fb e1       	ldi	r31, 0x1B	; 27
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a6 37       	cpi	r26, 0x76	; 118
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	22 e0       	ldi	r18, 0x02	; 2
     18e:	a6 e7       	ldi	r26, 0x76	; 118
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a2 3a       	cpi	r26, 0xA2	; 162
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 2e 03 	call	0x65c	; 0x65c <main>
     1a0:	0c 94 f5 0d 	jmp	0x1bea	; 0x1bea <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <serialGLCD_writeMenuString>:
 * @param add_line if 1 (or just > 1) then complete the row with character given in add_char. If add_line =0 the row would not be completed till the end.
 * @param add_char character to be used to complete the row after the menu string if add_line >=1.
 *
 */
void serialGLCD_writeMenuString (unsigned char refX, unsigned char refY, const char *lcd_menu_items, unsigned char add_line, char add_char) 
{
     1a8:	af 92       	push	r10
     1aa:	bf 92       	push	r11
     1ac:	cf 92       	push	r12
     1ae:	df 92       	push	r13
     1b0:	ef 92       	push	r14
     1b2:	ff 92       	push	r15
     1b4:	0f 93       	push	r16
     1b6:	1f 93       	push	r17
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	b8 2e       	mov	r11, r24
     1be:	6a 01       	movw	r12, r20
     1c0:	a2 2e       	mov	r10, r18
	unsigned char lcd_i;
	unsigned char lcd_offset = 0;
	// find pixel X
	unsigned char pixelX = (refX) * 6;
     1c2:	98 2f       	mov	r25, r24
     1c4:	99 0f       	add	r25, r25
     1c6:	98 0f       	add	r25, r24
	// find pixel Y
	unsigned char pixelY = (refY) * 8;
     1c8:	66 0f       	add	r22, r22
     1ca:	66 0f       	add	r22, r22
     1cc:	66 0f       	add	r22, r22
	// check the range
	if (pixelX > INITIAL_pixel_MAXX) pixelX = 0;
     1ce:	89 2f       	mov	r24, r25
     1d0:	88 0f       	add	r24, r24
     1d2:	96 fd       	sbrc	r25, 6
     1d4:	80 e0       	ldi	r24, 0x00	; 0
	if (pixelY > INITIAL_pixel_MAXY) pixelY = 0;
     1d6:	60 34       	cpi	r22, 0x40	; 64
     1d8:	08 f0       	brcs	.+2      	; 0x1dc <serialGLCD_writeMenuString+0x34>
     1da:	60 e0       	ldi	r22, 0x00	; 0
	
	serialGLCD_gotoPixel_XY(pixelX, pixelY);
     1dc:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <serialGLCD_gotoPixel_XY>
	
	lcd_offset = strlen(lcd_menu_items);
     1e0:	f6 01       	movw	r30, r12
     1e2:	01 90       	ld	r0, Z+
     1e4:	00 20       	and	r0, r0
     1e6:	e9 f7       	brne	.-6      	; 0x1e2 <serialGLCD_writeMenuString+0x3a>
     1e8:	31 97       	sbiw	r30, 0x01	; 1
     1ea:	1e 2f       	mov	r17, r30
     1ec:	1c 19       	sub	r17, r12
     1ee:	16 31       	cpi	r17, 0x16	; 22
     1f0:	08 f0       	brcs	.+2      	; 0x1f4 <serialGLCD_writeMenuString+0x4c>
     1f2:	15 e1       	ldi	r17, 0x15	; 21
	
	if (lcd_offset > INITIAL_MAXX) lcd_offset = INITIAL_MAXX;
	for (lcd_i = lcd_offset; lcd_i; lcd_i--)
     1f4:	11 23       	and	r17, r17
     1f6:	81 f0       	breq	.+32     	; 0x218 <serialGLCD_writeMenuString+0x70>
     1f8:	e6 01       	movw	r28, r12
     1fa:	8f ef       	ldi	r24, 0xFF	; 255
     1fc:	81 0f       	add	r24, r17
     1fe:	e8 2e       	mov	r14, r24
     200:	f1 2c       	mov	r15, r1
     202:	8f ef       	ldi	r24, 0xFF	; 255
     204:	e8 1a       	sub	r14, r24
     206:	f8 0a       	sbc	r15, r24
     208:	ec 0c       	add	r14, r12
     20a:	fd 1c       	adc	r15, r13
	{
		serialGLCD_sendChar(*lcd_menu_items++);
     20c:	89 91       	ld	r24, Y+
     20e:	0e 94 cb 06 	call	0xd96	; 0xd96 <serialGLCD_sendChar>
	serialGLCD_gotoPixel_XY(pixelX, pixelY);
	
	lcd_offset = strlen(lcd_menu_items);
	
	if (lcd_offset > INITIAL_MAXX) lcd_offset = INITIAL_MAXX;
	for (lcd_i = lcd_offset; lcd_i; lcd_i--)
     212:	ce 15       	cp	r28, r14
     214:	df 05       	cpc	r29, r15
     216:	d1 f7       	brne	.-12     	; 0x20c <serialGLCD_writeMenuString+0x64>
	{
		serialGLCD_sendChar(*lcd_menu_items++);
	}
	if (add_line)
     218:	aa 20       	and	r10, r10
     21a:	49 f0       	breq	.+18     	; 0x22e <serialGLCD_writeMenuString+0x86>
	{
		for (lcd_i = INITIAL_MAXX - lcd_offset - refX; lcd_i; lcd_i--) 
     21c:	c5 e1       	ldi	r28, 0x15	; 21
     21e:	cb 19       	sub	r28, r11
     220:	c1 1b       	sub	r28, r17
     222:	29 f0       	breq	.+10     	; 0x22e <serialGLCD_writeMenuString+0x86>
		{
			serialGLCD_sendChar(add_char);
     224:	80 2f       	mov	r24, r16
     226:	0e 94 cb 06 	call	0xd96	; 0xd96 <serialGLCD_sendChar>
	{
		serialGLCD_sendChar(*lcd_menu_items++);
	}
	if (add_line)
	{
		for (lcd_i = INITIAL_MAXX - lcd_offset - refX; lcd_i; lcd_i--) 
     22a:	c1 50       	subi	r28, 0x01	; 1
     22c:	d9 f7       	brne	.-10     	; 0x224 <serialGLCD_writeMenuString+0x7c>
		{
			serialGLCD_sendChar(add_char);
		}
	}
}
     22e:	df 91       	pop	r29
     230:	cf 91       	pop	r28
     232:	1f 91       	pop	r17
     234:	0f 91       	pop	r16
     236:	ff 90       	pop	r15
     238:	ef 90       	pop	r14
     23a:	df 90       	pop	r13
     23c:	cf 90       	pop	r12
     23e:	bf 90       	pop	r11
     240:	af 90       	pop	r10
     242:	08 95       	ret

00000244 <show_menu>:
 *     - ensure correct range depends of the usage of 'VISIBLE_MENU_HEADER' and upper and lower spaces
 *     - show the menu items listed in between 'from' and 'till', show selection marks and control scrolling depending of the valid range
 * 
 */
void show_menu(void)
{
     244:	7f 92       	push	r7
     246:	8f 92       	push	r8
     248:	9f 92       	push	r9
     24a:	af 92       	push	r10
     24c:	bf 92       	push	r11
     24e:	cf 92       	push	r12
     250:	df 92       	push	r13
     252:	ef 92       	push	r14
     254:	ff 92       	push	r15
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
     262:	65 97       	sbiw	r28, 0x15	; 21
     264:	0f b6       	in	r0, 0x3f	; 63
     266:	f8 94       	cli
     268:	de bf       	out	0x3e, r29	; 62
     26a:	0f be       	out	0x3f, r0	; 63
     26c:	cd bf       	out	0x3d, r28	; 61
	unsigned char varUpper_space = UPPER_SPACE;
	static unsigned char enClear = 1;
	char buffer[21];
	
	// define from and till spec for the menu
	if (my_menu[selected].num_menupoints < DISPLAY_ROWS) 
     26e:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <selected>
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	ee 0f       	add	r30, r30
     276:	ff 1f       	adc	r31, r31
     278:	ee 0f       	add	r30, r30
     27a:	ff 1f       	adc	r31, r31
     27c:	ee 0f       	add	r30, r30
     27e:	ff 1f       	adc	r31, r31
     280:	e2 5f       	subi	r30, 0xF2	; 242
     282:	fe 4f       	sbci	r31, 0xFE	; 254
     284:	82 80       	ldd	r8, Z+2	; 0x02
     286:	87 e0       	ldi	r24, 0x07	; 7
     288:	88 15       	cp	r24, r8
     28a:	70 f0       	brcs	.+28     	; 0x2a8 <show_menu+0x64>
	{
		varDisplay_rows = my_menu[selected].num_menupoints;
		varUpper_space = varDisplay_rows - 2;
     28c:	0e ef       	ldi	r16, 0xFE	; 254
     28e:	08 0d       	add	r16, r8
		if (enClear)
     290:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     294:	88 23       	and	r24, r24
     296:	21 f0       	breq	.+8      	; 0x2a0 <show_menu+0x5c>
		{
			serialGLCD_clear();
     298:	0e 94 b5 06 	call	0xd6a	; 0xd6a <serialGLCD_clear>
			enClear = 0;
     29c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		}
	} else {
		enClear = 1;
	}
	while (till <= selected)
     2a0:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <selected>
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	08 c0       	rjmp	.+16     	; 0x2b8 <show_menu+0x74>
		{
			serialGLCD_clear();
			enClear = 0;
		}
	} else {
		enClear = 1;
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	unsigned char line_cnt = 0;
	unsigned char from = 0;		// from which row of menu points
	unsigned char till = 0;		// till which row of menu points
	unsigned char temp = 0;
	unsigned char varDisplay_rows = DISPLAY_ROWS;
	unsigned char varUpper_space = UPPER_SPACE;
     2ae:	06 e0       	ldi	r16, 0x06	; 6
{
	unsigned char line_cnt = 0;
	unsigned char from = 0;		// from which row of menu points
	unsigned char till = 0;		// till which row of menu points
	unsigned char temp = 0;
	unsigned char varDisplay_rows = DISPLAY_ROWS;
     2b0:	68 94       	set
     2b2:	88 24       	eor	r8, r8
     2b4:	83 f8       	bld	r8, 3
     2b6:	f4 cf       	rjmp	.-24     	; 0x2a0 <show_menu+0x5c>
	} else {
		enClear = 1;
	}
	while (till <= selected)
	{
		till += my_menu[till].num_menupoints;
     2b8:	e8 2f       	mov	r30, r24
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	ee 0f       	add	r30, r30
     2be:	ff 1f       	adc	r31, r31
     2c0:	ee 0f       	add	r30, r30
     2c2:	ff 1f       	adc	r31, r31
     2c4:	ee 0f       	add	r30, r30
     2c6:	ff 1f       	adc	r31, r31
     2c8:	e2 5f       	subi	r30, 0xF2	; 242
     2ca:	fe 4f       	sbci	r31, 0xFE	; 254
     2cc:	92 81       	ldd	r25, Z+2	; 0x02
     2ce:	89 0f       	add	r24, r25
			enClear = 0;
		}
	} else {
		enClear = 1;
	}
	while (till <= selected)
     2d0:	28 17       	cp	r18, r24
     2d2:	90 f7       	brcc	.-28     	; 0x2b8 <show_menu+0x74>
	{
		till += my_menu[till].num_menupoints;
	}
	from = till - my_menu[selected].num_menupoints;
     2d4:	42 2f       	mov	r20, r18
     2d6:	50 e0       	ldi	r21, 0x00	; 0
     2d8:	fa 01       	movw	r30, r20
     2da:	ee 0f       	add	r30, r30
     2dc:	ff 1f       	adc	r31, r31
     2de:	ee 0f       	add	r30, r30
     2e0:	ff 1f       	adc	r31, r31
     2e2:	ee 0f       	add	r30, r30
     2e4:	ff 1f       	adc	r31, r31
     2e6:	e2 5f       	subi	r30, 0xF2	; 242
     2e8:	fe 4f       	sbci	r31, 0xFE	; 254
     2ea:	92 81       	ldd	r25, Z+2	; 0x02
     2ec:	18 2f       	mov	r17, r24
     2ee:	19 1b       	sub	r17, r25
	temp = from;
	till--;
	
	if ((selected >= (from +varUpper_space)) && (selected <= (till - LOWER_SPACE))) 
     2f0:	61 2f       	mov	r22, r17
     2f2:	70 e0       	ldi	r23, 0x00	; 0
     2f4:	fb 01       	movw	r30, r22
     2f6:	e0 0f       	add	r30, r16
     2f8:	f1 1d       	adc	r31, r1
     2fa:	4e 17       	cp	r20, r30
     2fc:	5f 07       	cpc	r21, r31
     2fe:	0c f4       	brge	.+2      	; 0x302 <show_menu+0xbe>
     300:	85 c0       	rjmp	.+266    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
	{
		till += my_menu[till].num_menupoints;
	}
	from = till - my_menu[selected].num_menupoints;
	temp = from;
	till--;
     302:	1f ef       	ldi	r17, 0xFF	; 255
     304:	18 0f       	add	r17, r24
	
	if ((selected >= (from +varUpper_space)) && (selected <= (till - LOWER_SPACE))) 
     306:	81 2f       	mov	r24, r17
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	01 97       	sbiw	r24, 0x01	; 1
     30c:	84 17       	cp	r24, r20
     30e:	95 07       	cpc	r25, r21
     310:	0c f4       	brge	.+2      	; 0x314 <show_menu+0xd0>
     312:	f6 c0       	rjmp	.+492    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
	{
		from = selected - varUpper_space;
     314:	12 2f       	mov	r17, r18
     316:	10 1b       	sub	r17, r16
		till = from + (varDisplay_rows - 1);
     318:	8a 94       	dec	r8
     31a:	98 2c       	mov	r9, r8
     31c:	91 0e       	add	r9, r17
		if (VISIBLE_MENU_HEADER) 
		{
			serialGLCD_writeMenuString(0, 0, my_menu[temp].text, 1, ' ');
     31e:	66 0f       	add	r22, r22
     320:	77 1f       	adc	r23, r23
     322:	66 0f       	add	r22, r22
     324:	77 1f       	adc	r23, r23
     326:	66 0f       	add	r22, r22
     328:	77 1f       	adc	r23, r23
     32a:	fb 01       	movw	r30, r22
     32c:	e2 5f       	subi	r30, 0xF2	; 242
     32e:	fe 4f       	sbci	r31, 0xFE	; 254
     330:	40 81       	ld	r20, Z
     332:	51 81       	ldd	r21, Z+1	; 0x01
     334:	00 e2       	ldi	r16, 0x20	; 32
     336:	21 e0       	ldi	r18, 0x01	; 1
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <serialGLCD_writeMenuString>
			line_cnt = 1;
			from ++;
     340:	1f 5f       	subi	r17, 0xFF	; 255
		}
		for (from; from <= till; from++) 
     342:	91 16       	cp	r9, r17
     344:	08 f4       	brcc	.+2      	; 0x348 <show_menu+0x104>
     346:	57 c1       	rjmp	.+686    	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
     348:	68 94       	set
     34a:	88 24       	eor	r8, r8
     34c:	81 f8       	bld	r8, 1
			{
				sprintf(buffer, ">%s", my_menu[from].text);
				serialGLCD_writeMenuString(0, line_cnt, buffer, 1, SELECTION_CHAR_END);
				line_cnt++;	
			} else {
				sprintf(buffer, " %s", my_menu[from].text);
     34e:	0f 2e       	mov	r0, r31
     350:	fa e0       	ldi	r31, 0x0A	; 10
     352:	cf 2e       	mov	r12, r31
     354:	f1 e0       	ldi	r31, 0x01	; 1
     356:	df 2e       	mov	r13, r31
     358:	f0 2d       	mov	r31, r0
     35a:	ce 01       	movw	r24, r28
     35c:	01 96       	adiw	r24, 0x01	; 1
     35e:	7c 01       	movw	r14, r24
		}
		for (from; from <= till; from++) 
		{
			if (from == selected) 
			{
				sprintf(buffer, ">%s", my_menu[from].text);
     360:	0f 2e       	mov	r0, r31
     362:	f6 e0       	ldi	r31, 0x06	; 6
     364:	af 2e       	mov	r10, r31
     366:	f1 e0       	ldi	r31, 0x01	; 1
     368:	bf 2e       	mov	r11, r31
     36a:	f0 2d       	mov	r31, r0
     36c:	77 24       	eor	r7, r7
     36e:	7a 94       	dec	r7
     370:	78 0c       	add	r7, r8
			line_cnt = 1;
			from ++;
		}
		for (from; from <= till; from++) 
		{
			if (from == selected) 
     372:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <selected>
     376:	81 13       	cpse	r24, r17
     378:	22 c0       	rjmp	.+68     	; 0x3be <show_menu+0x17a>
			{
				sprintf(buffer, ">%s", my_menu[from].text);
     37a:	e1 2f       	mov	r30, r17
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	ee 0f       	add	r30, r30
     380:	ff 1f       	adc	r31, r31
     382:	ee 0f       	add	r30, r30
     384:	ff 1f       	adc	r31, r31
     386:	ee 0f       	add	r30, r30
     388:	ff 1f       	adc	r31, r31
     38a:	e2 5f       	subi	r30, 0xF2	; 242
     38c:	fe 4f       	sbci	r31, 0xFE	; 254
     38e:	81 81       	ldd	r24, Z+1	; 0x01
     390:	8f 93       	push	r24
     392:	80 81       	ld	r24, Z
     394:	8f 93       	push	r24
     396:	bf 92       	push	r11
     398:	af 92       	push	r10
     39a:	ff 92       	push	r15
     39c:	ef 92       	push	r14
     39e:	0e 94 75 0d 	call	0x1aea	; 0x1aea <sprintf>
				serialGLCD_writeMenuString(0, line_cnt, buffer, 1, SELECTION_CHAR_END);
     3a2:	0c e3       	ldi	r16, 0x3C	; 60
     3a4:	21 e0       	ldi	r18, 0x01	; 1
     3a6:	a7 01       	movw	r20, r14
     3a8:	67 2d       	mov	r22, r7
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <serialGLCD_writeMenuString>
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	0f 90       	pop	r0
     3bc:	21 c0       	rjmp	.+66     	; 0x400 <__LOCK_REGION_LENGTH__>
				line_cnt++;	
			} else {
				sprintf(buffer, " %s", my_menu[from].text);
     3be:	e1 2f       	mov	r30, r17
     3c0:	f0 e0       	ldi	r31, 0x00	; 0
     3c2:	ee 0f       	add	r30, r30
     3c4:	ff 1f       	adc	r31, r31
     3c6:	ee 0f       	add	r30, r30
     3c8:	ff 1f       	adc	r31, r31
     3ca:	ee 0f       	add	r30, r30
     3cc:	ff 1f       	adc	r31, r31
     3ce:	e2 5f       	subi	r30, 0xF2	; 242
     3d0:	fe 4f       	sbci	r31, 0xFE	; 254
     3d2:	81 81       	ldd	r24, Z+1	; 0x01
     3d4:	8f 93       	push	r24
     3d6:	80 81       	ld	r24, Z
     3d8:	8f 93       	push	r24
     3da:	df 92       	push	r13
     3dc:	cf 92       	push	r12
     3de:	ff 92       	push	r15
     3e0:	ef 92       	push	r14
     3e2:	0e 94 75 0d 	call	0x1aea	; 0x1aea <sprintf>
				serialGLCD_writeMenuString(0, line_cnt, buffer, 1, ' ');
     3e6:	00 e2       	ldi	r16, 0x20	; 32
     3e8:	21 e0       	ldi	r18, 0x01	; 1
     3ea:	a7 01       	movw	r20, r14
     3ec:	67 2d       	mov	r22, r7
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <serialGLCD_writeMenuString>
     3f4:	0f 90       	pop	r0
     3f6:	0f 90       	pop	r0
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
		{
			serialGLCD_writeMenuString(0, 0, my_menu[temp].text, 1, ' ');
			line_cnt = 1;
			from ++;
		}
		for (from; from <= till; from++) 
     400:	1f 5f       	subi	r17, 0xFF	; 255
     402:	83 94       	inc	r8
     404:	91 16       	cp	r9, r17
     406:	08 f0       	brcs	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     408:	b1 cf       	rjmp	.-158    	; 0x36c <show_menu+0x128>
     40a:	f5 c0       	rjmp	.+490    	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
			}
		}
	} else {
		if (selected < (from +varUpper_space)) 
		{
			till = from + (varDisplay_rows - 1);
     40c:	8a 94       	dec	r8
     40e:	81 0e       	add	r8, r17
			for (from; from <= till; from++) 
     410:	81 16       	cp	r8, r17
     412:	08 f4       	brcc	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     414:	f0 c0       	rjmp	.+480    	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
     416:	91 2c       	mov	r9, r1
					{
					// if this is the header line - don't add ' ' at the beginning	
						serialGLCD_writeMenuString(0, line_cnt, my_menu[from].text, 1, ' ');
						line_cnt++;
					} else {
						sprintf(buffer, " %s", my_menu[from].text);
     418:	0f 2e       	mov	r0, r31
     41a:	fa e0       	ldi	r31, 0x0A	; 10
     41c:	cf 2e       	mov	r12, r31
     41e:	f1 e0       	ldi	r31, 0x01	; 1
     420:	df 2e       	mov	r13, r31
     422:	f0 2d       	mov	r31, r0
     424:	ce 01       	movw	r24, r28
     426:	01 96       	adiw	r24, 0x01	; 1
     428:	7c 01       	movw	r14, r24
			till = from + (varDisplay_rows - 1);
			for (from; from <= till; from++) 
			{
				if (from == selected) 
				{
					sprintf(buffer, ">%s", my_menu[from].text);
     42a:	0f 2e       	mov	r0, r31
     42c:	f6 e0       	ldi	r31, 0x06	; 6
     42e:	af 2e       	mov	r10, r31
     430:	f1 e0       	ldi	r31, 0x01	; 1
     432:	bf 2e       	mov	r11, r31
     434:	f0 2d       	mov	r31, r0
		if (selected < (from +varUpper_space)) 
		{
			till = from + (varDisplay_rows - 1);
			for (from; from <= till; from++) 
			{
				if (from == selected) 
     436:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <selected>
     43a:	81 13       	cpse	r24, r17
     43c:	23 c0       	rjmp	.+70     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
				{
					sprintf(buffer, ">%s", my_menu[from].text);
     43e:	e1 2f       	mov	r30, r17
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	ee 0f       	add	r30, r30
     444:	ff 1f       	adc	r31, r31
     446:	ee 0f       	add	r30, r30
     448:	ff 1f       	adc	r31, r31
     44a:	ee 0f       	add	r30, r30
     44c:	ff 1f       	adc	r31, r31
     44e:	e2 5f       	subi	r30, 0xF2	; 242
     450:	fe 4f       	sbci	r31, 0xFE	; 254
     452:	81 81       	ldd	r24, Z+1	; 0x01
     454:	8f 93       	push	r24
     456:	80 81       	ld	r24, Z
     458:	8f 93       	push	r24
     45a:	bf 92       	push	r11
     45c:	af 92       	push	r10
     45e:	ff 92       	push	r15
     460:	ef 92       	push	r14
     462:	0e 94 75 0d 	call	0x1aea	; 0x1aea <sprintf>
					serialGLCD_writeMenuString(0, line_cnt, buffer, 1, SELECTION_CHAR_END);
     466:	0c e3       	ldi	r16, 0x3C	; 60
     468:	21 e0       	ldi	r18, 0x01	; 1
     46a:	a7 01       	movw	r20, r14
     46c:	69 2d       	mov	r22, r9
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <serialGLCD_writeMenuString>
					line_cnt++;					
     474:	93 94       	inc	r9
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	39 c0       	rjmp	.+114    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
				} else {
					if ((VISIBLE_MENU_HEADER) && (line_cnt == 0))
     484:	91 10       	cpse	r9, r1
     486:	15 c0       	rjmp	.+42     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
					{
					// if this is the header line - don't add ' ' at the beginning	
						serialGLCD_writeMenuString(0, line_cnt, my_menu[from].text, 1, ' ');
     488:	e1 2f       	mov	r30, r17
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	ee 0f       	add	r30, r30
     48e:	ff 1f       	adc	r31, r31
     490:	ee 0f       	add	r30, r30
     492:	ff 1f       	adc	r31, r31
     494:	ee 0f       	add	r30, r30
     496:	ff 1f       	adc	r31, r31
     498:	e2 5f       	subi	r30, 0xF2	; 242
     49a:	fe 4f       	sbci	r31, 0xFE	; 254
     49c:	40 81       	ld	r20, Z
     49e:	51 81       	ldd	r21, Z+1	; 0x01
     4a0:	00 e2       	ldi	r16, 0x20	; 32
     4a2:	21 e0       	ldi	r18, 0x01	; 1
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <serialGLCD_writeMenuString>
						line_cnt++;
     4ac:	99 24       	eor	r9, r9
     4ae:	93 94       	inc	r9
     4b0:	22 c0       	rjmp	.+68     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
					} else {
						sprintf(buffer, " %s", my_menu[from].text);
     4b2:	e1 2f       	mov	r30, r17
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	ee 0f       	add	r30, r30
     4b8:	ff 1f       	adc	r31, r31
     4ba:	ee 0f       	add	r30, r30
     4bc:	ff 1f       	adc	r31, r31
     4be:	ee 0f       	add	r30, r30
     4c0:	ff 1f       	adc	r31, r31
     4c2:	e2 5f       	subi	r30, 0xF2	; 242
     4c4:	fe 4f       	sbci	r31, 0xFE	; 254
     4c6:	81 81       	ldd	r24, Z+1	; 0x01
     4c8:	8f 93       	push	r24
     4ca:	80 81       	ld	r24, Z
     4cc:	8f 93       	push	r24
     4ce:	df 92       	push	r13
     4d0:	cf 92       	push	r12
     4d2:	ff 92       	push	r15
     4d4:	ef 92       	push	r14
     4d6:	0e 94 75 0d 	call	0x1aea	; 0x1aea <sprintf>
						serialGLCD_writeMenuString(0, line_cnt, buffer, 1, ' ');
     4da:	00 e2       	ldi	r16, 0x20	; 32
     4dc:	21 e0       	ldi	r18, 0x01	; 1
     4de:	a7 01       	movw	r20, r14
     4e0:	69 2d       	mov	r22, r9
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <serialGLCD_writeMenuString>
						line_cnt++;
     4e8:	93 94       	inc	r9
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
		}
	} else {
		if (selected < (from +varUpper_space)) 
		{
			till = from + (varDisplay_rows - 1);
			for (from; from <= till; from++) 
     4f6:	1f 5f       	subi	r17, 0xFF	; 255
     4f8:	81 16       	cp	r8, r17
     4fa:	08 f0       	brcs	.+2      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     4fc:	9c cf       	rjmp	.-200    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     4fe:	7b c0       	rjmp	.+246    	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
						line_cnt++;
					}
				}
			}
		} else {
			if (selected == till)
     500:	12 13       	cpse	r17, r18
     502:	79 c0       	rjmp	.+242    	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
			{
				from = till - (varDisplay_rows - 1);
				if (VISIBLE_MENU_HEADER) 
				{
					serialGLCD_writeMenuString(0, 0, my_menu[temp].text, 1, ' '); 
     504:	66 0f       	add	r22, r22
     506:	77 1f       	adc	r23, r23
     508:	66 0f       	add	r22, r22
     50a:	77 1f       	adc	r23, r23
     50c:	66 0f       	add	r22, r22
     50e:	77 1f       	adc	r23, r23
     510:	fb 01       	movw	r30, r22
     512:	e2 5f       	subi	r30, 0xF2	; 242
     514:	fe 4f       	sbci	r31, 0xFE	; 254
     516:	40 81       	ld	r20, Z
     518:	51 81       	ldd	r21, Z+1	; 0x01
     51a:	00 e2       	ldi	r16, 0x20	; 32
     51c:	21 e0       	ldi	r18, 0x01	; 1
     51e:	60 e0       	ldi	r22, 0x00	; 0
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <serialGLCD_writeMenuString>
					line_cnt = 1; 
					from ++;
     526:	f1 2e       	mov	r15, r17
     528:	f8 18       	sub	r15, r8
     52a:	f3 94       	inc	r15
     52c:	f3 94       	inc	r15
				}
				for (from; from <= till; from++) 
     52e:	1f 15       	cp	r17, r15
     530:	08 f4       	brcc	.+2      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
     532:	61 c0       	rjmp	.+194    	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
     534:	68 94       	set
     536:	ee 24       	eor	r14, r14
     538:	e1 f8       	bld	r14, 1
					{
						sprintf(buffer, ">%s", my_menu[from].text);
						serialGLCD_writeMenuString(0, line_cnt, buffer, 1, SELECTION_CHAR_END);
						line_cnt++;				
					} else {
						sprintf(buffer, " %s", my_menu[from].text);
     53a:	0f 2e       	mov	r0, r31
     53c:	fa e0       	ldi	r31, 0x0A	; 10
     53e:	af 2e       	mov	r10, r31
     540:	f1 e0       	ldi	r31, 0x01	; 1
     542:	bf 2e       	mov	r11, r31
     544:	f0 2d       	mov	r31, r0
     546:	ce 01       	movw	r24, r28
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	6c 01       	movw	r12, r24
				}
				for (from; from <= till; from++) 
				{
					if (from == selected) 
					{
						sprintf(buffer, ">%s", my_menu[from].text);
     54c:	0f 2e       	mov	r0, r31
     54e:	f6 e0       	ldi	r31, 0x06	; 6
     550:	8f 2e       	mov	r8, r31
     552:	f1 e0       	ldi	r31, 0x01	; 1
     554:	9f 2e       	mov	r9, r31
     556:	f0 2d       	mov	r31, r0
     558:	77 24       	eor	r7, r7
     55a:	7a 94       	dec	r7
     55c:	7e 0c       	add	r7, r14
					line_cnt = 1; 
					from ++;
				}
				for (from; from <= till; from++) 
				{
					if (from == selected) 
     55e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <selected>
     562:	8f 11       	cpse	r24, r15
     564:	22 c0       	rjmp	.+68     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
					{
						sprintf(buffer, ">%s", my_menu[from].text);
     566:	ef 2d       	mov	r30, r15
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	ee 0f       	add	r30, r30
     56c:	ff 1f       	adc	r31, r31
     56e:	ee 0f       	add	r30, r30
     570:	ff 1f       	adc	r31, r31
     572:	ee 0f       	add	r30, r30
     574:	ff 1f       	adc	r31, r31
     576:	e2 5f       	subi	r30, 0xF2	; 242
     578:	fe 4f       	sbci	r31, 0xFE	; 254
     57a:	81 81       	ldd	r24, Z+1	; 0x01
     57c:	8f 93       	push	r24
     57e:	80 81       	ld	r24, Z
     580:	8f 93       	push	r24
     582:	9f 92       	push	r9
     584:	8f 92       	push	r8
     586:	df 92       	push	r13
     588:	cf 92       	push	r12
     58a:	0e 94 75 0d 	call	0x1aea	; 0x1aea <sprintf>
						serialGLCD_writeMenuString(0, line_cnt, buffer, 1, SELECTION_CHAR_END);
     58e:	0c e3       	ldi	r16, 0x3C	; 60
     590:	21 e0       	ldi	r18, 0x01	; 1
     592:	a6 01       	movw	r20, r12
     594:	67 2d       	mov	r22, r7
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <serialGLCD_writeMenuString>
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	21 c0       	rjmp	.+66     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
						line_cnt++;				
					} else {
						sprintf(buffer, " %s", my_menu[from].text);
     5aa:	ef 2d       	mov	r30, r15
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	ee 0f       	add	r30, r30
     5b0:	ff 1f       	adc	r31, r31
     5b2:	ee 0f       	add	r30, r30
     5b4:	ff 1f       	adc	r31, r31
     5b6:	ee 0f       	add	r30, r30
     5b8:	ff 1f       	adc	r31, r31
     5ba:	e2 5f       	subi	r30, 0xF2	; 242
     5bc:	fe 4f       	sbci	r31, 0xFE	; 254
     5be:	81 81       	ldd	r24, Z+1	; 0x01
     5c0:	8f 93       	push	r24
     5c2:	80 81       	ld	r24, Z
     5c4:	8f 93       	push	r24
     5c6:	bf 92       	push	r11
     5c8:	af 92       	push	r10
     5ca:	df 92       	push	r13
     5cc:	cf 92       	push	r12
     5ce:	0e 94 75 0d 	call	0x1aea	; 0x1aea <sprintf>
						serialGLCD_writeMenuString(0, line_cnt, buffer, 1, ' ');
     5d2:	00 e2       	ldi	r16, 0x20	; 32
     5d4:	21 e0       	ldi	r18, 0x01	; 1
     5d6:	a6 01       	movw	r20, r12
     5d8:	67 2d       	mov	r22, r7
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <serialGLCD_writeMenuString>
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
				{
					serialGLCD_writeMenuString(0, 0, my_menu[temp].text, 1, ' '); 
					line_cnt = 1; 
					from ++;
				}
				for (from; from <= till; from++) 
     5ec:	f3 94       	inc	r15
     5ee:	e3 94       	inc	r14
     5f0:	1f 15       	cp	r17, r15
     5f2:	08 f0       	brcs	.+2      	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
     5f4:	b1 cf       	rjmp	.-158    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
					}
				}
			}
		}
	}
     5f6:	65 96       	adiw	r28, 0x15	; 21
     5f8:	0f b6       	in	r0, 0x3f	; 63
     5fa:	f8 94       	cli
     5fc:	de bf       	out	0x3e, r29	; 62
     5fe:	0f be       	out	0x3f, r0	; 63
     600:	cd bf       	out	0x3d, r28	; 61
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	1f 91       	pop	r17
     608:	0f 91       	pop	r16
     60a:	ff 90       	pop	r15
     60c:	ef 90       	pop	r14
     60e:	df 90       	pop	r13
     610:	cf 90       	pop	r12
     612:	bf 90       	pop	r11
     614:	af 90       	pop	r10
     616:	9f 90       	pop	r9
     618:	8f 90       	pop	r8
     61a:	7f 90       	pop	r7
     61c:	08 95       	ret

0000061e <start>:
 * Consider UART was initialized and enabled if LCD operation.
 *
 */
void start (void)
{
	serialGLCD_clear();
     61e:	0e 94 b5 06 	call	0xd6a	; 0xd6a <serialGLCD_clear>
	serialGLCD_goto21x8_XY(1, 3);
     622:	63 e0       	ldi	r22, 0x03	; 3
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	0e 94 1c 07 	call	0xe38	; 0xe38 <serialGLCD_goto21x8_XY>
	serialGLCD_sendString("Serial GLCD trials");
     62a:	80 e5       	ldi	r24, 0x50	; 80
     62c:	92 e0       	ldi	r25, 0x02	; 2
     62e:	0e 94 d4 06 	call	0xda8	; 0xda8 <serialGLCD_sendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     632:	2f ef       	ldi	r18, 0xFF	; 255
     634:	87 ea       	ldi	r24, 0xA7	; 167
     636:	91 e6       	ldi	r25, 0x61	; 97
     638:	21 50       	subi	r18, 0x01	; 1
     63a:	80 40       	sbci	r24, 0x00	; 0
     63c:	90 40       	sbci	r25, 0x00	; 0
     63e:	e1 f7       	brne	.-8      	; 0x638 <start+0x1a>
     640:	00 c0       	rjmp	.+0      	; 0x642 <start+0x24>
     642:	00 00       	nop
	_delay_ms(2000);
	selected = 1;
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <selected>
	serialGLCD_clear();
     64a:	0e 94 b5 06 	call	0xd6a	; 0xd6a <serialGLCD_clear>
     64e:	8f e3       	ldi	r24, 0x3F	; 63
     650:	9f e1       	ldi	r25, 0x1F	; 31
     652:	01 97       	sbiw	r24, 0x01	; 1
     654:	f1 f7       	brne	.-4      	; 0x652 <start+0x34>
     656:	00 c0       	rjmp	.+0      	; 0x658 <start+0x3a>
     658:	00 00       	nop
     65a:	08 95       	ret

0000065c <main>:
 *
 */
int main(void)
{
	// initialize first menu item after the menu header/title from main menu
	selected = 1;		
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <selected>
	
	// MCUs ports initializations
	OUTPUT(myLed_dirPort, myLed);				// port C, pin 5 as output (red LED)
     662:	3d 9a       	sbi	0x07, 5	; 7
	CLEAR(myLed_dataPort, myLed);					// set it to LOW (LED is OFF)
     664:	45 98       	cbi	0x08, 5	; 8
	INPUT(buttonEnter_dirPort, buttonEnter);	// set port C data direction register pin 4 as input (button "enter")
     666:	3c 98       	cbi	0x07, 4	; 7
	SET(buttonEnter_dataPort, buttonEnter);         // set its latch to HIGH (not pressed)
     668:	44 9a       	sbi	0x08, 4	; 8
	INPUT(buttonEnter_dirPort, buttonUp);		// set port C data direction register pin 4 as input (button "up")
     66a:	3a 98       	cbi	0x07, 2	; 7
	SET(buttonEnter_dataPort, buttonUp);			// set its latch to HIGH (not pressed)
     66c:	42 9a       	sbi	0x08, 2	; 8
	INPUT(buttonEnter_dirPort, buttonDown);		// set port C data direction register pin 4 as input (button "down")
     66e:	3b 98       	cbi	0x07, 3	; 7
	SET(buttonEnter_dataPort, buttonDown);          // set its latch to HIGH (not pressed)	
     670:	43 9a       	sbi	0x08, 3	; 8
	INPUT(buttonEnter_dirPort, rotaryData);		// set port C data direction register pin 1 as input (ROTARY DATA)
     672:	39 98       	cbi	0x07, 1	; 7
	SET(buttonEnter_dataPort, rotaryData);			// set its latch to HIGH (not pressed)	
     674:	41 9a       	sbi	0x08, 1	; 8
	INPUT(buttonEnter_dirPort, rotatyCLK);		// set port C data direction register pin 0 as input (ROTARY CLOCK)
     676:	38 98       	cbi	0x07, 0	; 7
	SET(buttonEnter_dataPort, rotatyCLK);			// set its latch to HIGH (not pressed)	
     678:	40 9a       	sbi	0x08, 0	; 8

	// USART Initialization in asynchronous mode, 8bits, 1 stop bit, no parity, 1115200kb baud rate                                                                
	UART0_Init (UART_BAUD, UART_DOUBLE_SPEED, UART_DATA_LENGTH, NO_PARITY);
     67a:	23 e0       	ldi	r18, 0x03	; 3
     67c:	48 e0       	ldi	r20, 0x08	; 8
     67e:	61 e0       	ldi	r22, 0x01	; 1
     680:	80 e8       	ldi	r24, 0x80	; 128
     682:	94 e0       	ldi	r25, 0x04	; 4
     684:	0e 94 26 07 	call	0xe4c	; 0xe4c <UART0_Init>

	debounceDelayInit();
     688:	0e 94 d3 05 	call	0xba6	; 0xba6 <debounceDelayInit>
	
	serialGLCD_clear();
     68c:	0e 94 b5 06 	call	0xd6a	; 0xd6a <serialGLCD_clear>
     690:	2f ef       	ldi	r18, 0xFF	; 255
     692:	87 ea       	ldi	r24, 0xA7	; 167
     694:	91 e6       	ldi	r25, 0x61	; 97
     696:	21 50       	subi	r18, 0x01	; 1
     698:	80 40       	sbci	r24, 0x00	; 0
     69a:	90 40       	sbci	r25, 0x00	; 0
     69c:	e1 f7       	brne	.-8      	; 0x696 <main+0x3a>
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <main+0x44>
     6a0:	00 00       	nop
	_delay_ms(2000);
	start();
     6a2:	0e 94 0f 03 	call	0x61e	; 0x61e <start>
		{
			show_menu();
			update_menu = 0;
			
			// update lastStateROTARY_CK due to delay introduced by show_menu()
			rotary_delay = ROTARY_DELAY;
     6a6:	c8 e2       	ldi	r28, 0x28	; 40
     6a8:	d0 e0       	ldi	r29, 0x00	; 0
			selected  = my_menu[selected].up;
			update_menu = 1;
		} 
		else if  (checkButton_withMode(whilePressed, buttonDown_pinPort, buttonDown, DEBOUNCE_DELAY)) 
		{
			TOGGLE(myLed_dataPort, myLed);
     6aa:	68 94       	set
     6ac:	ff 24       	eor	r15, r15
     6ae:	f5 f8       	bld	r15, 5
		{
			show_menu();
			update_menu = 0;
			
			// update lastStateROTARY_CK due to delay introduced by show_menu()
			rotary_delay = ROTARY_DELAY;
     6b0:	0c 2f       	mov	r16, r28
     6b2:	1d 2f       	mov	r17, r29
	start();

	// infinite loop - show menu and polling external events (buttons, encoder) respectively
    while (1) 
    {
		if (update_menu == 1)
     6b4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <update_menu>
     6b8:	81 30       	cpi	r24, 0x01	; 1
     6ba:	89 f5       	brne	.+98     	; 0x71e <main+0xc2>
		{
			show_menu();
     6bc:	0e 94 22 01 	call	0x244	; 0x244 <show_menu>
			update_menu = 0;
     6c0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <update_menu>
			
			// update lastStateROTARY_CK due to delay introduced by show_menu()
			rotary_delay = ROTARY_DELAY;
     6c4:	00 93 03 01 	sts	0x0103, r16	; 0x800103 <rotary_delay>
     6c8:	10 93 04 01 	sts	0x0104, r17	; 0x800104 <rotary_delay+0x1>
			temp = 0;
     6cc:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <temp>
			while (rotary_delay)
			{
				lastStateROTARY_CK = read_PINx_digital_level(rotatyCLK_pinPort, rotatyCLK);
     6d0:	86 b1       	in	r24, 0x06	; 6
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 cb 05 	call	0xb96	; 0xb96 <read_PINx_digital_level>
     6d8:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <lastStateROTARY_CK>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6dc:	8f e8       	ldi	r24, 0x8F	; 143
     6de:	91 e0       	ldi	r25, 0x01	; 1
     6e0:	01 97       	sbiw	r24, 0x01	; 1
     6e2:	f1 f7       	brne	.-4      	; 0x6e0 <main+0x84>
     6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <main+0x8a>
     6e6:	00 00       	nop
				_delay_us(100);
				temp = read_PINx_digital_level(rotatyCLK_pinPort, rotatyCLK);
     6e8:	86 b1       	in	r24, 0x06	; 6
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	0e 94 cb 05 	call	0xb96	; 0xb96 <read_PINx_digital_level>
     6f0:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <temp>
				
				if (temp == lastStateROTARY_CK)
     6f4:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <lastStateROTARY_CK>
     6f8:	89 13       	cpse	r24, r25
     6fa:	0c c0       	rjmp	.+24     	; 0x714 <main+0xb8>
				{
					rotary_delay --;
     6fc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rotary_delay>
     700:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <rotary_delay+0x1>
     704:	01 97       	sbiw	r24, 0x01	; 1
     706:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <rotary_delay+0x1>
     70a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <rotary_delay>
			update_menu = 0;
			
			// update lastStateROTARY_CK due to delay introduced by show_menu()
			rotary_delay = ROTARY_DELAY;
			temp = 0;
			while (rotary_delay)
     70e:	89 2b       	or	r24, r25
     710:	f9 f6       	brne	.-66     	; 0x6d0 <main+0x74>
     712:	05 c0       	rjmp	.+10     	; 0x71e <main+0xc2>
				
				if (temp == lastStateROTARY_CK)
				{
					rotary_delay --;
				} else {
					rotary_delay = ROTARY_DELAY;
     714:	00 93 03 01 	sts	0x0103, r16	; 0x800103 <rotary_delay>
     718:	10 93 04 01 	sts	0x0104, r17	; 0x800104 <rotary_delay+0x1>
     71c:	d9 cf       	rjmp	.-78     	; 0x6d0 <main+0x74>
				}
			}				
		}
		
		// check button status with debouncing
		if (checkButton_withMode(onClick, buttonEnter_pinPort, buttonEnter, DEBOUNCE_DELAY))
     71e:	66 b1       	in	r22, 0x06	; 6
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	44 e0       	ldi	r20, 0x04	; 4
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <checkButton_withMode>
     72c:	88 23       	and	r24, r24
     72e:	21 f1       	breq	.+72     	; 0x778 <main+0x11c>
		{
			TOGGLE(myLed_dataPort, myLed);
     730:	88 81       	ld	r24, Y
     732:	8f 25       	eor	r24, r15
     734:	88 83       	st	Y, r24
			update_menu = 1;
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <update_menu>
			selected  = my_menu[selected].enter;
     73c:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <selected>
     740:	f0 e0       	ldi	r31, 0x00	; 0
     742:	ee 0f       	add	r30, r30
     744:	ff 1f       	adc	r31, r31
     746:	ee 0f       	add	r30, r30
     748:	ff 1f       	adc	r31, r31
     74a:	ee 0f       	add	r30, r30
     74c:	ff 1f       	adc	r31, r31
     74e:	e2 5f       	subi	r30, 0xF2	; 242
     750:	fe 4f       	sbci	r31, 0xFE	; 254
     752:	e5 81       	ldd	r30, Z+5	; 0x05
     754:	e0 93 01 01 	sts	0x0101, r30	; 0x800101 <selected>
			if (my_menu[selected].fp != 0) my_menu[selected].fp();						
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	ee 0f       	add	r30, r30
     75c:	ff 1f       	adc	r31, r31
     75e:	ee 0f       	add	r30, r30
     760:	ff 1f       	adc	r31, r31
     762:	ee 0f       	add	r30, r30
     764:	ff 1f       	adc	r31, r31
     766:	e2 5f       	subi	r30, 0xF2	; 242
     768:	fe 4f       	sbci	r31, 0xFE	; 254
     76a:	06 80       	ldd	r0, Z+6	; 0x06
     76c:	f7 81       	ldd	r31, Z+7	; 0x07
     76e:	e0 2d       	mov	r30, r0
     770:	30 97       	sbiw	r30, 0x00	; 0
     772:	e9 f1       	breq	.+122    	; 0x7ee <main+0x192>
     774:	09 95       	icall
     776:	3b c0       	rjmp	.+118    	; 0x7ee <main+0x192>
		} // 'enter' button is the same also for rotary 'push' switch 

		else if  (checkButton_withMode(whilePressed, buttonUp_pinPort, buttonUp, DEBOUNCE_DELAY)) 
     778:	66 b1       	in	r22, 0x06	; 6
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	42 e0       	ldi	r20, 0x02	; 2
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <checkButton_withMode>
     786:	88 23       	and	r24, r24
     788:	a9 f0       	breq	.+42     	; 0x7b4 <main+0x158>
		{
			TOGGLE(myLed_dataPort, myLed);
     78a:	88 81       	ld	r24, Y
     78c:	8f 25       	eor	r24, r15
     78e:	88 83       	st	Y, r24
			selected  = my_menu[selected].up;
     790:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <selected>
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	ee 0f       	add	r30, r30
     798:	ff 1f       	adc	r31, r31
     79a:	ee 0f       	add	r30, r30
     79c:	ff 1f       	adc	r31, r31
     79e:	ee 0f       	add	r30, r30
     7a0:	ff 1f       	adc	r31, r31
     7a2:	e2 5f       	subi	r30, 0xF2	; 242
     7a4:	fe 4f       	sbci	r31, 0xFE	; 254
     7a6:	83 81       	ldd	r24, Z+3	; 0x03
     7a8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <selected>
			update_menu = 1;
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <update_menu>
     7b2:	1d c0       	rjmp	.+58     	; 0x7ee <main+0x192>
		} 
		else if  (checkButton_withMode(whilePressed, buttonDown_pinPort, buttonDown, DEBOUNCE_DELAY)) 
     7b4:	66 b1       	in	r22, 0x06	; 6
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	43 e0       	ldi	r20, 0x03	; 3
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <checkButton_withMode>
     7c2:	88 23       	and	r24, r24
     7c4:	a1 f0       	breq	.+40     	; 0x7ee <main+0x192>
		{
			TOGGLE(myLed_dataPort, myLed);
     7c6:	88 81       	ld	r24, Y
     7c8:	8f 25       	eor	r24, r15
     7ca:	88 83       	st	Y, r24
			selected  = my_menu[selected].down;
     7cc:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <selected>
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	ee 0f       	add	r30, r30
     7d4:	ff 1f       	adc	r31, r31
     7d6:	ee 0f       	add	r30, r30
     7d8:	ff 1f       	adc	r31, r31
     7da:	ee 0f       	add	r30, r30
     7dc:	ff 1f       	adc	r31, r31
     7de:	e2 5f       	subi	r30, 0xF2	; 242
     7e0:	fe 4f       	sbci	r31, 0xFE	; 254
     7e2:	84 81       	ldd	r24, Z+4	; 0x04
     7e4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <selected>
			update_menu = 1;	
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <update_menu>
		} 
		// check rotary encoder
		rotary_delay = ROTARY_DELAY;
     7ee:	00 93 03 01 	sts	0x0103, r16	; 0x800103 <rotary_delay>
     7f2:	10 93 04 01 	sts	0x0104, r17	; 0x800104 <rotary_delay+0x1>
		temp = 0;
     7f6:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <temp>
		while (rotary_delay)
		{			
			currentStateROTARY_CK = read_PINx_digital_level(rotatyCLK_pinPort, rotatyCLK);
     7fa:	86 b1       	in	r24, 0x06	; 6
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	0e 94 cb 05 	call	0xb96	; 0xb96 <read_PINx_digital_level>
     802:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <currentStateROTARY_CK>
     806:	8f e8       	ldi	r24, 0x8F	; 143
     808:	91 e0       	ldi	r25, 0x01	; 1
     80a:	01 97       	sbiw	r24, 0x01	; 1
     80c:	f1 f7       	brne	.-4      	; 0x80a <main+0x1ae>
     80e:	00 c0       	rjmp	.+0      	; 0x810 <main+0x1b4>
     810:	00 00       	nop
			_delay_us(100);
			temp = read_PINx_digital_level(rotatyCLK_pinPort, rotatyCLK);
     812:	86 b1       	in	r24, 0x06	; 6
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	0e 94 cb 05 	call	0xb96	; 0xb96 <read_PINx_digital_level>
     81a:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <temp>
						
			if (temp == currentStateROTARY_CK)
     81e:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <currentStateROTARY_CK>
     822:	89 13       	cpse	r24, r25
     824:	16 c0       	rjmp	.+44     	; 0x852 <main+0x1f6>
			{
				rotary_delay --;			
     826:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rotary_delay>
     82a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <rotary_delay+0x1>
     82e:	01 97       	sbiw	r24, 0x01	; 1
     830:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <rotary_delay+0x1>
     834:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <rotary_delay>
				currentStateROTARY_DA = read_PINx_digital_level(rotaryData_pinPort, rotaryData);			
     838:	86 b1       	in	r24, 0x06	; 6
     83a:	61 e0       	ldi	r22, 0x01	; 1
     83c:	0e 94 cb 05 	call	0xb96	; 0xb96 <read_PINx_digital_level>
     840:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <__data_end>
			update_menu = 1;	
		} 
		// check rotary encoder
		rotary_delay = ROTARY_DELAY;
		temp = 0;
		while (rotary_delay)
     844:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rotary_delay>
     848:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <rotary_delay+0x1>
     84c:	89 2b       	or	r24, r25
     84e:	31 f0       	breq	.+12     	; 0x85c <main+0x200>
     850:	d4 cf       	rjmp	.-88     	; 0x7fa <main+0x19e>
			if (temp == currentStateROTARY_CK)
			{
				rotary_delay --;			
				currentStateROTARY_DA = read_PINx_digital_level(rotaryData_pinPort, rotaryData);			
			} else {
				rotary_delay = ROTARY_DELAY;
     852:	00 93 03 01 	sts	0x0103, r16	; 0x800103 <rotary_delay>
     856:	10 93 04 01 	sts	0x0104, r17	; 0x800104 <rotary_delay+0x1>
     85a:	cf cf       	rjmp	.-98     	; 0x7fa <main+0x19e>
			}
		}		
		if (currentStateROTARY_CK != lastStateROTARY_CK) 
     85c:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <currentStateROTARY_CK>
     860:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <lastStateROTARY_CK>
     864:	89 17       	cp	r24, r25
     866:	89 f1       	breq	.+98     	; 0x8ca <main+0x26e>
		{
			if (currentStateROTARY_CK == currentStateROTARY_DA) 
     868:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <__data_end>
     86c:	89 13       	cpse	r24, r25
     86e:	15 c0       	rjmp	.+42     	; 0x89a <main+0x23e>
			{
				selected  = my_menu[selected].up;
     870:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <selected>
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	ee 0f       	add	r30, r30
     878:	ff 1f       	adc	r31, r31
     87a:	ee 0f       	add	r30, r30
     87c:	ff 1f       	adc	r31, r31
     87e:	ee 0f       	add	r30, r30
     880:	ff 1f       	adc	r31, r31
     882:	e2 5f       	subi	r30, 0xF2	; 242
     884:	fe 4f       	sbci	r31, 0xFE	; 254
     886:	83 81       	ldd	r24, Z+3	; 0x03
     888:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <selected>
				update_menu = 1;
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <update_menu>
				SET(myLed_dataPort, myLed);
     892:	88 81       	ld	r24, Y
     894:	80 62       	ori	r24, 0x20	; 32
     896:	88 83       	st	Y, r24
     898:	14 c0       	rjmp	.+40     	; 0x8c2 <main+0x266>
			} else {
				selected  = my_menu[selected].down;
     89a:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <selected>
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	ee 0f       	add	r30, r30
     8a2:	ff 1f       	adc	r31, r31
     8a4:	ee 0f       	add	r30, r30
     8a6:	ff 1f       	adc	r31, r31
     8a8:	ee 0f       	add	r30, r30
     8aa:	ff 1f       	adc	r31, r31
     8ac:	e2 5f       	subi	r30, 0xF2	; 242
     8ae:	fe 4f       	sbci	r31, 0xFE	; 254
     8b0:	84 81       	ldd	r24, Z+4	; 0x04
     8b2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <selected>
				update_menu = 1;
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <update_menu>
				CLEAR(myLed_dataPort, myLed);				
     8bc:	88 81       	ld	r24, Y
     8be:	8f 7d       	andi	r24, 0xDF	; 223
     8c0:	88 83       	st	Y, r24
			}
			lastStateROTARY_CK = currentStateROTARY_CK;
     8c2:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <currentStateROTARY_CK>
     8c6:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <lastStateROTARY_CK>
		}		
		if (!(update_menu))
     8ca:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <update_menu>
     8ce:	81 11       	cpse	r24, r1
     8d0:	f1 ce       	rjmp	.-542    	; 0x6b4 <main+0x58>
		{
			rotary_delay = ROTARY_DELAY;
     8d2:	00 93 03 01 	sts	0x0103, r16	; 0x800103 <rotary_delay>
     8d6:	10 93 04 01 	sts	0x0104, r17	; 0x800104 <rotary_delay+0x1>
			temp = 0;
     8da:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <temp>
			while (rotary_delay)
			{
				lastStateROTARY_CK = read_PINx_digital_level(rotatyCLK_pinPort, rotatyCLK);
     8de:	86 b1       	in	r24, 0x06	; 6
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	0e 94 cb 05 	call	0xb96	; 0xb96 <read_PINx_digital_level>
     8e6:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <lastStateROTARY_CK>
     8ea:	8f e8       	ldi	r24, 0x8F	; 143
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	01 97       	sbiw	r24, 0x01	; 1
     8f0:	f1 f7       	brne	.-4      	; 0x8ee <main+0x292>
     8f2:	00 c0       	rjmp	.+0      	; 0x8f4 <main+0x298>
     8f4:	00 00       	nop
				_delay_us(100);
				temp = read_PINx_digital_level(rotatyCLK_pinPort, rotatyCLK);
     8f6:	86 b1       	in	r24, 0x06	; 6
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	0e 94 cb 05 	call	0xb96	; 0xb96 <read_PINx_digital_level>
     8fe:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <temp>
			
				if (temp == lastStateROTARY_CK)
     902:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <lastStateROTARY_CK>
     906:	89 13       	cpse	r24, r25
     908:	0c c0       	rjmp	.+24     	; 0x922 <__stack+0x23>
				{
					rotary_delay --;
     90a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rotary_delay>
     90e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <rotary_delay+0x1>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <rotary_delay+0x1>
     918:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <rotary_delay>
		}		
		if (!(update_menu))
		{
			rotary_delay = ROTARY_DELAY;
			temp = 0;
			while (rotary_delay)
     91c:	89 2b       	or	r24, r25
     91e:	f9 f6       	brne	.-66     	; 0x8de <main+0x282>
     920:	c9 ce       	rjmp	.-622    	; 0x6b4 <main+0x58>
			
				if (temp == lastStateROTARY_CK)
				{
					rotary_delay --;
				} else {
					rotary_delay = ROTARY_DELAY;
     922:	00 93 03 01 	sts	0x0103, r16	; 0x800103 <rotary_delay>
     926:	10 93 04 01 	sts	0x0104, r17	; 0x800104 <rotary_delay+0x1>
     92a:	d9 cf       	rjmp	.-78     	; 0x8de <main+0x282>

0000092c <rotary_counter>:
 * 
 * Use 'sprintf(ResultString, "%d", myCounter);' to convert binary (unsigned char) counter into string for LCD display
 * - clear the remains symbols when go back to less digits range (100 -> 99, 10 -> 9, etc)
 */
void rotary_counter (void)
{
     92c:	af 92       	push	r10
     92e:	bf 92       	push	r11
     930:	cf 92       	push	r12
     932:	df 92       	push	r13
     934:	ef 92       	push	r14
     936:	ff 92       	push	r15
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	00 d0       	rcall	.+0      	; 0x942 <rotary_counter+0x16>
     942:	00 d0       	rcall	.+0      	; 0x944 <rotary_counter+0x18>
     944:	1f 92       	push	r1
     946:	cd b7       	in	r28, 0x3d	; 61
     948:	de b7       	in	r29, 0x3e	; 62
	static unsigned char myCounter = 50;
	char ResultString[5];	
	unsigned char go_further = 1;
	
	serialGLCD_clear();
     94a:	0e 94 b5 06 	call	0xd6a	; 0xd6a <serialGLCD_clear>
	update_menu = 1;
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <update_menu>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     954:	2f ef       	ldi	r18, 0xFF	; 255
     956:	83 ec       	ldi	r24, 0xC3	; 195
     958:	99 e0       	ldi	r25, 0x09	; 9
     95a:	21 50       	subi	r18, 0x01	; 1
     95c:	80 40       	sbci	r24, 0x00	; 0
     95e:	90 40       	sbci	r25, 0x00	; 0
     960:	e1 f7       	brne	.-8      	; 0x95a <rotary_counter+0x2e>
     962:	00 c0       	rjmp	.+0      	; 0x964 <rotary_counter+0x38>
     964:	00 00       	nop
	_delay_ms(200);
	
	rotary_delay = ROTARY_DELAY;
     966:	88 e2       	ldi	r24, 0x28	; 40
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <rotary_delay+0x1>
     96e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <rotary_delay>
	temp = 0;
     972:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <temp>
			
		if (temp == lastStateROTARY_CK)
		{
			rotary_delay --;
		} else {
			rotary_delay = ROTARY_DELAY;
     976:	08 e2       	ldi	r16, 0x28	; 40
     978:	10 e0       	ldi	r17, 0x00	; 0
	
	rotary_delay = ROTARY_DELAY;
	temp = 0;
	while (rotary_delay)
	{
		lastStateROTARY_CK = read_PINx_digital_level(PINC, rotatyCLK);
     97a:	86 b1       	in	r24, 0x06	; 6
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	0e 94 cb 05 	call	0xb96	; 0xb96 <read_PINx_digital_level>
     982:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <lastStateROTARY_CK>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     986:	ef e8       	ldi	r30, 0x8F	; 143
     988:	f1 e0       	ldi	r31, 0x01	; 1
     98a:	31 97       	sbiw	r30, 0x01	; 1
     98c:	f1 f7       	brne	.-4      	; 0x98a <rotary_counter+0x5e>
     98e:	00 c0       	rjmp	.+0      	; 0x990 <rotary_counter+0x64>
     990:	00 00       	nop
		_delay_us(100);
		temp = read_PINx_digital_level(PINC, rotatyCLK);
     992:	86 b1       	in	r24, 0x06	; 6
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	0e 94 cb 05 	call	0xb96	; 0xb96 <read_PINx_digital_level>
     99a:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <temp>
			
		if (temp == lastStateROTARY_CK)
     99e:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <lastStateROTARY_CK>
     9a2:	89 13       	cpse	r24, r25
     9a4:	1b c0       	rjmp	.+54     	; 0x9dc <rotary_counter+0xb0>
		{
			rotary_delay --;
     9a6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rotary_delay>
     9aa:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <rotary_delay+0x1>
     9ae:	01 97       	sbiw	r24, 0x01	; 1
     9b0:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <rotary_delay+0x1>
     9b4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <rotary_delay>
	update_menu = 1;
	_delay_ms(200);
	
	rotary_delay = ROTARY_DELAY;
	temp = 0;
	while (rotary_delay)
     9b8:	89 2b       	or	r24, r25
     9ba:	f9 f6       	brne	.-66     	; 0x97a <rotary_counter+0x4e>
	}	
	
	while (go_further)
	{

		rotary_delay = ROTARY_DELAY;
     9bc:	08 e2       	ldi	r16, 0x28	; 40
     9be:	10 e0       	ldi	r17, 0x00	; 0
			update_menu = 1;
		}
		
		if (update_menu) 
		{
			sprintf(ResultString, "%d", myCounter);
     9c0:	0f 2e       	mov	r0, r31
     9c2:	f3 e6       	ldi	r31, 0x63	; 99
     9c4:	cf 2e       	mov	r12, r31
     9c6:	f2 e0       	ldi	r31, 0x02	; 2
     9c8:	df 2e       	mov	r13, r31
     9ca:	f0 2d       	mov	r31, r0
     9cc:	ce 01       	movw	r24, r28
     9ce:	01 96       	adiw	r24, 0x01	; 1
     9d0:	7c 01       	movw	r14, r24
			serialGLCD_goto21x8_XY(0, 0);
			serialGLCD_sendString ("Count (0 - 100)");
			serialGLCD_goto21x8_XY(0, 1);
			serialGLCD_sendString (strcat(ResultString, " ")); // with cleaning the remains when change the number of digits
     9d2:	68 94       	set
     9d4:	aa 24       	eor	r10, r10
     9d6:	a5 f8       	bld	r10, 5
     9d8:	b1 2c       	mov	r11, r1
     9da:	05 c0       	rjmp	.+10     	; 0x9e6 <rotary_counter+0xba>
			
		if (temp == lastStateROTARY_CK)
		{
			rotary_delay --;
		} else {
			rotary_delay = ROTARY_DELAY;
     9dc:	10 93 04 01 	sts	0x0104, r17	; 0x800104 <rotary_delay+0x1>
     9e0:	00 93 03 01 	sts	0x0103, r16	; 0x800103 <rotary_delay>
     9e4:	ca cf       	rjmp	.-108    	; 0x97a <rotary_counter+0x4e>
	}	
	
	while (go_further)
	{

		rotary_delay = ROTARY_DELAY;
     9e6:	10 93 04 01 	sts	0x0104, r17	; 0x800104 <rotary_delay+0x1>
     9ea:	00 93 03 01 	sts	0x0103, r16	; 0x800103 <rotary_delay>
		temp = 0;
     9ee:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <temp>
		while (rotary_delay)
		{
			currentStateROTARY_CK = read_PINx_digital_level(PINC, rotatyCLK);
     9f2:	86 b1       	in	r24, 0x06	; 6
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	0e 94 cb 05 	call	0xb96	; 0xb96 <read_PINx_digital_level>
     9fa:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <currentStateROTARY_CK>
     9fe:	9a e6       	ldi	r25, 0x6A	; 106
     a00:	9a 95       	dec	r25
     a02:	f1 f7       	brne	.-4      	; 0xa00 <rotary_counter+0xd4>
     a04:	00 c0       	rjmp	.+0      	; 0xa06 <rotary_counter+0xda>
			_delay_us(20);
			temp = read_PINx_digital_level(PINC, rotatyCLK);
     a06:	86 b1       	in	r24, 0x06	; 6
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	0e 94 cb 05 	call	0xb96	; 0xb96 <read_PINx_digital_level>
     a0e:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <temp>
				
			if (temp == currentStateROTARY_CK)
     a12:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <currentStateROTARY_CK>
     a16:	89 13       	cpse	r24, r25
     a18:	16 c0       	rjmp	.+44     	; 0xa46 <rotary_counter+0x11a>
			{
				rotary_delay --;
     a1a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rotary_delay>
     a1e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <rotary_delay+0x1>
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <rotary_delay+0x1>
     a28:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <rotary_delay>
				currentStateROTARY_DA = read_PINx_digital_level(PINC, rotaryData);
     a2c:	86 b1       	in	r24, 0x06	; 6
     a2e:	61 e0       	ldi	r22, 0x01	; 1
     a30:	0e 94 cb 05 	call	0xb96	; 0xb96 <read_PINx_digital_level>
     a34:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <__data_end>
	while (go_further)
	{

		rotary_delay = ROTARY_DELAY;
		temp = 0;
		while (rotary_delay)
     a38:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rotary_delay>
     a3c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <rotary_delay+0x1>
     a40:	89 2b       	or	r24, r25
     a42:	31 f0       	breq	.+12     	; 0xa50 <rotary_counter+0x124>
     a44:	d6 cf       	rjmp	.-84     	; 0x9f2 <rotary_counter+0xc6>
				rotary_delay --;
				currentStateROTARY_DA = read_PINx_digital_level(PINC, rotaryData);
			} 
			else 
			{
				rotary_delay = ROTARY_DELAY;
     a46:	10 93 04 01 	sts	0x0104, r17	; 0x800104 <rotary_delay+0x1>
     a4a:	00 93 03 01 	sts	0x0103, r16	; 0x800103 <rotary_delay>
     a4e:	d1 cf       	rjmp	.-94     	; 0x9f2 <rotary_counter+0xc6>
			}
		}
		if (currentStateROTARY_CK != lastStateROTARY_CK)
     a50:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <currentStateROTARY_CK>
     a54:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <lastStateROTARY_CK>
     a58:	89 17       	cp	r24, r25
     a5a:	f9 f0       	breq	.+62     	; 0xa9a <rotary_counter+0x16e>
		{
			if (currentStateROTARY_CK == currentStateROTARY_DA)
     a5c:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <__data_end>
     a60:	89 13       	cpse	r24, r25
     a62:	0c c0       	rjmp	.+24     	; 0xa7c <rotary_counter+0x150>
			{
				if (myCounter) myCounter--;			// stops at 0
     a64:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <myCounter.2176>
     a68:	88 23       	and	r24, r24
     a6a:	19 f0       	breq	.+6      	; 0xa72 <rotary_counter+0x146>
     a6c:	81 50       	subi	r24, 0x01	; 1
     a6e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <myCounter.2176>
				SET(myLed_dataPort, myLed);
     a72:	f8 01       	movw	r30, r16
     a74:	80 81       	ld	r24, Z
     a76:	80 62       	ori	r24, 0x20	; 32
     a78:	80 83       	st	Z, r24
     a7a:	0b c0       	rjmp	.+22     	; 0xa92 <rotary_counter+0x166>
			} 
			else 
			{
				if (myCounter < 100) myCounter++;	// stops at 100
     a7c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <myCounter.2176>
     a80:	84 36       	cpi	r24, 0x64	; 100
     a82:	18 f4       	brcc	.+6      	; 0xa8a <rotary_counter+0x15e>
     a84:	8f 5f       	subi	r24, 0xFF	; 255
     a86:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <myCounter.2176>
				CLEAR(myLed_dataPort, myLed);
     a8a:	f8 01       	movw	r30, r16
     a8c:	80 81       	ld	r24, Z
     a8e:	8f 7d       	andi	r24, 0xDF	; 223
     a90:	80 83       	st	Z, r24
			}
			update_menu = 1;
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <update_menu>
     a98:	04 c0       	rjmp	.+8      	; 0xaa2 <rotary_counter+0x176>
		}
		
		if (update_menu) 
     a9a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <update_menu>
     a9e:	88 23       	and	r24, r24
     aa0:	41 f1       	breq	.+80     	; 0xaf2 <rotary_counter+0x1c6>
		{
			sprintf(ResultString, "%d", myCounter);
     aa2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <myCounter.2176>
     aa6:	1f 92       	push	r1
     aa8:	8f 93       	push	r24
     aaa:	df 92       	push	r13
     aac:	cf 92       	push	r12
     aae:	ff 92       	push	r15
     ab0:	ef 92       	push	r14
     ab2:	0e 94 75 0d 	call	0x1aea	; 0x1aea <sprintf>
			serialGLCD_goto21x8_XY(0, 0);
     ab6:	60 e0       	ldi	r22, 0x00	; 0
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	0e 94 1c 07 	call	0xe38	; 0xe38 <serialGLCD_goto21x8_XY>
			serialGLCD_sendString ("Count (0 - 100)");
     abe:	86 e6       	ldi	r24, 0x66	; 102
     ac0:	92 e0       	ldi	r25, 0x02	; 2
     ac2:	0e 94 d4 06 	call	0xda8	; 0xda8 <serialGLCD_sendString>
			serialGLCD_goto21x8_XY(0, 1);
     ac6:	61 e0       	ldi	r22, 0x01	; 1
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	0e 94 1c 07 	call	0xe38	; 0xe38 <serialGLCD_goto21x8_XY>
			serialGLCD_sendString (strcat(ResultString, " ")); // with cleaning the remains when change the number of digits
     ace:	f7 01       	movw	r30, r14
     ad0:	01 90       	ld	r0, Z+
     ad2:	00 20       	and	r0, r0
     ad4:	e9 f7       	brne	.-6      	; 0xad0 <rotary_counter+0x1a4>
     ad6:	31 97       	sbiw	r30, 0x01	; 1
     ad8:	b1 82       	std	Z+1, r11	; 0x01
     ada:	a0 82       	st	Z, r10
     adc:	c7 01       	movw	r24, r14
     ade:	0e 94 d4 06 	call	0xda8	; 0xda8 <serialGLCD_sendString>
			update_menu = 0;
     ae2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <update_menu>
     ae6:	0f 90       	pop	r0
     ae8:	0f 90       	pop	r0
     aea:	0f 90       	pop	r0
     aec:	0f 90       	pop	r0
     aee:	0f 90       	pop	r0
     af0:	0f 90       	pop	r0
		}

		rotary_delay = ROTARY_DELAY;
     af2:	10 93 04 01 	sts	0x0104, r17	; 0x800104 <rotary_delay+0x1>
     af6:	00 93 03 01 	sts	0x0103, r16	; 0x800103 <rotary_delay>
		temp = 0;
     afa:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <temp>
		while (rotary_delay)
		{
			lastStateROTARY_CK = read_PINx_digital_level(PINC, rotatyCLK);
     afe:	86 b1       	in	r24, 0x06	; 6
     b00:	60 e0       	ldi	r22, 0x00	; 0
     b02:	0e 94 cb 05 	call	0xb96	; 0xb96 <read_PINx_digital_level>
     b06:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <lastStateROTARY_CK>
     b0a:	fa e6       	ldi	r31, 0x6A	; 106
     b0c:	fa 95       	dec	r31
     b0e:	f1 f7       	brne	.-4      	; 0xb0c <rotary_counter+0x1e0>
     b10:	00 c0       	rjmp	.+0      	; 0xb12 <rotary_counter+0x1e6>
			_delay_us(20);
			temp = read_PINx_digital_level(PINC, rotatyCLK);
     b12:	86 b1       	in	r24, 0x06	; 6
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	0e 94 cb 05 	call	0xb96	; 0xb96 <read_PINx_digital_level>
     b1a:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <temp>
				
			if (temp == lastStateROTARY_CK)
     b1e:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <lastStateROTARY_CK>
     b22:	89 13       	cpse	r24, r25
     b24:	0c c0       	rjmp	.+24     	; 0xb3e <rotary_counter+0x212>
			{
				rotary_delay --;
     b26:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <rotary_delay>
     b2a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <rotary_delay+0x1>
     b2e:	01 97       	sbiw	r24, 0x01	; 1
     b30:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <rotary_delay+0x1>
     b34:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <rotary_delay>
			update_menu = 0;
		}

		rotary_delay = ROTARY_DELAY;
		temp = 0;
		while (rotary_delay)
     b38:	89 2b       	or	r24, r25
     b3a:	09 f7       	brne	.-62     	; 0xafe <rotary_counter+0x1d2>
     b3c:	05 c0       	rjmp	.+10     	; 0xb48 <rotary_counter+0x21c>
			{
				rotary_delay --;
			} 
			else 
			{
				rotary_delay = ROTARY_DELAY;
     b3e:	10 93 04 01 	sts	0x0104, r17	; 0x800104 <rotary_delay+0x1>
     b42:	00 93 03 01 	sts	0x0103, r16	; 0x800103 <rotary_delay>
     b46:	db cf       	rjmp	.-74     	; 0xafe <rotary_counter+0x1d2>
			}
		}
	
		if (checkButton_withMode(onClick, buttonEnter_pinPort, buttonEnter, DEBOUNCE_DELAY))
     b48:	66 b1       	in	r22, 0x06	; 6
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	44 e0       	ldi	r20, 0x04	; 4
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <checkButton_withMode>
     b56:	88 23       	and	r24, r24
     b58:	09 f4       	brne	.+2      	; 0xb5c <rotary_counter+0x230>
     b5a:	45 cf       	rjmp	.-374    	; 0x9e6 <rotary_counter+0xba>
		{
			update_menu = 1;
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <update_menu>
			go_further = 0;
		}
	}
	selected = 1;
     b62:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <selected>
	serialGLCD_clear();
     b66:	0e 94 b5 06 	call	0xd6a	; 0xd6a <serialGLCD_clear>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b6a:	8f e3       	ldi	r24, 0x3F	; 63
     b6c:	9f e1       	ldi	r25, 0x1F	; 31
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	f1 f7       	brne	.-4      	; 0xb6e <rotary_counter+0x242>
     b72:	00 c0       	rjmp	.+0      	; 0xb74 <rotary_counter+0x248>
     b74:	00 00       	nop
	_delay_ms(2);
}
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	df 90       	pop	r13
     b8e:	cf 90       	pop	r12
     b90:	bf 90       	pop	r11
     b92:	af 90       	pop	r10
     b94:	08 95       	ret

00000b96 <read_PINx_digital_level>:
 */
unsigned char read_PINx_digital_level(unsigned char pinport, unsigned char pin)
{
	unsigned char result = 255;
	result = (pinport & (1<<pin)) ? 1 : 0;
	return result;
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	02 c0       	rjmp	.+4      	; 0xb9e <read_PINx_digital_level+0x8>
     b9a:	95 95       	asr	r25
     b9c:	87 95       	ror	r24
     b9e:	6a 95       	dec	r22
     ba0:	e2 f7       	brpl	.-8      	; 0xb9a <read_PINx_digital_level+0x4>
}
     ba2:	81 70       	andi	r24, 0x01	; 1
     ba4:	08 95       	ret

00000ba6 <debounceDelayInit>:
/** ##Push button delay containers initialization
 * - Predefined debounce delay, would vary depends of the timing of the main loop cycle
 *
 */
void debounceDelayInit()
{
     ba6:	e2 e9       	ldi	r30, 0x92	; 146
     ba8:	f2 e0       	ldi	r31, 0x02	; 2
     baa:	aa e8       	ldi	r26, 0x8A	; 138
     bac:	b2 e0       	ldi	r27, 0x02	; 2
     bae:	82 ea       	ldi	r24, 0xA2	; 162
     bb0:	92 e0       	ldi	r25, 0x02	; 2
	for (int i = 0; i < maxButtonNum; i++)
	{
		modeButton_pressed_delay[i] = 0;
     bb2:	11 92       	st	Z+, r1
     bb4:	11 92       	st	Z+, r1
		modeButton_pressed_delay[i] = 0;
		modeButton_pressed[i] = 0;
     bb6:	1d 92       	st	X+, r1
 * - Predefined debounce delay, would vary depends of the timing of the main loop cycle
 *
 */
void debounceDelayInit()
{
	for (int i = 0; i < maxButtonNum; i++)
     bb8:	e8 17       	cp	r30, r24
     bba:	f9 07       	cpc	r31, r25
     bbc:	d1 f7       	brne	.-12     	; 0xbb2 <debounceDelayInit+0xc>
	{
		modeButton_pressed_delay[i] = 0;
		modeButton_pressed_delay[i] = 0;
		modeButton_pressed[i] = 0;
	}
}
     bbe:	08 95       	ret

00000bc0 <checkButton_withMode>:
 * @param myButton button number (indexed from 0). If buttons on the same port these might be directly the port's pin(bit) number.
 * @param buttonDelay Predefined debounce delay, would vary depends of the timing of the main loop cycle
 *
 */
unsigned char checkButton_withMode(unsigned char mode, unsigned char myButton_pinport, unsigned char myButton, int buttonDelay)
{
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
     bc8:	28 97       	sbiw	r28, 0x08	; 8
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	de bf       	out	0x3e, r29	; 62
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	cd bf       	out	0x3d, r28	; 61
     bd4:	fe 01       	movw	r30, r28
     bd6:	31 96       	adiw	r30, 0x01	; 1
     bd8:	de 01       	movw	r26, r28
     bda:	19 96       	adiw	r26, 0x09	; 9
	unsigned char ret_value[maxButtonNum];
	for (int i = 0; i < maxButtonNum; i++)
	{
		ret_value[i] = 0;
     bdc:	11 92       	st	Z+, r1
 *
 */
unsigned char checkButton_withMode(unsigned char mode, unsigned char myButton_pinport, unsigned char myButton, int buttonDelay)
{
	unsigned char ret_value[maxButtonNum];
	for (int i = 0; i < maxButtonNum; i++)
     bde:	ea 17       	cp	r30, r26
     be0:	fb 07       	cpc	r31, r27
     be2:	e1 f7       	brne	.-8      	; 0xbdc <checkButton_withMode+0x1c>
	{
		ret_value[i] = 0;
	}
	
	switch (mode)
     be4:	88 23       	and	r24, r24
     be6:	09 f4       	brne	.+2      	; 0xbea <checkButton_withMode+0x2a>
     be8:	5e c0       	rjmp	.+188    	; 0xca6 <checkButton_withMode+0xe6>
     bea:	81 30       	cpi	r24, 0x01	; 1
     bec:	09 f0       	breq	.+2      	; 0xbf0 <checkButton_withMode+0x30>
     bee:	b0 c0       	rjmp	.+352    	; 0xd50 <checkButton_withMode+0x190>
	{
		case onClick: // next button action comes only after button is released and press again
		{	
			if  (READ(myButton_pinport, myButton) == 0)
     bf0:	84 2f       	mov	r24, r20
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	04 2e       	mov	r0, r20
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <checkButton_withMode+0x3e>
     bfa:	75 95       	asr	r23
     bfc:	67 95       	ror	r22
     bfe:	0a 94       	dec	r0
     c00:	e2 f7       	brpl	.-8      	; 0xbfa <checkButton_withMode+0x3a>
     c02:	60 fd       	sbrc	r22, 0
     c04:	2c c0       	rjmp	.+88     	; 0xc5e <checkButton_withMode+0x9e>
			{
				modeButton_pressed_delay[myButton]++;
     c06:	fc 01       	movw	r30, r24
     c08:	ee 0f       	add	r30, r30
     c0a:	ff 1f       	adc	r31, r31
     c0c:	df 01       	movw	r26, r30
     c0e:	ae 56       	subi	r26, 0x6E	; 110
     c10:	bd 4f       	sbci	r27, 0xFD	; 253
     c12:	6d 91       	ld	r22, X+
     c14:	7c 91       	ld	r23, X
     c16:	11 97       	sbiw	r26, 0x01	; 1
     c18:	6f 5f       	subi	r22, 0xFF	; 255
     c1a:	7f 4f       	sbci	r23, 0xFF	; 255
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
				modeButton_released_delay[myButton] = 0;
     c20:	e6 58       	subi	r30, 0x86	; 134
     c22:	fd 4f       	sbci	r31, 0xFD	; 253
     c24:	11 82       	std	Z+1, r1	; 0x01
     c26:	10 82       	st	Z, r1
				if (modeButton_pressed_delay[myButton] > buttonDelay)
     c28:	26 17       	cp	r18, r22
     c2a:	37 07       	cpc	r19, r23
     c2c:	0c f0       	brlt	.+2      	; 0xc30 <checkButton_withMode+0x70>
     c2e:	90 c0       	rjmp	.+288    	; 0xd50 <checkButton_withMode+0x190>
				{
					if (modeButton_pressed[myButton] == 0)
     c30:	fc 01       	movw	r30, r24
     c32:	e6 57       	subi	r30, 0x76	; 118
     c34:	fd 4f       	sbci	r31, 0xFD	; 253
     c36:	20 81       	ld	r18, Z
     c38:	21 11       	cpse	r18, r1
     c3a:	09 c0       	rjmp	.+18     	; 0xc4e <checkButton_withMode+0x8e>
					{
						modeButton_pressed[myButton] = 1;
     c3c:	21 e0       	ldi	r18, 0x01	; 1
     c3e:	fc 01       	movw	r30, r24
     c40:	e6 57       	subi	r30, 0x76	; 118
     c42:	fd 4f       	sbci	r31, 0xFD	; 253
     c44:	20 83       	st	Z, r18
						ret_value[myButton] = 1;
     c46:	fe 01       	movw	r30, r28
     c48:	e8 0f       	add	r30, r24
     c4a:	f9 1f       	adc	r31, r25
     c4c:	21 83       	std	Z+1, r18	; 0x01
					}
					modeButton_pressed_delay[myButton] = 0;
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	fc 01       	movw	r30, r24
     c54:	ee 56       	subi	r30, 0x6E	; 110
     c56:	fd 4f       	sbci	r31, 0xFD	; 253
     c58:	11 82       	std	Z+1, r1	; 0x01
     c5a:	10 82       	st	Z, r1
     c5c:	79 c0       	rjmp	.+242    	; 0xd50 <checkButton_withMode+0x190>
				}
			}
			else
			{
				modeButton_pressed_delay[myButton] = 0;
     c5e:	fc 01       	movw	r30, r24
     c60:	ee 0f       	add	r30, r30
     c62:	ff 1f       	adc	r31, r31
     c64:	df 01       	movw	r26, r30
     c66:	ae 56       	subi	r26, 0x6E	; 110
     c68:	bd 4f       	sbci	r27, 0xFD	; 253
     c6a:	1d 92       	st	X+, r1
     c6c:	1c 92       	st	X, r1
				modeButton_released_delay[myButton]++;
     c6e:	e6 58       	subi	r30, 0x86	; 134
     c70:	fd 4f       	sbci	r31, 0xFD	; 253
     c72:	60 81       	ld	r22, Z
     c74:	71 81       	ldd	r23, Z+1	; 0x01
     c76:	6f 5f       	subi	r22, 0xFF	; 255
     c78:	7f 4f       	sbci	r23, 0xFF	; 255
     c7a:	71 83       	std	Z+1, r23	; 0x01
     c7c:	60 83       	st	Z, r22
				if (modeButton_released_delay[myButton] > buttonDelay)
     c7e:	26 17       	cp	r18, r22
     c80:	37 07       	cpc	r19, r23
     c82:	0c f0       	brlt	.+2      	; 0xc86 <checkButton_withMode+0xc6>
     c84:	65 c0       	rjmp	.+202    	; 0xd50 <checkButton_withMode+0x190>
				{
					modeButton_pressed[myButton] = 0;
     c86:	fc 01       	movw	r30, r24
     c88:	e6 57       	subi	r30, 0x76	; 118
     c8a:	fd 4f       	sbci	r31, 0xFD	; 253
     c8c:	10 82       	st	Z, r1
					ret_value[myButton] = 0;
     c8e:	fe 01       	movw	r30, r28
     c90:	e8 0f       	add	r30, r24
     c92:	f9 1f       	adc	r31, r25
     c94:	11 82       	std	Z+1, r1	; 0x01
					modeButton_released_delay[myButton] = 0;
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	fc 01       	movw	r30, r24
     c9c:	e6 58       	subi	r30, 0x86	; 134
     c9e:	fd 4f       	sbci	r31, 0xFD	; 253
     ca0:	11 82       	std	Z+1, r1	; 0x01
     ca2:	10 82       	st	Z, r1
     ca4:	55 c0       	rjmp	.+170    	; 0xd50 <checkButton_withMode+0x190>
		}
		break;
		
		case whilePressed: // next button action comes while button is still pressed and hold down continuously loop after loop
		{
			if (modeButton_pressed[myButton] == 0)
     ca6:	84 2f       	mov	r24, r20
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	fc 01       	movw	r30, r24
     cac:	e6 57       	subi	r30, 0x76	; 118
     cae:	fd 4f       	sbci	r31, 0xFD	; 253
     cb0:	50 81       	ld	r21, Z
     cb2:	51 11       	cpse	r21, r1
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <checkButton_withMode+0x14c>
			{
				if  (READ(myButton_pinport, myButton) == 0)
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	04 2e       	mov	r0, r20
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <checkButton_withMode+0x100>
     cbc:	75 95       	asr	r23
     cbe:	67 95       	ror	r22
     cc0:	0a 94       	dec	r0
     cc2:	e2 f7       	brpl	.-8      	; 0xcbc <checkButton_withMode+0xfc>
     cc4:	60 fd       	sbrc	r22, 0
     cc6:	44 c0       	rjmp	.+136    	; 0xd50 <checkButton_withMode+0x190>
				{
					modeButton_pressed_delay[myButton]++;
     cc8:	fc 01       	movw	r30, r24
     cca:	ee 0f       	add	r30, r30
     ccc:	ff 1f       	adc	r31, r31
     cce:	df 01       	movw	r26, r30
     cd0:	ae 56       	subi	r26, 0x6E	; 110
     cd2:	bd 4f       	sbci	r27, 0xFD	; 253
     cd4:	6d 91       	ld	r22, X+
     cd6:	7c 91       	ld	r23, X
     cd8:	11 97       	sbiw	r26, 0x01	; 1
     cda:	6f 5f       	subi	r22, 0xFF	; 255
     cdc:	7f 4f       	sbci	r23, 0xFF	; 255
     cde:	11 96       	adiw	r26, 0x01	; 1
     ce0:	7c 93       	st	X, r23
     ce2:	6e 93       	st	-X, r22
					modeButton_released_delay[myButton] = 0;
     ce4:	e6 58       	subi	r30, 0x86	; 134
     ce6:	fd 4f       	sbci	r31, 0xFD	; 253
     ce8:	11 82       	std	Z+1, r1	; 0x01
     cea:	10 82       	st	Z, r1
					if (modeButton_pressed_delay[myButton] > buttonDelay)
     cec:	26 17       	cp	r18, r22
     cee:	37 07       	cpc	r19, r23
     cf0:	7c f5       	brge	.+94     	; 0xd50 <checkButton_withMode+0x190>
					{
						modeButton_pressed[myButton] = 1;
     cf2:	fc 01       	movw	r30, r24
     cf4:	e6 57       	subi	r30, 0x76	; 118
     cf6:	fd 4f       	sbci	r31, 0xFD	; 253
     cf8:	21 e0       	ldi	r18, 0x01	; 1
     cfa:	20 83       	st	Z, r18
						ret_value[myButton] = 1;
     cfc:	fe 01       	movw	r30, r28
     cfe:	e8 0f       	add	r30, r24
     d00:	f9 1f       	adc	r31, r25
     d02:	21 83       	std	Z+1, r18	; 0x01
						modeButton_pressed_delay[myButton] = 0;
     d04:	fd 01       	movw	r30, r26
     d06:	11 82       	std	Z+1, r1	; 0x01
     d08:	10 82       	st	Z, r1
     d0a:	22 c0       	rjmp	.+68     	; 0xd50 <checkButton_withMode+0x190>
					}
				}
			}
			else
			{
				modeButton_pressed_delay[myButton] = 0;
     d0c:	fc 01       	movw	r30, r24
     d0e:	ee 0f       	add	r30, r30
     d10:	ff 1f       	adc	r31, r31
     d12:	df 01       	movw	r26, r30
     d14:	ae 56       	subi	r26, 0x6E	; 110
     d16:	bd 4f       	sbci	r27, 0xFD	; 253
     d18:	1d 92       	st	X+, r1
     d1a:	1c 92       	st	X, r1
				modeButton_released_delay[myButton]++;
     d1c:	e6 58       	subi	r30, 0x86	; 134
     d1e:	fd 4f       	sbci	r31, 0xFD	; 253
     d20:	60 81       	ld	r22, Z
     d22:	71 81       	ldd	r23, Z+1	; 0x01
     d24:	6f 5f       	subi	r22, 0xFF	; 255
     d26:	7f 4f       	sbci	r23, 0xFF	; 255
     d28:	71 83       	std	Z+1, r23	; 0x01
     d2a:	60 83       	st	Z, r22
				if (modeButton_released_delay[myButton] > buttonDelay)
     d2c:	26 17       	cp	r18, r22
     d2e:	37 07       	cpc	r19, r23
     d30:	7c f4       	brge	.+30     	; 0xd50 <checkButton_withMode+0x190>
				{
					modeButton_pressed[myButton] = 0;
     d32:	fc 01       	movw	r30, r24
     d34:	e6 57       	subi	r30, 0x76	; 118
     d36:	fd 4f       	sbci	r31, 0xFD	; 253
     d38:	10 82       	st	Z, r1
					ret_value[myButton] = 0;
     d3a:	fe 01       	movw	r30, r28
     d3c:	e8 0f       	add	r30, r24
     d3e:	f9 1f       	adc	r31, r25
     d40:	11 82       	std	Z+1, r1	; 0x01
					modeButton_released_delay[myButton] = 0;
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	fc 01       	movw	r30, r24
     d48:	e6 58       	subi	r30, 0x86	; 134
     d4a:	fd 4f       	sbci	r31, 0xFD	; 253
     d4c:	11 82       	std	Z+1, r1	; 0x01
     d4e:	10 82       	st	Z, r1
		break;
		
		default:	break;
	}
	
	return ret_value[myButton];
     d50:	fe 01       	movw	r30, r28
     d52:	e4 0f       	add	r30, r20
     d54:	f1 1d       	adc	r31, r1
}
     d56:	81 81       	ldd	r24, Z+1	; 0x01
     d58:	28 96       	adiw	r28, 0x08	; 8
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	f8 94       	cli
     d5e:	de bf       	out	0x3e, r29	; 62
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	cd bf       	out	0x3d, r28	; 61
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	08 95       	ret

00000d6a <serialGLCD_clear>:
 * If you're operating in normal mode, all pixels are reset.
 * If you're operating in reverse mode, all pixels are set.
 *
 */
void serialGLCD_clear()
{
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
	wait_while_UART0_is_busy(0); // check if the transmitter is busy
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	0e 94 a9 07 	call	0xf52	; 0xf52 <wait_while_UART0_is_busy>
	UDR0 = 0x7C;
     d74:	c6 ec       	ldi	r28, 0xC6	; 198
     d76:	d0 e0       	ldi	r29, 0x00	; 0
     d78:	8c e7       	ldi	r24, 0x7C	; 124
     d7a:	88 83       	st	Y, r24
	wait_while_UART0_is_busy(0); // check if the transmitter is busy
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	0e 94 a9 07 	call	0xf52	; 0xf52 <wait_while_UART0_is_busy>
	UDR0 = 0x00;
     d82:	18 82       	st	Y, r1
     d84:	8f e9       	ldi	r24, 0x9F	; 159
     d86:	9f e0       	ldi	r25, 0x0F	; 15
     d88:	01 97       	sbiw	r24, 0x01	; 1
     d8a:	f1 f7       	brne	.-4      	; 0xd88 <serialGLCD_clear+0x1e>
     d8c:	00 c0       	rjmp	.+0      	; 0xd8e <serialGLCD_clear+0x24>
     d8e:	00 00       	nop
	_delay_ms(1);
}
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	08 95       	ret

00000d96 <serialGLCD_sendChar>:
 * - Initially used added delay in _sendChar function but finally moved it into wait_while_UART0_is_busy();
 * - Consider 5ms should be sufficient delay but could depends of the complexity of the screen we want to show
 *
 */
void serialGLCD_sendChar(unsigned char myChar)
{
     d96:	cf 93       	push	r28
     d98:	c8 2f       	mov	r28, r24
	wait_while_UART0_is_busy(GLCD_DELAY); // check if the transmitter is busy
     d9a:	85 e0       	ldi	r24, 0x05	; 5
     d9c:	0e 94 a9 07 	call	0xf52	; 0xf52 <wait_while_UART0_is_busy>
	UDR0 = myChar;
     da0:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
     da4:	cf 91       	pop	r28
     da6:	08 95       	ret

00000da8 <serialGLCD_sendString>:
 * - First character of the string is being displayed at current X, Y position and it is moved forward to next position.
 * - Thus the display is acting like the known type character LCD
 *
 */
void serialGLCD_sendString(char *myString)
{
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	ec 01       	movw	r28, r24
	while (*myString > 0)
     dae:	88 81       	ld	r24, Y
     db0:	88 23       	and	r24, r24
     db2:	31 f0       	breq	.+12     	; 0xdc0 <serialGLCD_sendString+0x18>
     db4:	21 96       	adiw	r28, 0x01	; 1
	{
		serialGLCD_sendChar(*myString++);
     db6:	0e 94 cb 06 	call	0xd96	; 0xd96 <serialGLCD_sendChar>
 * - Thus the display is acting like the known type character LCD
 *
 */
void serialGLCD_sendString(char *myString)
{
	while (*myString > 0)
     dba:	89 91       	ld	r24, Y+
     dbc:	81 11       	cpse	r24, r1
     dbe:	fb cf       	rjmp	.-10     	; 0xdb6 <serialGLCD_sendString+0xe>
	{
		serialGLCD_sendChar(*myString++);
	}	
}
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	08 95       	ret

00000dc6 <serialGLCD_gotoPixel_XY>:
 * @param pixelX	range 0, 127
 * @param pixelY	range 0, 63
 *
 */
void serialGLCD_gotoPixel_XY(unsigned char pixelX, unsigned char pixelY)
{
     dc6:	ff 92       	push	r15
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	08 2f       	mov	r16, r24
     dd2:	16 2f       	mov	r17, r22
	// check the range
	if (pixelX > INITIAL_pixel_MAXX) pixelX = 0;
     dd4:	88 23       	and	r24, r24
     dd6:	0c f4       	brge	.+2      	; 0xdda <serialGLCD_gotoPixel_XY+0x14>
     dd8:	00 e0       	ldi	r16, 0x00	; 0
	if (pixelY > INITIAL_pixel_MAXY) pixelY = 0;
     dda:	10 34       	cpi	r17, 0x40	; 64
     ddc:	08 f0       	brcs	.+2      	; 0xde0 <serialGLCD_gotoPixel_XY+0x1a>
     dde:	10 e0       	ldi	r17, 0x00	; 0
	// send X
	wait_while_UART0_is_busy(0); // check if the transmitter is busy
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	0e 94 a9 07 	call	0xf52	; 0xf52 <wait_while_UART0_is_busy>
	UDR0 = 0x7C;
     de6:	c6 ec       	ldi	r28, 0xC6	; 198
     de8:	d0 e0       	ldi	r29, 0x00	; 0
     dea:	0f 2e       	mov	r0, r31
     dec:	fc e7       	ldi	r31, 0x7C	; 124
     dee:	ff 2e       	mov	r15, r31
     df0:	f0 2d       	mov	r31, r0
     df2:	f8 82       	st	Y, r15
	wait_while_UART0_is_busy(0); // check if the transmitter is busy
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	0e 94 a9 07 	call	0xf52	; 0xf52 <wait_while_UART0_is_busy>
	UDR0 = 0x18;
     dfa:	88 e1       	ldi	r24, 0x18	; 24
     dfc:	88 83       	st	Y, r24
	wait_while_UART0_is_busy(0); // check if the transmitter is busy
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	0e 94 a9 07 	call	0xf52	; 0xf52 <wait_while_UART0_is_busy>
	UDR0 = pixelX;
     e04:	08 83       	st	Y, r16
	
	// send Y
	wait_while_UART0_is_busy(0); // check if the transmitter is busy
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	0e 94 a9 07 	call	0xf52	; 0xf52 <wait_while_UART0_is_busy>
	UDR0 = 0x7C;
     e0c:	f8 82       	st	Y, r15
	wait_while_UART0_is_busy(0); // check if the transmitter is busy
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	0e 94 a9 07 	call	0xf52	; 0xf52 <wait_while_UART0_is_busy>
	UDR0 = 0x19;
     e14:	89 e1       	ldi	r24, 0x19	; 25
     e16:	88 83       	st	Y, r24
	wait_while_UART0_is_busy(0); // check if the transmitter is busy
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	0e 94 a9 07 	call	0xf52	; 0xf52 <wait_while_UART0_is_busy>
	UDR0 = pixelY;	
     e1e:	18 83       	st	Y, r17
     e20:	8f e9       	ldi	r24, 0x9F	; 159
     e22:	9f e0       	ldi	r25, 0x0F	; 15
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	f1 f7       	brne	.-4      	; 0xe24 <serialGLCD_gotoPixel_XY+0x5e>
     e28:	00 c0       	rjmp	.+0      	; 0xe2a <serialGLCD_gotoPixel_XY+0x64>
     e2a:	00 00       	nop
	_delay_ms(1);
}
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	1f 91       	pop	r17
     e32:	0f 91       	pop	r16
     e34:	ff 90       	pop	r15
     e36:	08 95       	ret

00000e38 <serialGLCD_goto21x8_XY>:
	unsigned char pixelX = (refX) * 6; ///< pixelX	range 0, 127
	// find pixel Y
	unsigned char pixelY = (refY) * 8; ///< pixelY	range 0, 63
	
	// goto pixel X, Y
	serialGLCD_gotoPixel_XY(pixelX, pixelY);
     e38:	66 0f       	add	r22, r22
     e3a:	66 0f       	add	r22, r22
     e3c:	66 0f       	add	r22, r22
     e3e:	98 2f       	mov	r25, r24
     e40:	99 0f       	add	r25, r25
     e42:	89 0f       	add	r24, r25
     e44:	88 0f       	add	r24, r24
     e46:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <serialGLCD_gotoPixel_XY>
     e4a:	08 95       	ret

00000e4c <UART0_Init>:
 *	- Transmitter is enabled by setting the Transmit Enable (TXEN) bit in the UCSRnB Register
 *  - Receiver is enabled by setting the Receive Enable (RXEN) bit in the UCSRnB Register
 *
 */
void UART0_Init (uint16_t baud, char AsyncDoubleSpeed, char dataLength, char Parity, char stopbits)
{
     e4c:	cf 92       	push	r12
     e4e:	df 92       	push	r13
     e50:	ef 92       	push	r14
     e52:	ff 92       	push	r15
     e54:	0f 93       	push	r16
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	6c 01       	movw	r12, r24
     e5c:	c4 2f       	mov	r28, r20
     e5e:	d2 2f       	mov	r29, r18
	char K = 1;
	if (AsyncDoubleSpeed == 1) 
     e60:	61 30       	cpi	r22, 0x01	; 1
     e62:	39 f4       	brne	.+14     	; 0xe72 <UART0_Init+0x26>
	{
		K = 2;
		UCSR0A |= (1 << U2X0);
     e64:	e0 ec       	ldi	r30, 0xC0	; 192
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	82 60       	ori	r24, 0x02	; 2
     e6c:	80 83       	st	Z, r24
void UART0_Init (uint16_t baud, char AsyncDoubleSpeed, char dataLength, char Parity, char stopbits)
{
	char K = 1;
	if (AsyncDoubleSpeed == 1) 
	{
		K = 2;
     e6e:	a2 e0       	ldi	r26, 0x02	; 2
     e70:	01 c0       	rjmp	.+2      	; 0xe74 <UART0_Init+0x28>
 *  - Receiver is enabled by setting the Receive Enable (RXEN) bit in the UCSRnB Register
 *
 */
void UART0_Init (uint16_t baud, char AsyncDoubleSpeed, char dataLength, char Parity, char stopbits)
{
	char K = 1;
     e72:	a1 e0       	ldi	r26, 0x01	; 1
	{
		K = 2;
		UCSR0A |= (1 << U2X0);
	}
	//uint16_t UBRRvalue = 16; //lrint((K*F_CPU/16*100*baud) -1);
	uint16_t UBRRvalue = lrint((K*F_CPU/16/100/baud) -1);
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	34 e2       	ldi	r19, 0x24	; 36
     e7a:	44 ef       	ldi	r20, 0xF4	; 244
     e7c:	50 e0       	ldi	r21, 0x00	; 0
     e7e:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__muluhisi3>
     e82:	20 e4       	ldi	r18, 0x40	; 64
     e84:	36 e0       	ldi	r19, 0x06	; 6
     e86:	40 e0       	ldi	r20, 0x00	; 0
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__udivmodsi4>
     e8e:	e1 2c       	mov	r14, r1
     e90:	f1 2c       	mov	r15, r1
     e92:	ca 01       	movw	r24, r20
     e94:	b9 01       	movw	r22, r18
     e96:	a7 01       	movw	r20, r14
     e98:	96 01       	movw	r18, r12
     e9a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__udivmodsi4>
     e9e:	ca 01       	movw	r24, r20
     ea0:	b9 01       	movw	r22, r18
     ea2:	61 50       	subi	r22, 0x01	; 1
     ea4:	71 09       	sbc	r23, r1
     ea6:	81 09       	sbc	r24, r1
     ea8:	91 09       	sbc	r25, r1
     eaa:	0e 94 b8 07 	call	0xf70	; 0xf70 <__floatunsisf>
     eae:	0e 94 f5 07 	call	0xfea	; 0xfea <lrint>
	UBRR0H = (unsigned char) (UBRRvalue >> 8);
     eb2:	27 2f       	mov	r18, r23
     eb4:	33 27       	eor	r19, r19
     eb6:	20 93 c5 00 	sts	0x00C5, r18	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char) (UBRRvalue);
     eba:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	// setting frame format, 8bit, no parity, 1 stop
	if (Parity == PARITY_EVEN)	UCSR0C |= (1 << UPM01); // set parity for EVEN
     ebe:	d1 11       	cpse	r29, r1
     ec0:	06 c0       	rjmp	.+12     	; 0xece <UART0_Init+0x82>
     ec2:	e2 ec       	ldi	r30, 0xC2	; 194
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	80 62       	ori	r24, 0x20	; 32
     eca:	80 83       	st	Z, r24
     ecc:	07 c0       	rjmp	.+14     	; 0xedc <UART0_Init+0x90>
	if (Parity == PARITY_ODD)	UCSR0C |= (3 << UPM00); // set parity for ODD
     ece:	d1 30       	cpi	r29, 0x01	; 1
     ed0:	29 f4       	brne	.+10     	; 0xedc <UART0_Init+0x90>
     ed2:	e2 ec       	ldi	r30, 0xC2	; 194
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	80 63       	ori	r24, 0x30	; 48
     eda:	80 83       	st	Z, r24
	
	// frame format used by the USART is set by the UCSZn2:0, UPMn1:0 and USBSn bits in UCSRnB and UCSRnC
	if (stopbits == 1) UCSR0C &= ~(1 << USBS0);		// 1 stop bit, this is default. We need to clear if it was previously set
     edc:	01 30       	cpi	r16, 0x01	; 1
     ede:	31 f4       	brne	.+12     	; 0xeec <UART0_Init+0xa0>
     ee0:	e2 ec       	ldi	r30, 0xC2	; 194
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	87 7f       	andi	r24, 0xF7	; 247
     ee8:	80 83       	st	Z, r24
     eea:	07 c0       	rjmp	.+14     	; 0xefa <UART0_Init+0xae>
	if (stopbits == 2) UCSR0C |= (1 << USBS0);		// 2 stop bits
     eec:	02 30       	cpi	r16, 0x02	; 2
     eee:	29 f4       	brne	.+10     	; 0xefa <UART0_Init+0xae>
     ef0:	e2 ec       	ldi	r30, 0xC2	; 194
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	88 60       	ori	r24, 0x08	; 8
     ef8:	80 83       	st	Z, r24
	
	if (dataLength == 6) UCSR0C |= (1 << UCSZ00);	// 6 bits UART data length
     efa:	c6 30       	cpi	r28, 0x06	; 6
     efc:	31 f4       	brne	.+12     	; 0xf0a <UART0_Init+0xbe>
     efe:	e2 ec       	ldi	r30, 0xC2	; 194
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	82 60       	ori	r24, 0x02	; 2
     f06:	80 83       	st	Z, r24
     f08:	10 c0       	rjmp	.+32     	; 0xf2a <UART0_Init+0xde>
	if (dataLength == 7) UCSR0C |= (2 << UCSZ00);	// 7 bits UART data length
     f0a:	c7 30       	cpi	r28, 0x07	; 7
     f0c:	31 f4       	brne	.+12     	; 0xf1a <UART0_Init+0xce>
     f0e:	e2 ec       	ldi	r30, 0xC2	; 194
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	84 60       	ori	r24, 0x04	; 4
     f16:	80 83       	st	Z, r24
     f18:	0f c0       	rjmp	.+30     	; 0xf38 <UART0_Init+0xec>
	if (dataLength == 8) UCSR0C |= (3 << UCSZ00);	// 8 bits UART data length
     f1a:	c8 30       	cpi	r28, 0x08	; 8
     f1c:	31 f4       	brne	.+12     	; 0xf2a <UART0_Init+0xde>
     f1e:	e2 ec       	ldi	r30, 0xC2	; 194
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	86 60       	ori	r24, 0x06	; 6
     f26:	80 83       	st	Z, r24
     f28:	07 c0       	rjmp	.+14     	; 0xf38 <UART0_Init+0xec>
	if (dataLength == 9) UCSR0C |= (7 << UCSZ00);	// 9 bits UART data length
     f2a:	c9 30       	cpi	r28, 0x09	; 9
     f2c:	29 f4       	brne	.+10     	; 0xf38 <UART0_Init+0xec>
     f2e:	e2 ec       	ldi	r30, 0xC2	; 194
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	8e 60       	ori	r24, 0x0E	; 14
     f36:	80 83       	st	Z, r24
		
	// Enable transmit or/and receive operation
	// Transmitter is enabled by setting the Transmit Enable (TXEN) bit in the UCSRnB Register
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0);
     f38:	e1 ec       	ldi	r30, 0xC1	; 193
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	88 61       	ori	r24, 0x18	; 24
     f40:	80 83       	st	Z, r24
}
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	0f 91       	pop	r16
     f48:	ff 90       	pop	r15
     f4a:	ef 90       	pop	r14
     f4c:	df 90       	pop	r13
     f4e:	cf 90       	pop	r12
     f50:	08 95       	ret

00000f52 <wait_while_UART0_is_busy>:
 * - the delay value in ms is predefined in a macro GLCD_DELAY, specifically needed to serial GLCD
 *     - Note!: the built-in avr delay cycle expects a compile time integer constant, thus it couldn't be transferred by a variable
 *     - this is why add_delay is used only for true/false disposition and not to give the delay value in ms
 */
void wait_while_UART0_is_busy(unsigned int add_delay)
{
     f52:	9c 01       	movw	r18, r24
	while (!(UCSR0A & (1 << UDRE0))); // check if the transmitter is busy
     f54:	e0 ec       	ldi	r30, 0xC0	; 192
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	90 81       	ld	r25, Z
     f5a:	95 ff       	sbrs	r25, 5
     f5c:	fd cf       	rjmp	.-6      	; 0xf58 <wait_while_UART0_is_busy+0x6>
	if (add_delay) _delay_ms(GLCD_DELAY);
     f5e:	23 2b       	or	r18, r19
     f60:	31 f0       	breq	.+12     	; 0xf6e <wait_while_UART0_is_busy+0x1c>
     f62:	8f e1       	ldi	r24, 0x1F	; 31
     f64:	9e e4       	ldi	r25, 0x4E	; 78
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	f1 f7       	brne	.-4      	; 0xf66 <wait_while_UART0_is_busy+0x14>
     f6a:	00 c0       	rjmp	.+0      	; 0xf6c <wait_while_UART0_is_busy+0x1a>
     f6c:	00 00       	nop
     f6e:	08 95       	ret

00000f70 <__floatunsisf>:
     f70:	e8 94       	clt
     f72:	09 c0       	rjmp	.+18     	; 0xf86 <__floatsisf+0x12>

00000f74 <__floatsisf>:
     f74:	97 fb       	bst	r25, 7
     f76:	3e f4       	brtc	.+14     	; 0xf86 <__floatsisf+0x12>
     f78:	90 95       	com	r25
     f7a:	80 95       	com	r24
     f7c:	70 95       	com	r23
     f7e:	61 95       	neg	r22
     f80:	7f 4f       	sbci	r23, 0xFF	; 255
     f82:	8f 4f       	sbci	r24, 0xFF	; 255
     f84:	9f 4f       	sbci	r25, 0xFF	; 255
     f86:	99 23       	and	r25, r25
     f88:	a9 f0       	breq	.+42     	; 0xfb4 <__floatsisf+0x40>
     f8a:	f9 2f       	mov	r31, r25
     f8c:	96 e9       	ldi	r25, 0x96	; 150
     f8e:	bb 27       	eor	r27, r27
     f90:	93 95       	inc	r25
     f92:	f6 95       	lsr	r31
     f94:	87 95       	ror	r24
     f96:	77 95       	ror	r23
     f98:	67 95       	ror	r22
     f9a:	b7 95       	ror	r27
     f9c:	f1 11       	cpse	r31, r1
     f9e:	f8 cf       	rjmp	.-16     	; 0xf90 <__floatsisf+0x1c>
     fa0:	fa f4       	brpl	.+62     	; 0xfe0 <__floatsisf+0x6c>
     fa2:	bb 0f       	add	r27, r27
     fa4:	11 f4       	brne	.+4      	; 0xfaa <__floatsisf+0x36>
     fa6:	60 ff       	sbrs	r22, 0
     fa8:	1b c0       	rjmp	.+54     	; 0xfe0 <__floatsisf+0x6c>
     faa:	6f 5f       	subi	r22, 0xFF	; 255
     fac:	7f 4f       	sbci	r23, 0xFF	; 255
     fae:	8f 4f       	sbci	r24, 0xFF	; 255
     fb0:	9f 4f       	sbci	r25, 0xFF	; 255
     fb2:	16 c0       	rjmp	.+44     	; 0xfe0 <__floatsisf+0x6c>
     fb4:	88 23       	and	r24, r24
     fb6:	11 f0       	breq	.+4      	; 0xfbc <__floatsisf+0x48>
     fb8:	96 e9       	ldi	r25, 0x96	; 150
     fba:	11 c0       	rjmp	.+34     	; 0xfde <__floatsisf+0x6a>
     fbc:	77 23       	and	r23, r23
     fbe:	21 f0       	breq	.+8      	; 0xfc8 <__floatsisf+0x54>
     fc0:	9e e8       	ldi	r25, 0x8E	; 142
     fc2:	87 2f       	mov	r24, r23
     fc4:	76 2f       	mov	r23, r22
     fc6:	05 c0       	rjmp	.+10     	; 0xfd2 <__floatsisf+0x5e>
     fc8:	66 23       	and	r22, r22
     fca:	71 f0       	breq	.+28     	; 0xfe8 <__floatsisf+0x74>
     fcc:	96 e8       	ldi	r25, 0x86	; 134
     fce:	86 2f       	mov	r24, r22
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	2a f0       	brmi	.+10     	; 0xfe0 <__floatsisf+0x6c>
     fd6:	9a 95       	dec	r25
     fd8:	66 0f       	add	r22, r22
     fda:	77 1f       	adc	r23, r23
     fdc:	88 1f       	adc	r24, r24
     fde:	da f7       	brpl	.-10     	; 0xfd6 <__floatsisf+0x62>
     fe0:	88 0f       	add	r24, r24
     fe2:	96 95       	lsr	r25
     fe4:	87 95       	ror	r24
     fe6:	97 f9       	bld	r25, 7
     fe8:	08 95       	ret

00000fea <lrint>:
     fea:	0e 94 3a 08 	call	0x1074	; 0x1074 <__fp_splitA>
     fee:	a8 f1       	brcs	.+106    	; 0x105a <lrint+0x70>
     ff0:	9e 57       	subi	r25, 0x7E	; 126
     ff2:	b0 f1       	brcs	.+108    	; 0x1060 <lrint+0x76>
     ff4:	98 51       	subi	r25, 0x18	; 24
     ff6:	60 f0       	brcs	.+24     	; 0x1010 <lrint+0x26>
     ff8:	39 f1       	breq	.+78     	; 0x1048 <lrint+0x5e>
     ffa:	98 30       	cpi	r25, 0x08	; 8
     ffc:	70 f5       	brcc	.+92     	; 0x105a <lrint+0x70>
     ffe:	09 2e       	mov	r0, r25
    1000:	99 27       	eor	r25, r25
    1002:	66 0f       	add	r22, r22
    1004:	77 1f       	adc	r23, r23
    1006:	88 1f       	adc	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	0a 94       	dec	r0
    100c:	d1 f7       	brne	.-12     	; 0x1002 <lrint+0x18>
    100e:	1c c0       	rjmp	.+56     	; 0x1048 <lrint+0x5e>
    1010:	bb 27       	eor	r27, r27
    1012:	99 3f       	cpi	r25, 0xF9	; 249
    1014:	4c f4       	brge	.+18     	; 0x1028 <lrint+0x3e>
    1016:	b1 11       	cpse	r27, r1
    1018:	b1 e0       	ldi	r27, 0x01	; 1
    101a:	b6 2b       	or	r27, r22
    101c:	67 2f       	mov	r22, r23
    101e:	78 2f       	mov	r23, r24
    1020:	88 27       	eor	r24, r24
    1022:	98 5f       	subi	r25, 0xF8	; 248
    1024:	b1 f7       	brne	.-20     	; 0x1012 <lrint+0x28>
    1026:	08 c0       	rjmp	.+16     	; 0x1038 <lrint+0x4e>
    1028:	86 95       	lsr	r24
    102a:	77 95       	ror	r23
    102c:	67 95       	ror	r22
    102e:	b7 95       	ror	r27
    1030:	08 f4       	brcc	.+2      	; 0x1034 <lrint+0x4a>
    1032:	b1 60       	ori	r27, 0x01	; 1
    1034:	93 95       	inc	r25
    1036:	c1 f7       	brne	.-16     	; 0x1028 <lrint+0x3e>
    1038:	bb 0f       	add	r27, r27
    103a:	30 f4       	brcc	.+12     	; 0x1048 <lrint+0x5e>
    103c:	11 f4       	brne	.+4      	; 0x1042 <lrint+0x58>
    103e:	60 ff       	sbrs	r22, 0
    1040:	03 c0       	rjmp	.+6      	; 0x1048 <lrint+0x5e>
    1042:	6f 5f       	subi	r22, 0xFF	; 255
    1044:	7f 4f       	sbci	r23, 0xFF	; 255
    1046:	8f 4f       	sbci	r24, 0xFF	; 255
    1048:	3e f4       	brtc	.+14     	; 0x1058 <lrint+0x6e>
    104a:	90 95       	com	r25
    104c:	80 95       	com	r24
    104e:	70 95       	com	r23
    1050:	61 95       	neg	r22
    1052:	7f 4f       	sbci	r23, 0xFF	; 255
    1054:	8f 4f       	sbci	r24, 0xFF	; 255
    1056:	9f 4f       	sbci	r25, 0xFF	; 255
    1058:	08 95       	ret
    105a:	68 94       	set
    105c:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__fp_szero>
    1060:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_zero>

00001064 <__fp_split3>:
    1064:	57 fd       	sbrc	r21, 7
    1066:	90 58       	subi	r25, 0x80	; 128
    1068:	44 0f       	add	r20, r20
    106a:	55 1f       	adc	r21, r21
    106c:	59 f0       	breq	.+22     	; 0x1084 <__fp_splitA+0x10>
    106e:	5f 3f       	cpi	r21, 0xFF	; 255
    1070:	71 f0       	breq	.+28     	; 0x108e <__fp_splitA+0x1a>
    1072:	47 95       	ror	r20

00001074 <__fp_splitA>:
    1074:	88 0f       	add	r24, r24
    1076:	97 fb       	bst	r25, 7
    1078:	99 1f       	adc	r25, r25
    107a:	61 f0       	breq	.+24     	; 0x1094 <__fp_splitA+0x20>
    107c:	9f 3f       	cpi	r25, 0xFF	; 255
    107e:	79 f0       	breq	.+30     	; 0x109e <__fp_splitA+0x2a>
    1080:	87 95       	ror	r24
    1082:	08 95       	ret
    1084:	12 16       	cp	r1, r18
    1086:	13 06       	cpc	r1, r19
    1088:	14 06       	cpc	r1, r20
    108a:	55 1f       	adc	r21, r21
    108c:	f2 cf       	rjmp	.-28     	; 0x1072 <__fp_split3+0xe>
    108e:	46 95       	lsr	r20
    1090:	f1 df       	rcall	.-30     	; 0x1074 <__fp_splitA>
    1092:	08 c0       	rjmp	.+16     	; 0x10a4 <__fp_splitA+0x30>
    1094:	16 16       	cp	r1, r22
    1096:	17 06       	cpc	r1, r23
    1098:	18 06       	cpc	r1, r24
    109a:	99 1f       	adc	r25, r25
    109c:	f1 cf       	rjmp	.-30     	; 0x1080 <__fp_splitA+0xc>
    109e:	86 95       	lsr	r24
    10a0:	71 05       	cpc	r23, r1
    10a2:	61 05       	cpc	r22, r1
    10a4:	08 94       	sec
    10a6:	08 95       	ret

000010a8 <__fp_zero>:
    10a8:	e8 94       	clt

000010aa <__fp_szero>:
    10aa:	bb 27       	eor	r27, r27
    10ac:	66 27       	eor	r22, r22
    10ae:	77 27       	eor	r23, r23
    10b0:	cb 01       	movw	r24, r22
    10b2:	97 f9       	bld	r25, 7
    10b4:	08 95       	ret

000010b6 <vfprintf>:
    10b6:	a0 e1       	ldi	r26, 0x10	; 16
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e1 e6       	ldi	r30, 0x61	; 97
    10bc:	f8 e0       	ldi	r31, 0x08	; 8
    10be:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__prologue_saves__>
    10c2:	7c 01       	movw	r14, r24
    10c4:	1b 01       	movw	r2, r22
    10c6:	6a 01       	movw	r12, r20
    10c8:	fc 01       	movw	r30, r24
    10ca:	17 82       	std	Z+7, r1	; 0x07
    10cc:	16 82       	std	Z+6, r1	; 0x06
    10ce:	83 81       	ldd	r24, Z+3	; 0x03
    10d0:	81 ff       	sbrs	r24, 1
    10d2:	44 c3       	rjmp	.+1672   	; 0x175c <vfprintf+0x6a6>
    10d4:	9e 01       	movw	r18, r28
    10d6:	2f 5f       	subi	r18, 0xFF	; 255
    10d8:	3f 4f       	sbci	r19, 0xFF	; 255
    10da:	39 01       	movw	r6, r18
    10dc:	f7 01       	movw	r30, r14
    10de:	93 81       	ldd	r25, Z+3	; 0x03
    10e0:	f1 01       	movw	r30, r2
    10e2:	93 fd       	sbrc	r25, 3
    10e4:	85 91       	lpm	r24, Z+
    10e6:	93 ff       	sbrs	r25, 3
    10e8:	81 91       	ld	r24, Z+
    10ea:	1f 01       	movw	r2, r30
    10ec:	88 23       	and	r24, r24
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <vfprintf+0x3c>
    10f0:	31 c3       	rjmp	.+1634   	; 0x1754 <vfprintf+0x69e>
    10f2:	85 32       	cpi	r24, 0x25	; 37
    10f4:	39 f4       	brne	.+14     	; 0x1104 <vfprintf+0x4e>
    10f6:	93 fd       	sbrc	r25, 3
    10f8:	85 91       	lpm	r24, Z+
    10fa:	93 ff       	sbrs	r25, 3
    10fc:	81 91       	ld	r24, Z+
    10fe:	1f 01       	movw	r2, r30
    1100:	85 32       	cpi	r24, 0x25	; 37
    1102:	39 f4       	brne	.+14     	; 0x1112 <vfprintf+0x5c>
    1104:	b7 01       	movw	r22, r14
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fputc>
    110c:	56 01       	movw	r10, r12
    110e:	65 01       	movw	r12, r10
    1110:	e5 cf       	rjmp	.-54     	; 0x10dc <vfprintf+0x26>
    1112:	10 e0       	ldi	r17, 0x00	; 0
    1114:	51 2c       	mov	r5, r1
    1116:	91 2c       	mov	r9, r1
    1118:	ff e1       	ldi	r31, 0x1F	; 31
    111a:	f9 15       	cp	r31, r9
    111c:	d8 f0       	brcs	.+54     	; 0x1154 <vfprintf+0x9e>
    111e:	8b 32       	cpi	r24, 0x2B	; 43
    1120:	79 f0       	breq	.+30     	; 0x1140 <vfprintf+0x8a>
    1122:	38 f4       	brcc	.+14     	; 0x1132 <vfprintf+0x7c>
    1124:	80 32       	cpi	r24, 0x20	; 32
    1126:	79 f0       	breq	.+30     	; 0x1146 <vfprintf+0x90>
    1128:	83 32       	cpi	r24, 0x23	; 35
    112a:	a1 f4       	brne	.+40     	; 0x1154 <vfprintf+0x9e>
    112c:	f9 2d       	mov	r31, r9
    112e:	f0 61       	ori	r31, 0x10	; 16
    1130:	2e c0       	rjmp	.+92     	; 0x118e <vfprintf+0xd8>
    1132:	8d 32       	cpi	r24, 0x2D	; 45
    1134:	61 f0       	breq	.+24     	; 0x114e <vfprintf+0x98>
    1136:	80 33       	cpi	r24, 0x30	; 48
    1138:	69 f4       	brne	.+26     	; 0x1154 <vfprintf+0x9e>
    113a:	29 2d       	mov	r18, r9
    113c:	21 60       	ori	r18, 0x01	; 1
    113e:	2d c0       	rjmp	.+90     	; 0x119a <vfprintf+0xe4>
    1140:	39 2d       	mov	r19, r9
    1142:	32 60       	ori	r19, 0x02	; 2
    1144:	93 2e       	mov	r9, r19
    1146:	89 2d       	mov	r24, r9
    1148:	84 60       	ori	r24, 0x04	; 4
    114a:	98 2e       	mov	r9, r24
    114c:	2a c0       	rjmp	.+84     	; 0x11a2 <vfprintf+0xec>
    114e:	e9 2d       	mov	r30, r9
    1150:	e8 60       	ori	r30, 0x08	; 8
    1152:	15 c0       	rjmp	.+42     	; 0x117e <vfprintf+0xc8>
    1154:	97 fc       	sbrc	r9, 7
    1156:	2d c0       	rjmp	.+90     	; 0x11b2 <vfprintf+0xfc>
    1158:	20 ed       	ldi	r18, 0xD0	; 208
    115a:	28 0f       	add	r18, r24
    115c:	2a 30       	cpi	r18, 0x0A	; 10
    115e:	88 f4       	brcc	.+34     	; 0x1182 <vfprintf+0xcc>
    1160:	96 fe       	sbrs	r9, 6
    1162:	06 c0       	rjmp	.+12     	; 0x1170 <vfprintf+0xba>
    1164:	3a e0       	ldi	r19, 0x0A	; 10
    1166:	13 9f       	mul	r17, r19
    1168:	20 0d       	add	r18, r0
    116a:	11 24       	eor	r1, r1
    116c:	12 2f       	mov	r17, r18
    116e:	19 c0       	rjmp	.+50     	; 0x11a2 <vfprintf+0xec>
    1170:	8a e0       	ldi	r24, 0x0A	; 10
    1172:	58 9e       	mul	r5, r24
    1174:	20 0d       	add	r18, r0
    1176:	11 24       	eor	r1, r1
    1178:	52 2e       	mov	r5, r18
    117a:	e9 2d       	mov	r30, r9
    117c:	e0 62       	ori	r30, 0x20	; 32
    117e:	9e 2e       	mov	r9, r30
    1180:	10 c0       	rjmp	.+32     	; 0x11a2 <vfprintf+0xec>
    1182:	8e 32       	cpi	r24, 0x2E	; 46
    1184:	31 f4       	brne	.+12     	; 0x1192 <vfprintf+0xdc>
    1186:	96 fc       	sbrc	r9, 6
    1188:	e5 c2       	rjmp	.+1482   	; 0x1754 <vfprintf+0x69e>
    118a:	f9 2d       	mov	r31, r9
    118c:	f0 64       	ori	r31, 0x40	; 64
    118e:	9f 2e       	mov	r9, r31
    1190:	08 c0       	rjmp	.+16     	; 0x11a2 <vfprintf+0xec>
    1192:	8c 36       	cpi	r24, 0x6C	; 108
    1194:	21 f4       	brne	.+8      	; 0x119e <vfprintf+0xe8>
    1196:	29 2d       	mov	r18, r9
    1198:	20 68       	ori	r18, 0x80	; 128
    119a:	92 2e       	mov	r9, r18
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <vfprintf+0xec>
    119e:	88 36       	cpi	r24, 0x68	; 104
    11a0:	41 f4       	brne	.+16     	; 0x11b2 <vfprintf+0xfc>
    11a2:	f1 01       	movw	r30, r2
    11a4:	93 fd       	sbrc	r25, 3
    11a6:	85 91       	lpm	r24, Z+
    11a8:	93 ff       	sbrs	r25, 3
    11aa:	81 91       	ld	r24, Z+
    11ac:	1f 01       	movw	r2, r30
    11ae:	81 11       	cpse	r24, r1
    11b0:	b3 cf       	rjmp	.-154    	; 0x1118 <vfprintf+0x62>
    11b2:	9b eb       	ldi	r25, 0xBB	; 187
    11b4:	98 0f       	add	r25, r24
    11b6:	93 30       	cpi	r25, 0x03	; 3
    11b8:	20 f4       	brcc	.+8      	; 0x11c2 <vfprintf+0x10c>
    11ba:	99 2d       	mov	r25, r9
    11bc:	90 61       	ori	r25, 0x10	; 16
    11be:	80 5e       	subi	r24, 0xE0	; 224
    11c0:	07 c0       	rjmp	.+14     	; 0x11d0 <vfprintf+0x11a>
    11c2:	9b e9       	ldi	r25, 0x9B	; 155
    11c4:	98 0f       	add	r25, r24
    11c6:	93 30       	cpi	r25, 0x03	; 3
    11c8:	08 f0       	brcs	.+2      	; 0x11cc <vfprintf+0x116>
    11ca:	66 c1       	rjmp	.+716    	; 0x1498 <vfprintf+0x3e2>
    11cc:	99 2d       	mov	r25, r9
    11ce:	9f 7e       	andi	r25, 0xEF	; 239
    11d0:	96 ff       	sbrs	r25, 6
    11d2:	16 e0       	ldi	r17, 0x06	; 6
    11d4:	9f 73       	andi	r25, 0x3F	; 63
    11d6:	99 2e       	mov	r9, r25
    11d8:	85 36       	cpi	r24, 0x65	; 101
    11da:	19 f4       	brne	.+6      	; 0x11e2 <vfprintf+0x12c>
    11dc:	90 64       	ori	r25, 0x40	; 64
    11de:	99 2e       	mov	r9, r25
    11e0:	08 c0       	rjmp	.+16     	; 0x11f2 <vfprintf+0x13c>
    11e2:	86 36       	cpi	r24, 0x66	; 102
    11e4:	21 f4       	brne	.+8      	; 0x11ee <vfprintf+0x138>
    11e6:	39 2f       	mov	r19, r25
    11e8:	30 68       	ori	r19, 0x80	; 128
    11ea:	93 2e       	mov	r9, r19
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <vfprintf+0x13c>
    11ee:	11 11       	cpse	r17, r1
    11f0:	11 50       	subi	r17, 0x01	; 1
    11f2:	97 fe       	sbrs	r9, 7
    11f4:	07 c0       	rjmp	.+14     	; 0x1204 <vfprintf+0x14e>
    11f6:	1c 33       	cpi	r17, 0x3C	; 60
    11f8:	50 f4       	brcc	.+20     	; 0x120e <vfprintf+0x158>
    11fa:	44 24       	eor	r4, r4
    11fc:	43 94       	inc	r4
    11fe:	41 0e       	add	r4, r17
    1200:	27 e0       	ldi	r18, 0x07	; 7
    1202:	0b c0       	rjmp	.+22     	; 0x121a <vfprintf+0x164>
    1204:	18 30       	cpi	r17, 0x08	; 8
    1206:	38 f0       	brcs	.+14     	; 0x1216 <vfprintf+0x160>
    1208:	27 e0       	ldi	r18, 0x07	; 7
    120a:	17 e0       	ldi	r17, 0x07	; 7
    120c:	05 c0       	rjmp	.+10     	; 0x1218 <vfprintf+0x162>
    120e:	27 e0       	ldi	r18, 0x07	; 7
    1210:	9c e3       	ldi	r25, 0x3C	; 60
    1212:	49 2e       	mov	r4, r25
    1214:	02 c0       	rjmp	.+4      	; 0x121a <vfprintf+0x164>
    1216:	21 2f       	mov	r18, r17
    1218:	41 2c       	mov	r4, r1
    121a:	56 01       	movw	r10, r12
    121c:	84 e0       	ldi	r24, 0x04	; 4
    121e:	a8 0e       	add	r10, r24
    1220:	b1 1c       	adc	r11, r1
    1222:	f6 01       	movw	r30, r12
    1224:	60 81       	ld	r22, Z
    1226:	71 81       	ldd	r23, Z+1	; 0x01
    1228:	82 81       	ldd	r24, Z+2	; 0x02
    122a:	93 81       	ldd	r25, Z+3	; 0x03
    122c:	04 2d       	mov	r16, r4
    122e:	a3 01       	movw	r20, r6
    1230:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__ftoa_engine>
    1234:	6c 01       	movw	r12, r24
    1236:	f9 81       	ldd	r31, Y+1	; 0x01
    1238:	fc 87       	std	Y+12, r31	; 0x0c
    123a:	f0 ff       	sbrs	r31, 0
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <vfprintf+0x18c>
    123e:	f3 ff       	sbrs	r31, 3
    1240:	06 c0       	rjmp	.+12     	; 0x124e <vfprintf+0x198>
    1242:	91 fc       	sbrc	r9, 1
    1244:	06 c0       	rjmp	.+12     	; 0x1252 <vfprintf+0x19c>
    1246:	92 fe       	sbrs	r9, 2
    1248:	06 c0       	rjmp	.+12     	; 0x1256 <vfprintf+0x1a0>
    124a:	00 e2       	ldi	r16, 0x20	; 32
    124c:	05 c0       	rjmp	.+10     	; 0x1258 <vfprintf+0x1a2>
    124e:	0d e2       	ldi	r16, 0x2D	; 45
    1250:	03 c0       	rjmp	.+6      	; 0x1258 <vfprintf+0x1a2>
    1252:	0b e2       	ldi	r16, 0x2B	; 43
    1254:	01 c0       	rjmp	.+2      	; 0x1258 <vfprintf+0x1a2>
    1256:	00 e0       	ldi	r16, 0x00	; 0
    1258:	8c 85       	ldd	r24, Y+12	; 0x0c
    125a:	8c 70       	andi	r24, 0x0C	; 12
    125c:	19 f0       	breq	.+6      	; 0x1264 <vfprintf+0x1ae>
    125e:	01 11       	cpse	r16, r1
    1260:	5a c2       	rjmp	.+1204   	; 0x1716 <vfprintf+0x660>
    1262:	9b c2       	rjmp	.+1334   	; 0x179a <vfprintf+0x6e4>
    1264:	97 fe       	sbrs	r9, 7
    1266:	10 c0       	rjmp	.+32     	; 0x1288 <vfprintf+0x1d2>
    1268:	4c 0c       	add	r4, r12
    126a:	fc 85       	ldd	r31, Y+12	; 0x0c
    126c:	f4 ff       	sbrs	r31, 4
    126e:	04 c0       	rjmp	.+8      	; 0x1278 <vfprintf+0x1c2>
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	81 33       	cpi	r24, 0x31	; 49
    1274:	09 f4       	brne	.+2      	; 0x1278 <vfprintf+0x1c2>
    1276:	4a 94       	dec	r4
    1278:	14 14       	cp	r1, r4
    127a:	74 f5       	brge	.+92     	; 0x12d8 <vfprintf+0x222>
    127c:	28 e0       	ldi	r18, 0x08	; 8
    127e:	24 15       	cp	r18, r4
    1280:	78 f5       	brcc	.+94     	; 0x12e0 <vfprintf+0x22a>
    1282:	88 e0       	ldi	r24, 0x08	; 8
    1284:	48 2e       	mov	r4, r24
    1286:	2c c0       	rjmp	.+88     	; 0x12e0 <vfprintf+0x22a>
    1288:	96 fc       	sbrc	r9, 6
    128a:	2a c0       	rjmp	.+84     	; 0x12e0 <vfprintf+0x22a>
    128c:	81 2f       	mov	r24, r17
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	8c 15       	cp	r24, r12
    1292:	9d 05       	cpc	r25, r13
    1294:	9c f0       	brlt	.+38     	; 0x12bc <vfprintf+0x206>
    1296:	3c ef       	ldi	r19, 0xFC	; 252
    1298:	c3 16       	cp	r12, r19
    129a:	3f ef       	ldi	r19, 0xFF	; 255
    129c:	d3 06       	cpc	r13, r19
    129e:	74 f0       	brlt	.+28     	; 0x12bc <vfprintf+0x206>
    12a0:	89 2d       	mov	r24, r9
    12a2:	80 68       	ori	r24, 0x80	; 128
    12a4:	98 2e       	mov	r9, r24
    12a6:	0a c0       	rjmp	.+20     	; 0x12bc <vfprintf+0x206>
    12a8:	e2 e0       	ldi	r30, 0x02	; 2
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	ec 0f       	add	r30, r28
    12ae:	fd 1f       	adc	r31, r29
    12b0:	e1 0f       	add	r30, r17
    12b2:	f1 1d       	adc	r31, r1
    12b4:	80 81       	ld	r24, Z
    12b6:	80 33       	cpi	r24, 0x30	; 48
    12b8:	19 f4       	brne	.+6      	; 0x12c0 <vfprintf+0x20a>
    12ba:	11 50       	subi	r17, 0x01	; 1
    12bc:	11 11       	cpse	r17, r1
    12be:	f4 cf       	rjmp	.-24     	; 0x12a8 <vfprintf+0x1f2>
    12c0:	97 fe       	sbrs	r9, 7
    12c2:	0e c0       	rjmp	.+28     	; 0x12e0 <vfprintf+0x22a>
    12c4:	44 24       	eor	r4, r4
    12c6:	43 94       	inc	r4
    12c8:	41 0e       	add	r4, r17
    12ca:	81 2f       	mov	r24, r17
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	c8 16       	cp	r12, r24
    12d0:	d9 06       	cpc	r13, r25
    12d2:	2c f4       	brge	.+10     	; 0x12de <vfprintf+0x228>
    12d4:	1c 19       	sub	r17, r12
    12d6:	04 c0       	rjmp	.+8      	; 0x12e0 <vfprintf+0x22a>
    12d8:	44 24       	eor	r4, r4
    12da:	43 94       	inc	r4
    12dc:	01 c0       	rjmp	.+2      	; 0x12e0 <vfprintf+0x22a>
    12de:	10 e0       	ldi	r17, 0x00	; 0
    12e0:	97 fe       	sbrs	r9, 7
    12e2:	06 c0       	rjmp	.+12     	; 0x12f0 <vfprintf+0x23a>
    12e4:	1c 14       	cp	r1, r12
    12e6:	1d 04       	cpc	r1, r13
    12e8:	34 f4       	brge	.+12     	; 0x12f6 <vfprintf+0x240>
    12ea:	c6 01       	movw	r24, r12
    12ec:	01 96       	adiw	r24, 0x01	; 1
    12ee:	05 c0       	rjmp	.+10     	; 0x12fa <vfprintf+0x244>
    12f0:	85 e0       	ldi	r24, 0x05	; 5
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <vfprintf+0x244>
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	01 11       	cpse	r16, r1
    12fc:	01 96       	adiw	r24, 0x01	; 1
    12fe:	11 23       	and	r17, r17
    1300:	31 f0       	breq	.+12     	; 0x130e <vfprintf+0x258>
    1302:	21 2f       	mov	r18, r17
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	2f 5f       	subi	r18, 0xFF	; 255
    1308:	3f 4f       	sbci	r19, 0xFF	; 255
    130a:	82 0f       	add	r24, r18
    130c:	93 1f       	adc	r25, r19
    130e:	25 2d       	mov	r18, r5
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	82 17       	cp	r24, r18
    1314:	93 07       	cpc	r25, r19
    1316:	14 f4       	brge	.+4      	; 0x131c <vfprintf+0x266>
    1318:	58 1a       	sub	r5, r24
    131a:	01 c0       	rjmp	.+2      	; 0x131e <vfprintf+0x268>
    131c:	51 2c       	mov	r5, r1
    131e:	89 2d       	mov	r24, r9
    1320:	89 70       	andi	r24, 0x09	; 9
    1322:	49 f4       	brne	.+18     	; 0x1336 <vfprintf+0x280>
    1324:	55 20       	and	r5, r5
    1326:	39 f0       	breq	.+14     	; 0x1336 <vfprintf+0x280>
    1328:	b7 01       	movw	r22, r14
    132a:	80 e2       	ldi	r24, 0x20	; 32
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fputc>
    1332:	5a 94       	dec	r5
    1334:	f7 cf       	rjmp	.-18     	; 0x1324 <vfprintf+0x26e>
    1336:	00 23       	and	r16, r16
    1338:	29 f0       	breq	.+10     	; 0x1344 <vfprintf+0x28e>
    133a:	b7 01       	movw	r22, r14
    133c:	80 2f       	mov	r24, r16
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fputc>
    1344:	93 fc       	sbrc	r9, 3
    1346:	09 c0       	rjmp	.+18     	; 0x135a <vfprintf+0x2a4>
    1348:	55 20       	and	r5, r5
    134a:	39 f0       	breq	.+14     	; 0x135a <vfprintf+0x2a4>
    134c:	b7 01       	movw	r22, r14
    134e:	80 e3       	ldi	r24, 0x30	; 48
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fputc>
    1356:	5a 94       	dec	r5
    1358:	f7 cf       	rjmp	.-18     	; 0x1348 <vfprintf+0x292>
    135a:	97 fe       	sbrs	r9, 7
    135c:	4c c0       	rjmp	.+152    	; 0x13f6 <vfprintf+0x340>
    135e:	46 01       	movw	r8, r12
    1360:	d7 fe       	sbrs	r13, 7
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <vfprintf+0x2b2>
    1364:	81 2c       	mov	r8, r1
    1366:	91 2c       	mov	r9, r1
    1368:	c6 01       	movw	r24, r12
    136a:	88 19       	sub	r24, r8
    136c:	99 09       	sbc	r25, r9
    136e:	f3 01       	movw	r30, r6
    1370:	e8 0f       	add	r30, r24
    1372:	f9 1f       	adc	r31, r25
    1374:	fe 87       	std	Y+14, r31	; 0x0e
    1376:	ed 87       	std	Y+13, r30	; 0x0d
    1378:	96 01       	movw	r18, r12
    137a:	24 19       	sub	r18, r4
    137c:	31 09       	sbc	r19, r1
    137e:	38 8b       	std	Y+16, r19	; 0x10
    1380:	2f 87       	std	Y+15, r18	; 0x0f
    1382:	01 2f       	mov	r16, r17
    1384:	10 e0       	ldi	r17, 0x00	; 0
    1386:	11 95       	neg	r17
    1388:	01 95       	neg	r16
    138a:	11 09       	sbc	r17, r1
    138c:	3f ef       	ldi	r19, 0xFF	; 255
    138e:	83 16       	cp	r8, r19
    1390:	93 06       	cpc	r9, r19
    1392:	29 f4       	brne	.+10     	; 0x139e <vfprintf+0x2e8>
    1394:	b7 01       	movw	r22, r14
    1396:	8e e2       	ldi	r24, 0x2E	; 46
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fputc>
    139e:	c8 14       	cp	r12, r8
    13a0:	d9 04       	cpc	r13, r9
    13a2:	4c f0       	brlt	.+18     	; 0x13b6 <vfprintf+0x300>
    13a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    13a6:	98 89       	ldd	r25, Y+16	; 0x10
    13a8:	88 15       	cp	r24, r8
    13aa:	99 05       	cpc	r25, r9
    13ac:	24 f4       	brge	.+8      	; 0x13b6 <vfprintf+0x300>
    13ae:	ed 85       	ldd	r30, Y+13	; 0x0d
    13b0:	fe 85       	ldd	r31, Y+14	; 0x0e
    13b2:	81 81       	ldd	r24, Z+1	; 0x01
    13b4:	01 c0       	rjmp	.+2      	; 0x13b8 <vfprintf+0x302>
    13b6:	80 e3       	ldi	r24, 0x30	; 48
    13b8:	f1 e0       	ldi	r31, 0x01	; 1
    13ba:	8f 1a       	sub	r8, r31
    13bc:	91 08       	sbc	r9, r1
    13be:	2d 85       	ldd	r18, Y+13	; 0x0d
    13c0:	3e 85       	ldd	r19, Y+14	; 0x0e
    13c2:	2f 5f       	subi	r18, 0xFF	; 255
    13c4:	3f 4f       	sbci	r19, 0xFF	; 255
    13c6:	3e 87       	std	Y+14, r19	; 0x0e
    13c8:	2d 87       	std	Y+13, r18	; 0x0d
    13ca:	80 16       	cp	r8, r16
    13cc:	91 06       	cpc	r9, r17
    13ce:	2c f0       	brlt	.+10     	; 0x13da <vfprintf+0x324>
    13d0:	b7 01       	movw	r22, r14
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fputc>
    13d8:	d9 cf       	rjmp	.-78     	; 0x138c <vfprintf+0x2d6>
    13da:	c8 14       	cp	r12, r8
    13dc:	d9 04       	cpc	r13, r9
    13de:	41 f4       	brne	.+16     	; 0x13f0 <vfprintf+0x33a>
    13e0:	9a 81       	ldd	r25, Y+2	; 0x02
    13e2:	96 33       	cpi	r25, 0x36	; 54
    13e4:	20 f4       	brcc	.+8      	; 0x13ee <vfprintf+0x338>
    13e6:	95 33       	cpi	r25, 0x35	; 53
    13e8:	19 f4       	brne	.+6      	; 0x13f0 <vfprintf+0x33a>
    13ea:	3c 85       	ldd	r19, Y+12	; 0x0c
    13ec:	34 ff       	sbrs	r19, 4
    13ee:	81 e3       	ldi	r24, 0x31	; 49
    13f0:	b7 01       	movw	r22, r14
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	4e c0       	rjmp	.+156    	; 0x1492 <vfprintf+0x3dc>
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	81 33       	cpi	r24, 0x31	; 49
    13fa:	19 f0       	breq	.+6      	; 0x1402 <vfprintf+0x34c>
    13fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    13fe:	9f 7e       	andi	r25, 0xEF	; 239
    1400:	9c 87       	std	Y+12, r25	; 0x0c
    1402:	b7 01       	movw	r22, r14
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fputc>
    140a:	11 11       	cpse	r17, r1
    140c:	05 c0       	rjmp	.+10     	; 0x1418 <vfprintf+0x362>
    140e:	94 fc       	sbrc	r9, 4
    1410:	18 c0       	rjmp	.+48     	; 0x1442 <vfprintf+0x38c>
    1412:	85 e6       	ldi	r24, 0x65	; 101
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	17 c0       	rjmp	.+46     	; 0x1446 <vfprintf+0x390>
    1418:	b7 01       	movw	r22, r14
    141a:	8e e2       	ldi	r24, 0x2E	; 46
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fputc>
    1422:	1e 5f       	subi	r17, 0xFE	; 254
    1424:	82 e0       	ldi	r24, 0x02	; 2
    1426:	01 e0       	ldi	r16, 0x01	; 1
    1428:	08 0f       	add	r16, r24
    142a:	f3 01       	movw	r30, r6
    142c:	e8 0f       	add	r30, r24
    142e:	f1 1d       	adc	r31, r1
    1430:	80 81       	ld	r24, Z
    1432:	b7 01       	movw	r22, r14
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fputc>
    143a:	80 2f       	mov	r24, r16
    143c:	01 13       	cpse	r16, r17
    143e:	f3 cf       	rjmp	.-26     	; 0x1426 <vfprintf+0x370>
    1440:	e6 cf       	rjmp	.-52     	; 0x140e <vfprintf+0x358>
    1442:	85 e4       	ldi	r24, 0x45	; 69
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	b7 01       	movw	r22, r14
    1448:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fputc>
    144c:	d7 fc       	sbrc	r13, 7
    144e:	06 c0       	rjmp	.+12     	; 0x145c <vfprintf+0x3a6>
    1450:	c1 14       	cp	r12, r1
    1452:	d1 04       	cpc	r13, r1
    1454:	41 f4       	brne	.+16     	; 0x1466 <vfprintf+0x3b0>
    1456:	ec 85       	ldd	r30, Y+12	; 0x0c
    1458:	e4 ff       	sbrs	r30, 4
    145a:	05 c0       	rjmp	.+10     	; 0x1466 <vfprintf+0x3b0>
    145c:	d1 94       	neg	r13
    145e:	c1 94       	neg	r12
    1460:	d1 08       	sbc	r13, r1
    1462:	8d e2       	ldi	r24, 0x2D	; 45
    1464:	01 c0       	rjmp	.+2      	; 0x1468 <vfprintf+0x3b2>
    1466:	8b e2       	ldi	r24, 0x2B	; 43
    1468:	b7 01       	movw	r22, r14
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fputc>
    1470:	80 e3       	ldi	r24, 0x30	; 48
    1472:	2a e0       	ldi	r18, 0x0A	; 10
    1474:	c2 16       	cp	r12, r18
    1476:	d1 04       	cpc	r13, r1
    1478:	2c f0       	brlt	.+10     	; 0x1484 <vfprintf+0x3ce>
    147a:	8f 5f       	subi	r24, 0xFF	; 255
    147c:	fa e0       	ldi	r31, 0x0A	; 10
    147e:	cf 1a       	sub	r12, r31
    1480:	d1 08       	sbc	r13, r1
    1482:	f7 cf       	rjmp	.-18     	; 0x1472 <vfprintf+0x3bc>
    1484:	b7 01       	movw	r22, r14
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fputc>
    148c:	b7 01       	movw	r22, r14
    148e:	c6 01       	movw	r24, r12
    1490:	c0 96       	adiw	r24, 0x30	; 48
    1492:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fputc>
    1496:	54 c1       	rjmp	.+680    	; 0x1740 <vfprintf+0x68a>
    1498:	83 36       	cpi	r24, 0x63	; 99
    149a:	31 f0       	breq	.+12     	; 0x14a8 <vfprintf+0x3f2>
    149c:	83 37       	cpi	r24, 0x73	; 115
    149e:	79 f0       	breq	.+30     	; 0x14be <vfprintf+0x408>
    14a0:	83 35       	cpi	r24, 0x53	; 83
    14a2:	09 f0       	breq	.+2      	; 0x14a6 <vfprintf+0x3f0>
    14a4:	56 c0       	rjmp	.+172    	; 0x1552 <vfprintf+0x49c>
    14a6:	20 c0       	rjmp	.+64     	; 0x14e8 <vfprintf+0x432>
    14a8:	56 01       	movw	r10, r12
    14aa:	32 e0       	ldi	r19, 0x02	; 2
    14ac:	a3 0e       	add	r10, r19
    14ae:	b1 1c       	adc	r11, r1
    14b0:	f6 01       	movw	r30, r12
    14b2:	80 81       	ld	r24, Z
    14b4:	89 83       	std	Y+1, r24	; 0x01
    14b6:	01 e0       	ldi	r16, 0x01	; 1
    14b8:	10 e0       	ldi	r17, 0x00	; 0
    14ba:	63 01       	movw	r12, r6
    14bc:	12 c0       	rjmp	.+36     	; 0x14e2 <vfprintf+0x42c>
    14be:	56 01       	movw	r10, r12
    14c0:	f2 e0       	ldi	r31, 0x02	; 2
    14c2:	af 0e       	add	r10, r31
    14c4:	b1 1c       	adc	r11, r1
    14c6:	f6 01       	movw	r30, r12
    14c8:	c0 80       	ld	r12, Z
    14ca:	d1 80       	ldd	r13, Z+1	; 0x01
    14cc:	96 fe       	sbrs	r9, 6
    14ce:	03 c0       	rjmp	.+6      	; 0x14d6 <vfprintf+0x420>
    14d0:	61 2f       	mov	r22, r17
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <vfprintf+0x424>
    14d6:	6f ef       	ldi	r22, 0xFF	; 255
    14d8:	7f ef       	ldi	r23, 0xFF	; 255
    14da:	c6 01       	movw	r24, r12
    14dc:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <strnlen>
    14e0:	8c 01       	movw	r16, r24
    14e2:	f9 2d       	mov	r31, r9
    14e4:	ff 77       	andi	r31, 0x7F	; 127
    14e6:	14 c0       	rjmp	.+40     	; 0x1510 <vfprintf+0x45a>
    14e8:	56 01       	movw	r10, r12
    14ea:	22 e0       	ldi	r18, 0x02	; 2
    14ec:	a2 0e       	add	r10, r18
    14ee:	b1 1c       	adc	r11, r1
    14f0:	f6 01       	movw	r30, r12
    14f2:	c0 80       	ld	r12, Z
    14f4:	d1 80       	ldd	r13, Z+1	; 0x01
    14f6:	96 fe       	sbrs	r9, 6
    14f8:	03 c0       	rjmp	.+6      	; 0x1500 <vfprintf+0x44a>
    14fa:	61 2f       	mov	r22, r17
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <vfprintf+0x44e>
    1500:	6f ef       	ldi	r22, 0xFF	; 255
    1502:	7f ef       	ldi	r23, 0xFF	; 255
    1504:	c6 01       	movw	r24, r12
    1506:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <strnlen_P>
    150a:	8c 01       	movw	r16, r24
    150c:	f9 2d       	mov	r31, r9
    150e:	f0 68       	ori	r31, 0x80	; 128
    1510:	9f 2e       	mov	r9, r31
    1512:	f3 fd       	sbrc	r31, 3
    1514:	1a c0       	rjmp	.+52     	; 0x154a <vfprintf+0x494>
    1516:	85 2d       	mov	r24, r5
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	08 17       	cp	r16, r24
    151c:	19 07       	cpc	r17, r25
    151e:	a8 f4       	brcc	.+42     	; 0x154a <vfprintf+0x494>
    1520:	b7 01       	movw	r22, r14
    1522:	80 e2       	ldi	r24, 0x20	; 32
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fputc>
    152a:	5a 94       	dec	r5
    152c:	f4 cf       	rjmp	.-24     	; 0x1516 <vfprintf+0x460>
    152e:	f6 01       	movw	r30, r12
    1530:	97 fc       	sbrc	r9, 7
    1532:	85 91       	lpm	r24, Z+
    1534:	97 fe       	sbrs	r9, 7
    1536:	81 91       	ld	r24, Z+
    1538:	6f 01       	movw	r12, r30
    153a:	b7 01       	movw	r22, r14
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fputc>
    1542:	51 10       	cpse	r5, r1
    1544:	5a 94       	dec	r5
    1546:	01 50       	subi	r16, 0x01	; 1
    1548:	11 09       	sbc	r17, r1
    154a:	01 15       	cp	r16, r1
    154c:	11 05       	cpc	r17, r1
    154e:	79 f7       	brne	.-34     	; 0x152e <vfprintf+0x478>
    1550:	f7 c0       	rjmp	.+494    	; 0x1740 <vfprintf+0x68a>
    1552:	84 36       	cpi	r24, 0x64	; 100
    1554:	11 f0       	breq	.+4      	; 0x155a <vfprintf+0x4a4>
    1556:	89 36       	cpi	r24, 0x69	; 105
    1558:	61 f5       	brne	.+88     	; 0x15b2 <vfprintf+0x4fc>
    155a:	56 01       	movw	r10, r12
    155c:	97 fe       	sbrs	r9, 7
    155e:	09 c0       	rjmp	.+18     	; 0x1572 <vfprintf+0x4bc>
    1560:	24 e0       	ldi	r18, 0x04	; 4
    1562:	a2 0e       	add	r10, r18
    1564:	b1 1c       	adc	r11, r1
    1566:	f6 01       	movw	r30, r12
    1568:	60 81       	ld	r22, Z
    156a:	71 81       	ldd	r23, Z+1	; 0x01
    156c:	82 81       	ldd	r24, Z+2	; 0x02
    156e:	93 81       	ldd	r25, Z+3	; 0x03
    1570:	0a c0       	rjmp	.+20     	; 0x1586 <vfprintf+0x4d0>
    1572:	f2 e0       	ldi	r31, 0x02	; 2
    1574:	af 0e       	add	r10, r31
    1576:	b1 1c       	adc	r11, r1
    1578:	f6 01       	movw	r30, r12
    157a:	60 81       	ld	r22, Z
    157c:	71 81       	ldd	r23, Z+1	; 0x01
    157e:	07 2e       	mov	r0, r23
    1580:	00 0c       	add	r0, r0
    1582:	88 0b       	sbc	r24, r24
    1584:	99 0b       	sbc	r25, r25
    1586:	f9 2d       	mov	r31, r9
    1588:	ff 76       	andi	r31, 0x6F	; 111
    158a:	9f 2e       	mov	r9, r31
    158c:	97 ff       	sbrs	r25, 7
    158e:	09 c0       	rjmp	.+18     	; 0x15a2 <vfprintf+0x4ec>
    1590:	90 95       	com	r25
    1592:	80 95       	com	r24
    1594:	70 95       	com	r23
    1596:	61 95       	neg	r22
    1598:	7f 4f       	sbci	r23, 0xFF	; 255
    159a:	8f 4f       	sbci	r24, 0xFF	; 255
    159c:	9f 4f       	sbci	r25, 0xFF	; 255
    159e:	f0 68       	ori	r31, 0x80	; 128
    15a0:	9f 2e       	mov	r9, r31
    15a2:	2a e0       	ldi	r18, 0x0A	; 10
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	a3 01       	movw	r20, r6
    15a8:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__ultoa_invert>
    15ac:	c8 2e       	mov	r12, r24
    15ae:	c6 18       	sub	r12, r6
    15b0:	3f c0       	rjmp	.+126    	; 0x1630 <vfprintf+0x57a>
    15b2:	09 2d       	mov	r16, r9
    15b4:	85 37       	cpi	r24, 0x75	; 117
    15b6:	21 f4       	brne	.+8      	; 0x15c0 <vfprintf+0x50a>
    15b8:	0f 7e       	andi	r16, 0xEF	; 239
    15ba:	2a e0       	ldi	r18, 0x0A	; 10
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	1d c0       	rjmp	.+58     	; 0x15fa <vfprintf+0x544>
    15c0:	09 7f       	andi	r16, 0xF9	; 249
    15c2:	8f 36       	cpi	r24, 0x6F	; 111
    15c4:	91 f0       	breq	.+36     	; 0x15ea <vfprintf+0x534>
    15c6:	18 f4       	brcc	.+6      	; 0x15ce <vfprintf+0x518>
    15c8:	88 35       	cpi	r24, 0x58	; 88
    15ca:	59 f0       	breq	.+22     	; 0x15e2 <vfprintf+0x52c>
    15cc:	c3 c0       	rjmp	.+390    	; 0x1754 <vfprintf+0x69e>
    15ce:	80 37       	cpi	r24, 0x70	; 112
    15d0:	19 f0       	breq	.+6      	; 0x15d8 <vfprintf+0x522>
    15d2:	88 37       	cpi	r24, 0x78	; 120
    15d4:	11 f0       	breq	.+4      	; 0x15da <vfprintf+0x524>
    15d6:	be c0       	rjmp	.+380    	; 0x1754 <vfprintf+0x69e>
    15d8:	00 61       	ori	r16, 0x10	; 16
    15da:	04 ff       	sbrs	r16, 4
    15dc:	09 c0       	rjmp	.+18     	; 0x15f0 <vfprintf+0x53a>
    15de:	04 60       	ori	r16, 0x04	; 4
    15e0:	07 c0       	rjmp	.+14     	; 0x15f0 <vfprintf+0x53a>
    15e2:	94 fe       	sbrs	r9, 4
    15e4:	08 c0       	rjmp	.+16     	; 0x15f6 <vfprintf+0x540>
    15e6:	06 60       	ori	r16, 0x06	; 6
    15e8:	06 c0       	rjmp	.+12     	; 0x15f6 <vfprintf+0x540>
    15ea:	28 e0       	ldi	r18, 0x08	; 8
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	05 c0       	rjmp	.+10     	; 0x15fa <vfprintf+0x544>
    15f0:	20 e1       	ldi	r18, 0x10	; 16
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <vfprintf+0x544>
    15f6:	20 e1       	ldi	r18, 0x10	; 16
    15f8:	32 e0       	ldi	r19, 0x02	; 2
    15fa:	56 01       	movw	r10, r12
    15fc:	07 ff       	sbrs	r16, 7
    15fe:	09 c0       	rjmp	.+18     	; 0x1612 <vfprintf+0x55c>
    1600:	84 e0       	ldi	r24, 0x04	; 4
    1602:	a8 0e       	add	r10, r24
    1604:	b1 1c       	adc	r11, r1
    1606:	f6 01       	movw	r30, r12
    1608:	60 81       	ld	r22, Z
    160a:	71 81       	ldd	r23, Z+1	; 0x01
    160c:	82 81       	ldd	r24, Z+2	; 0x02
    160e:	93 81       	ldd	r25, Z+3	; 0x03
    1610:	08 c0       	rjmp	.+16     	; 0x1622 <vfprintf+0x56c>
    1612:	f2 e0       	ldi	r31, 0x02	; 2
    1614:	af 0e       	add	r10, r31
    1616:	b1 1c       	adc	r11, r1
    1618:	f6 01       	movw	r30, r12
    161a:	60 81       	ld	r22, Z
    161c:	71 81       	ldd	r23, Z+1	; 0x01
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	a3 01       	movw	r20, r6
    1624:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__ultoa_invert>
    1628:	c8 2e       	mov	r12, r24
    162a:	c6 18       	sub	r12, r6
    162c:	0f 77       	andi	r16, 0x7F	; 127
    162e:	90 2e       	mov	r9, r16
    1630:	96 fe       	sbrs	r9, 6
    1632:	0b c0       	rjmp	.+22     	; 0x164a <vfprintf+0x594>
    1634:	09 2d       	mov	r16, r9
    1636:	0e 7f       	andi	r16, 0xFE	; 254
    1638:	c1 16       	cp	r12, r17
    163a:	50 f4       	brcc	.+20     	; 0x1650 <vfprintf+0x59a>
    163c:	94 fe       	sbrs	r9, 4
    163e:	0a c0       	rjmp	.+20     	; 0x1654 <vfprintf+0x59e>
    1640:	92 fc       	sbrc	r9, 2
    1642:	08 c0       	rjmp	.+16     	; 0x1654 <vfprintf+0x59e>
    1644:	09 2d       	mov	r16, r9
    1646:	0e 7e       	andi	r16, 0xEE	; 238
    1648:	05 c0       	rjmp	.+10     	; 0x1654 <vfprintf+0x59e>
    164a:	dc 2c       	mov	r13, r12
    164c:	09 2d       	mov	r16, r9
    164e:	03 c0       	rjmp	.+6      	; 0x1656 <vfprintf+0x5a0>
    1650:	dc 2c       	mov	r13, r12
    1652:	01 c0       	rjmp	.+2      	; 0x1656 <vfprintf+0x5a0>
    1654:	d1 2e       	mov	r13, r17
    1656:	04 ff       	sbrs	r16, 4
    1658:	0d c0       	rjmp	.+26     	; 0x1674 <vfprintf+0x5be>
    165a:	fe 01       	movw	r30, r28
    165c:	ec 0d       	add	r30, r12
    165e:	f1 1d       	adc	r31, r1
    1660:	80 81       	ld	r24, Z
    1662:	80 33       	cpi	r24, 0x30	; 48
    1664:	11 f4       	brne	.+4      	; 0x166a <vfprintf+0x5b4>
    1666:	09 7e       	andi	r16, 0xE9	; 233
    1668:	09 c0       	rjmp	.+18     	; 0x167c <vfprintf+0x5c6>
    166a:	02 ff       	sbrs	r16, 2
    166c:	06 c0       	rjmp	.+12     	; 0x167a <vfprintf+0x5c4>
    166e:	d3 94       	inc	r13
    1670:	d3 94       	inc	r13
    1672:	04 c0       	rjmp	.+8      	; 0x167c <vfprintf+0x5c6>
    1674:	80 2f       	mov	r24, r16
    1676:	86 78       	andi	r24, 0x86	; 134
    1678:	09 f0       	breq	.+2      	; 0x167c <vfprintf+0x5c6>
    167a:	d3 94       	inc	r13
    167c:	03 fd       	sbrc	r16, 3
    167e:	11 c0       	rjmp	.+34     	; 0x16a2 <vfprintf+0x5ec>
    1680:	00 ff       	sbrs	r16, 0
    1682:	06 c0       	rjmp	.+12     	; 0x1690 <vfprintf+0x5da>
    1684:	1c 2d       	mov	r17, r12
    1686:	d5 14       	cp	r13, r5
    1688:	80 f4       	brcc	.+32     	; 0x16aa <vfprintf+0x5f4>
    168a:	15 0d       	add	r17, r5
    168c:	1d 19       	sub	r17, r13
    168e:	0d c0       	rjmp	.+26     	; 0x16aa <vfprintf+0x5f4>
    1690:	d5 14       	cp	r13, r5
    1692:	58 f4       	brcc	.+22     	; 0x16aa <vfprintf+0x5f4>
    1694:	b7 01       	movw	r22, r14
    1696:	80 e2       	ldi	r24, 0x20	; 32
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fputc>
    169e:	d3 94       	inc	r13
    16a0:	f7 cf       	rjmp	.-18     	; 0x1690 <vfprintf+0x5da>
    16a2:	d5 14       	cp	r13, r5
    16a4:	10 f4       	brcc	.+4      	; 0x16aa <vfprintf+0x5f4>
    16a6:	5d 18       	sub	r5, r13
    16a8:	01 c0       	rjmp	.+2      	; 0x16ac <vfprintf+0x5f6>
    16aa:	51 2c       	mov	r5, r1
    16ac:	04 ff       	sbrs	r16, 4
    16ae:	10 c0       	rjmp	.+32     	; 0x16d0 <vfprintf+0x61a>
    16b0:	b7 01       	movw	r22, r14
    16b2:	80 e3       	ldi	r24, 0x30	; 48
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fputc>
    16ba:	02 ff       	sbrs	r16, 2
    16bc:	17 c0       	rjmp	.+46     	; 0x16ec <vfprintf+0x636>
    16be:	01 fd       	sbrc	r16, 1
    16c0:	03 c0       	rjmp	.+6      	; 0x16c8 <vfprintf+0x612>
    16c2:	88 e7       	ldi	r24, 0x78	; 120
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <vfprintf+0x616>
    16c8:	88 e5       	ldi	r24, 0x58	; 88
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	b7 01       	movw	r22, r14
    16ce:	0c c0       	rjmp	.+24     	; 0x16e8 <vfprintf+0x632>
    16d0:	80 2f       	mov	r24, r16
    16d2:	86 78       	andi	r24, 0x86	; 134
    16d4:	59 f0       	breq	.+22     	; 0x16ec <vfprintf+0x636>
    16d6:	01 ff       	sbrs	r16, 1
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <vfprintf+0x628>
    16da:	8b e2       	ldi	r24, 0x2B	; 43
    16dc:	01 c0       	rjmp	.+2      	; 0x16e0 <vfprintf+0x62a>
    16de:	80 e2       	ldi	r24, 0x20	; 32
    16e0:	07 fd       	sbrc	r16, 7
    16e2:	8d e2       	ldi	r24, 0x2D	; 45
    16e4:	b7 01       	movw	r22, r14
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fputc>
    16ec:	c1 16       	cp	r12, r17
    16ee:	38 f4       	brcc	.+14     	; 0x16fe <vfprintf+0x648>
    16f0:	b7 01       	movw	r22, r14
    16f2:	80 e3       	ldi	r24, 0x30	; 48
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fputc>
    16fa:	11 50       	subi	r17, 0x01	; 1
    16fc:	f7 cf       	rjmp	.-18     	; 0x16ec <vfprintf+0x636>
    16fe:	ca 94       	dec	r12
    1700:	f3 01       	movw	r30, r6
    1702:	ec 0d       	add	r30, r12
    1704:	f1 1d       	adc	r31, r1
    1706:	80 81       	ld	r24, Z
    1708:	b7 01       	movw	r22, r14
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fputc>
    1710:	c1 10       	cpse	r12, r1
    1712:	f5 cf       	rjmp	.-22     	; 0x16fe <vfprintf+0x648>
    1714:	15 c0       	rjmp	.+42     	; 0x1740 <vfprintf+0x68a>
    1716:	f4 e0       	ldi	r31, 0x04	; 4
    1718:	f5 15       	cp	r31, r5
    171a:	60 f5       	brcc	.+88     	; 0x1774 <vfprintf+0x6be>
    171c:	84 e0       	ldi	r24, 0x04	; 4
    171e:	58 1a       	sub	r5, r24
    1720:	93 fe       	sbrs	r9, 3
    1722:	1f c0       	rjmp	.+62     	; 0x1762 <vfprintf+0x6ac>
    1724:	01 11       	cpse	r16, r1
    1726:	27 c0       	rjmp	.+78     	; 0x1776 <vfprintf+0x6c0>
    1728:	2c 85       	ldd	r18, Y+12	; 0x0c
    172a:	23 ff       	sbrs	r18, 3
    172c:	2a c0       	rjmp	.+84     	; 0x1782 <vfprintf+0x6cc>
    172e:	08 e6       	ldi	r16, 0x68	; 104
    1730:	10 e0       	ldi	r17, 0x00	; 0
    1732:	39 2d       	mov	r19, r9
    1734:	30 71       	andi	r19, 0x10	; 16
    1736:	93 2e       	mov	r9, r19
    1738:	f8 01       	movw	r30, r16
    173a:	84 91       	lpm	r24, Z
    173c:	81 11       	cpse	r24, r1
    173e:	24 c0       	rjmp	.+72     	; 0x1788 <vfprintf+0x6d2>
    1740:	55 20       	and	r5, r5
    1742:	09 f4       	brne	.+2      	; 0x1746 <vfprintf+0x690>
    1744:	e4 cc       	rjmp	.-1592   	; 0x110e <vfprintf+0x58>
    1746:	b7 01       	movw	r22, r14
    1748:	80 e2       	ldi	r24, 0x20	; 32
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fputc>
    1750:	5a 94       	dec	r5
    1752:	f6 cf       	rjmp	.-20     	; 0x1740 <vfprintf+0x68a>
    1754:	f7 01       	movw	r30, r14
    1756:	86 81       	ldd	r24, Z+6	; 0x06
    1758:	97 81       	ldd	r25, Z+7	; 0x07
    175a:	26 c0       	rjmp	.+76     	; 0x17a8 <vfprintf+0x6f2>
    175c:	8f ef       	ldi	r24, 0xFF	; 255
    175e:	9f ef       	ldi	r25, 0xFF	; 255
    1760:	23 c0       	rjmp	.+70     	; 0x17a8 <vfprintf+0x6f2>
    1762:	b7 01       	movw	r22, r14
    1764:	80 e2       	ldi	r24, 0x20	; 32
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fputc>
    176c:	5a 94       	dec	r5
    176e:	51 10       	cpse	r5, r1
    1770:	f8 cf       	rjmp	.-16     	; 0x1762 <vfprintf+0x6ac>
    1772:	d8 cf       	rjmp	.-80     	; 0x1724 <vfprintf+0x66e>
    1774:	51 2c       	mov	r5, r1
    1776:	b7 01       	movw	r22, r14
    1778:	80 2f       	mov	r24, r16
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fputc>
    1780:	d3 cf       	rjmp	.-90     	; 0x1728 <vfprintf+0x672>
    1782:	0c e6       	ldi	r16, 0x6C	; 108
    1784:	10 e0       	ldi	r17, 0x00	; 0
    1786:	d5 cf       	rjmp	.-86     	; 0x1732 <vfprintf+0x67c>
    1788:	91 10       	cpse	r9, r1
    178a:	80 52       	subi	r24, 0x20	; 32
    178c:	b7 01       	movw	r22, r14
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <fputc>
    1794:	0f 5f       	subi	r16, 0xFF	; 255
    1796:	1f 4f       	sbci	r17, 0xFF	; 255
    1798:	cf cf       	rjmp	.-98     	; 0x1738 <vfprintf+0x682>
    179a:	23 e0       	ldi	r18, 0x03	; 3
    179c:	25 15       	cp	r18, r5
    179e:	10 f4       	brcc	.+4      	; 0x17a4 <vfprintf+0x6ee>
    17a0:	83 e0       	ldi	r24, 0x03	; 3
    17a2:	bd cf       	rjmp	.-134    	; 0x171e <vfprintf+0x668>
    17a4:	51 2c       	mov	r5, r1
    17a6:	c0 cf       	rjmp	.-128    	; 0x1728 <vfprintf+0x672>
    17a8:	60 96       	adiw	r28, 0x10	; 16
    17aa:	e2 e1       	ldi	r30, 0x12	; 18
    17ac:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__epilogue_restores__>

000017b0 <__udivmodsi4>:
    17b0:	a1 e2       	ldi	r26, 0x21	; 33
    17b2:	1a 2e       	mov	r1, r26
    17b4:	aa 1b       	sub	r26, r26
    17b6:	bb 1b       	sub	r27, r27
    17b8:	fd 01       	movw	r30, r26
    17ba:	0d c0       	rjmp	.+26     	; 0x17d6 <__udivmodsi4_ep>

000017bc <__udivmodsi4_loop>:
    17bc:	aa 1f       	adc	r26, r26
    17be:	bb 1f       	adc	r27, r27
    17c0:	ee 1f       	adc	r30, r30
    17c2:	ff 1f       	adc	r31, r31
    17c4:	a2 17       	cp	r26, r18
    17c6:	b3 07       	cpc	r27, r19
    17c8:	e4 07       	cpc	r30, r20
    17ca:	f5 07       	cpc	r31, r21
    17cc:	20 f0       	brcs	.+8      	; 0x17d6 <__udivmodsi4_ep>
    17ce:	a2 1b       	sub	r26, r18
    17d0:	b3 0b       	sbc	r27, r19
    17d2:	e4 0b       	sbc	r30, r20
    17d4:	f5 0b       	sbc	r31, r21

000017d6 <__udivmodsi4_ep>:
    17d6:	66 1f       	adc	r22, r22
    17d8:	77 1f       	adc	r23, r23
    17da:	88 1f       	adc	r24, r24
    17dc:	99 1f       	adc	r25, r25
    17de:	1a 94       	dec	r1
    17e0:	69 f7       	brne	.-38     	; 0x17bc <__udivmodsi4_loop>
    17e2:	60 95       	com	r22
    17e4:	70 95       	com	r23
    17e6:	80 95       	com	r24
    17e8:	90 95       	com	r25
    17ea:	9b 01       	movw	r18, r22
    17ec:	ac 01       	movw	r20, r24
    17ee:	bd 01       	movw	r22, r26
    17f0:	cf 01       	movw	r24, r30
    17f2:	08 95       	ret

000017f4 <__muluhisi3>:
    17f4:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__umulhisi3>
    17f8:	a5 9f       	mul	r26, r21
    17fa:	90 0d       	add	r25, r0
    17fc:	b4 9f       	mul	r27, r20
    17fe:	90 0d       	add	r25, r0
    1800:	a4 9f       	mul	r26, r20
    1802:	80 0d       	add	r24, r0
    1804:	91 1d       	adc	r25, r1
    1806:	11 24       	eor	r1, r1
    1808:	08 95       	ret

0000180a <__prologue_saves__>:
    180a:	2f 92       	push	r2
    180c:	3f 92       	push	r3
    180e:	4f 92       	push	r4
    1810:	5f 92       	push	r5
    1812:	6f 92       	push	r6
    1814:	7f 92       	push	r7
    1816:	8f 92       	push	r8
    1818:	9f 92       	push	r9
    181a:	af 92       	push	r10
    181c:	bf 92       	push	r11
    181e:	cf 92       	push	r12
    1820:	df 92       	push	r13
    1822:	ef 92       	push	r14
    1824:	ff 92       	push	r15
    1826:	0f 93       	push	r16
    1828:	1f 93       	push	r17
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	ca 1b       	sub	r28, r26
    1834:	db 0b       	sbc	r29, r27
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	f8 94       	cli
    183a:	de bf       	out	0x3e, r29	; 62
    183c:	0f be       	out	0x3f, r0	; 63
    183e:	cd bf       	out	0x3d, r28	; 61
    1840:	09 94       	ijmp

00001842 <__epilogue_restores__>:
    1842:	2a 88       	ldd	r2, Y+18	; 0x12
    1844:	39 88       	ldd	r3, Y+17	; 0x11
    1846:	48 88       	ldd	r4, Y+16	; 0x10
    1848:	5f 84       	ldd	r5, Y+15	; 0x0f
    184a:	6e 84       	ldd	r6, Y+14	; 0x0e
    184c:	7d 84       	ldd	r7, Y+13	; 0x0d
    184e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1850:	9b 84       	ldd	r9, Y+11	; 0x0b
    1852:	aa 84       	ldd	r10, Y+10	; 0x0a
    1854:	b9 84       	ldd	r11, Y+9	; 0x09
    1856:	c8 84       	ldd	r12, Y+8	; 0x08
    1858:	df 80       	ldd	r13, Y+7	; 0x07
    185a:	ee 80       	ldd	r14, Y+6	; 0x06
    185c:	fd 80       	ldd	r15, Y+5	; 0x05
    185e:	0c 81       	ldd	r16, Y+4	; 0x04
    1860:	1b 81       	ldd	r17, Y+3	; 0x03
    1862:	aa 81       	ldd	r26, Y+2	; 0x02
    1864:	b9 81       	ldd	r27, Y+1	; 0x01
    1866:	ce 0f       	add	r28, r30
    1868:	d1 1d       	adc	r29, r1
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	f8 94       	cli
    186e:	de bf       	out	0x3e, r29	; 62
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	cd bf       	out	0x3d, r28	; 61
    1874:	ed 01       	movw	r28, r26
    1876:	08 95       	ret

00001878 <__umulhisi3>:
    1878:	a2 9f       	mul	r26, r18
    187a:	b0 01       	movw	r22, r0
    187c:	b3 9f       	mul	r27, r19
    187e:	c0 01       	movw	r24, r0
    1880:	a3 9f       	mul	r26, r19
    1882:	70 0d       	add	r23, r0
    1884:	81 1d       	adc	r24, r1
    1886:	11 24       	eor	r1, r1
    1888:	91 1d       	adc	r25, r1
    188a:	b2 9f       	mul	r27, r18
    188c:	70 0d       	add	r23, r0
    188e:	81 1d       	adc	r24, r1
    1890:	11 24       	eor	r1, r1
    1892:	91 1d       	adc	r25, r1
    1894:	08 95       	ret

00001896 <__ftoa_engine>:
    1896:	28 30       	cpi	r18, 0x08	; 8
    1898:	08 f0       	brcs	.+2      	; 0x189c <__ftoa_engine+0x6>
    189a:	27 e0       	ldi	r18, 0x07	; 7
    189c:	33 27       	eor	r19, r19
    189e:	da 01       	movw	r26, r20
    18a0:	99 0f       	add	r25, r25
    18a2:	31 1d       	adc	r19, r1
    18a4:	87 fd       	sbrc	r24, 7
    18a6:	91 60       	ori	r25, 0x01	; 1
    18a8:	00 96       	adiw	r24, 0x00	; 0
    18aa:	61 05       	cpc	r22, r1
    18ac:	71 05       	cpc	r23, r1
    18ae:	39 f4       	brne	.+14     	; 0x18be <__ftoa_engine+0x28>
    18b0:	32 60       	ori	r19, 0x02	; 2
    18b2:	2e 5f       	subi	r18, 0xFE	; 254
    18b4:	3d 93       	st	X+, r19
    18b6:	30 e3       	ldi	r19, 0x30	; 48
    18b8:	2a 95       	dec	r18
    18ba:	e1 f7       	brne	.-8      	; 0x18b4 <__ftoa_engine+0x1e>
    18bc:	08 95       	ret
    18be:	9f 3f       	cpi	r25, 0xFF	; 255
    18c0:	30 f0       	brcs	.+12     	; 0x18ce <__ftoa_engine+0x38>
    18c2:	80 38       	cpi	r24, 0x80	; 128
    18c4:	71 05       	cpc	r23, r1
    18c6:	61 05       	cpc	r22, r1
    18c8:	09 f0       	breq	.+2      	; 0x18cc <__ftoa_engine+0x36>
    18ca:	3c 5f       	subi	r19, 0xFC	; 252
    18cc:	3c 5f       	subi	r19, 0xFC	; 252
    18ce:	3d 93       	st	X+, r19
    18d0:	91 30       	cpi	r25, 0x01	; 1
    18d2:	08 f0       	brcs	.+2      	; 0x18d6 <__ftoa_engine+0x40>
    18d4:	80 68       	ori	r24, 0x80	; 128
    18d6:	91 1d       	adc	r25, r1
    18d8:	df 93       	push	r29
    18da:	cf 93       	push	r28
    18dc:	1f 93       	push	r17
    18de:	0f 93       	push	r16
    18e0:	ff 92       	push	r15
    18e2:	ef 92       	push	r14
    18e4:	19 2f       	mov	r17, r25
    18e6:	98 7f       	andi	r25, 0xF8	; 248
    18e8:	96 95       	lsr	r25
    18ea:	e9 2f       	mov	r30, r25
    18ec:	96 95       	lsr	r25
    18ee:	96 95       	lsr	r25
    18f0:	e9 0f       	add	r30, r25
    18f2:	ff 27       	eor	r31, r31
    18f4:	e6 53       	subi	r30, 0x36	; 54
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	99 27       	eor	r25, r25
    18fa:	33 27       	eor	r19, r19
    18fc:	ee 24       	eor	r14, r14
    18fe:	ff 24       	eor	r15, r15
    1900:	a7 01       	movw	r20, r14
    1902:	e7 01       	movw	r28, r14
    1904:	05 90       	lpm	r0, Z+
    1906:	08 94       	sec
    1908:	07 94       	ror	r0
    190a:	28 f4       	brcc	.+10     	; 0x1916 <__ftoa_engine+0x80>
    190c:	36 0f       	add	r19, r22
    190e:	e7 1e       	adc	r14, r23
    1910:	f8 1e       	adc	r15, r24
    1912:	49 1f       	adc	r20, r25
    1914:	51 1d       	adc	r21, r1
    1916:	66 0f       	add	r22, r22
    1918:	77 1f       	adc	r23, r23
    191a:	88 1f       	adc	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	06 94       	lsr	r0
    1920:	a1 f7       	brne	.-24     	; 0x190a <__ftoa_engine+0x74>
    1922:	05 90       	lpm	r0, Z+
    1924:	07 94       	ror	r0
    1926:	28 f4       	brcc	.+10     	; 0x1932 <__ftoa_engine+0x9c>
    1928:	e7 0e       	add	r14, r23
    192a:	f8 1e       	adc	r15, r24
    192c:	49 1f       	adc	r20, r25
    192e:	56 1f       	adc	r21, r22
    1930:	c1 1d       	adc	r28, r1
    1932:	77 0f       	add	r23, r23
    1934:	88 1f       	adc	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	66 1f       	adc	r22, r22
    193a:	06 94       	lsr	r0
    193c:	a1 f7       	brne	.-24     	; 0x1926 <__ftoa_engine+0x90>
    193e:	05 90       	lpm	r0, Z+
    1940:	07 94       	ror	r0
    1942:	28 f4       	brcc	.+10     	; 0x194e <__ftoa_engine+0xb8>
    1944:	f8 0e       	add	r15, r24
    1946:	49 1f       	adc	r20, r25
    1948:	56 1f       	adc	r21, r22
    194a:	c7 1f       	adc	r28, r23
    194c:	d1 1d       	adc	r29, r1
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	66 1f       	adc	r22, r22
    1954:	77 1f       	adc	r23, r23
    1956:	06 94       	lsr	r0
    1958:	a1 f7       	brne	.-24     	; 0x1942 <__ftoa_engine+0xac>
    195a:	05 90       	lpm	r0, Z+
    195c:	07 94       	ror	r0
    195e:	20 f4       	brcc	.+8      	; 0x1968 <__ftoa_engine+0xd2>
    1960:	49 0f       	add	r20, r25
    1962:	56 1f       	adc	r21, r22
    1964:	c7 1f       	adc	r28, r23
    1966:	d8 1f       	adc	r29, r24
    1968:	99 0f       	add	r25, r25
    196a:	66 1f       	adc	r22, r22
    196c:	77 1f       	adc	r23, r23
    196e:	88 1f       	adc	r24, r24
    1970:	06 94       	lsr	r0
    1972:	a9 f7       	brne	.-22     	; 0x195e <__ftoa_engine+0xc8>
    1974:	84 91       	lpm	r24, Z
    1976:	10 95       	com	r17
    1978:	17 70       	andi	r17, 0x07	; 7
    197a:	41 f0       	breq	.+16     	; 0x198c <__ftoa_engine+0xf6>
    197c:	d6 95       	lsr	r29
    197e:	c7 95       	ror	r28
    1980:	57 95       	ror	r21
    1982:	47 95       	ror	r20
    1984:	f7 94       	ror	r15
    1986:	e7 94       	ror	r14
    1988:	1a 95       	dec	r17
    198a:	c1 f7       	brne	.-16     	; 0x197c <__ftoa_engine+0xe6>
    198c:	e0 e7       	ldi	r30, 0x70	; 112
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	68 94       	set
    1992:	15 90       	lpm	r1, Z+
    1994:	15 91       	lpm	r17, Z+
    1996:	35 91       	lpm	r19, Z+
    1998:	65 91       	lpm	r22, Z+
    199a:	95 91       	lpm	r25, Z+
    199c:	05 90       	lpm	r0, Z+
    199e:	7f e2       	ldi	r23, 0x2F	; 47
    19a0:	73 95       	inc	r23
    19a2:	e1 18       	sub	r14, r1
    19a4:	f1 0a       	sbc	r15, r17
    19a6:	43 0b       	sbc	r20, r19
    19a8:	56 0b       	sbc	r21, r22
    19aa:	c9 0b       	sbc	r28, r25
    19ac:	d0 09       	sbc	r29, r0
    19ae:	c0 f7       	brcc	.-16     	; 0x19a0 <__ftoa_engine+0x10a>
    19b0:	e1 0c       	add	r14, r1
    19b2:	f1 1e       	adc	r15, r17
    19b4:	43 1f       	adc	r20, r19
    19b6:	56 1f       	adc	r21, r22
    19b8:	c9 1f       	adc	r28, r25
    19ba:	d0 1d       	adc	r29, r0
    19bc:	7e f4       	brtc	.+30     	; 0x19dc <__ftoa_engine+0x146>
    19be:	70 33       	cpi	r23, 0x30	; 48
    19c0:	11 f4       	brne	.+4      	; 0x19c6 <__ftoa_engine+0x130>
    19c2:	8a 95       	dec	r24
    19c4:	e6 cf       	rjmp	.-52     	; 0x1992 <__ftoa_engine+0xfc>
    19c6:	e8 94       	clt
    19c8:	01 50       	subi	r16, 0x01	; 1
    19ca:	30 f0       	brcs	.+12     	; 0x19d8 <__ftoa_engine+0x142>
    19cc:	08 0f       	add	r16, r24
    19ce:	0a f4       	brpl	.+2      	; 0x19d2 <__ftoa_engine+0x13c>
    19d0:	00 27       	eor	r16, r16
    19d2:	02 17       	cp	r16, r18
    19d4:	08 f4       	brcc	.+2      	; 0x19d8 <__ftoa_engine+0x142>
    19d6:	20 2f       	mov	r18, r16
    19d8:	23 95       	inc	r18
    19da:	02 2f       	mov	r16, r18
    19dc:	7a 33       	cpi	r23, 0x3A	; 58
    19de:	28 f0       	brcs	.+10     	; 0x19ea <__ftoa_engine+0x154>
    19e0:	79 e3       	ldi	r23, 0x39	; 57
    19e2:	7d 93       	st	X+, r23
    19e4:	2a 95       	dec	r18
    19e6:	e9 f7       	brne	.-6      	; 0x19e2 <__ftoa_engine+0x14c>
    19e8:	10 c0       	rjmp	.+32     	; 0x1a0a <__ftoa_engine+0x174>
    19ea:	7d 93       	st	X+, r23
    19ec:	2a 95       	dec	r18
    19ee:	89 f6       	brne	.-94     	; 0x1992 <__ftoa_engine+0xfc>
    19f0:	06 94       	lsr	r0
    19f2:	97 95       	ror	r25
    19f4:	67 95       	ror	r22
    19f6:	37 95       	ror	r19
    19f8:	17 95       	ror	r17
    19fa:	17 94       	ror	r1
    19fc:	e1 18       	sub	r14, r1
    19fe:	f1 0a       	sbc	r15, r17
    1a00:	43 0b       	sbc	r20, r19
    1a02:	56 0b       	sbc	r21, r22
    1a04:	c9 0b       	sbc	r28, r25
    1a06:	d0 09       	sbc	r29, r0
    1a08:	98 f0       	brcs	.+38     	; 0x1a30 <__ftoa_engine+0x19a>
    1a0a:	23 95       	inc	r18
    1a0c:	7e 91       	ld	r23, -X
    1a0e:	73 95       	inc	r23
    1a10:	7a 33       	cpi	r23, 0x3A	; 58
    1a12:	08 f0       	brcs	.+2      	; 0x1a16 <__ftoa_engine+0x180>
    1a14:	70 e3       	ldi	r23, 0x30	; 48
    1a16:	7c 93       	st	X, r23
    1a18:	20 13       	cpse	r18, r16
    1a1a:	b8 f7       	brcc	.-18     	; 0x1a0a <__ftoa_engine+0x174>
    1a1c:	7e 91       	ld	r23, -X
    1a1e:	70 61       	ori	r23, 0x10	; 16
    1a20:	7d 93       	st	X+, r23
    1a22:	30 f0       	brcs	.+12     	; 0x1a30 <__ftoa_engine+0x19a>
    1a24:	83 95       	inc	r24
    1a26:	71 e3       	ldi	r23, 0x31	; 49
    1a28:	7d 93       	st	X+, r23
    1a2a:	70 e3       	ldi	r23, 0x30	; 48
    1a2c:	2a 95       	dec	r18
    1a2e:	e1 f7       	brne	.-8      	; 0x1a28 <__ftoa_engine+0x192>
    1a30:	11 24       	eor	r1, r1
    1a32:	ef 90       	pop	r14
    1a34:	ff 90       	pop	r15
    1a36:	0f 91       	pop	r16
    1a38:	1f 91       	pop	r17
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	99 27       	eor	r25, r25
    1a40:	87 fd       	sbrc	r24, 7
    1a42:	90 95       	com	r25
    1a44:	08 95       	ret

00001a46 <strnlen_P>:
    1a46:	fc 01       	movw	r30, r24
    1a48:	05 90       	lpm	r0, Z+
    1a4a:	61 50       	subi	r22, 0x01	; 1
    1a4c:	70 40       	sbci	r23, 0x00	; 0
    1a4e:	01 10       	cpse	r0, r1
    1a50:	d8 f7       	brcc	.-10     	; 0x1a48 <strnlen_P+0x2>
    1a52:	80 95       	com	r24
    1a54:	90 95       	com	r25
    1a56:	8e 0f       	add	r24, r30
    1a58:	9f 1f       	adc	r25, r31
    1a5a:	08 95       	ret

00001a5c <strnlen>:
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	61 50       	subi	r22, 0x01	; 1
    1a60:	70 40       	sbci	r23, 0x00	; 0
    1a62:	01 90       	ld	r0, Z+
    1a64:	01 10       	cpse	r0, r1
    1a66:	d8 f7       	brcc	.-10     	; 0x1a5e <strnlen+0x2>
    1a68:	80 95       	com	r24
    1a6a:	90 95       	com	r25
    1a6c:	8e 0f       	add	r24, r30
    1a6e:	9f 1f       	adc	r25, r31
    1a70:	08 95       	ret

00001a72 <fputc>:
    1a72:	0f 93       	push	r16
    1a74:	1f 93       	push	r17
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	fb 01       	movw	r30, r22
    1a7c:	23 81       	ldd	r18, Z+3	; 0x03
    1a7e:	21 fd       	sbrc	r18, 1
    1a80:	03 c0       	rjmp	.+6      	; 0x1a88 <fputc+0x16>
    1a82:	8f ef       	ldi	r24, 0xFF	; 255
    1a84:	9f ef       	ldi	r25, 0xFF	; 255
    1a86:	2c c0       	rjmp	.+88     	; 0x1ae0 <fputc+0x6e>
    1a88:	22 ff       	sbrs	r18, 2
    1a8a:	16 c0       	rjmp	.+44     	; 0x1ab8 <fputc+0x46>
    1a8c:	46 81       	ldd	r20, Z+6	; 0x06
    1a8e:	57 81       	ldd	r21, Z+7	; 0x07
    1a90:	24 81       	ldd	r18, Z+4	; 0x04
    1a92:	35 81       	ldd	r19, Z+5	; 0x05
    1a94:	42 17       	cp	r20, r18
    1a96:	53 07       	cpc	r21, r19
    1a98:	44 f4       	brge	.+16     	; 0x1aaa <fputc+0x38>
    1a9a:	a0 81       	ld	r26, Z
    1a9c:	b1 81       	ldd	r27, Z+1	; 0x01
    1a9e:	9d 01       	movw	r18, r26
    1aa0:	2f 5f       	subi	r18, 0xFF	; 255
    1aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa4:	31 83       	std	Z+1, r19	; 0x01
    1aa6:	20 83       	st	Z, r18
    1aa8:	8c 93       	st	X, r24
    1aaa:	26 81       	ldd	r18, Z+6	; 0x06
    1aac:	37 81       	ldd	r19, Z+7	; 0x07
    1aae:	2f 5f       	subi	r18, 0xFF	; 255
    1ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab2:	37 83       	std	Z+7, r19	; 0x07
    1ab4:	26 83       	std	Z+6, r18	; 0x06
    1ab6:	14 c0       	rjmp	.+40     	; 0x1ae0 <fputc+0x6e>
    1ab8:	8b 01       	movw	r16, r22
    1aba:	ec 01       	movw	r28, r24
    1abc:	fb 01       	movw	r30, r22
    1abe:	00 84       	ldd	r0, Z+8	; 0x08
    1ac0:	f1 85       	ldd	r31, Z+9	; 0x09
    1ac2:	e0 2d       	mov	r30, r0
    1ac4:	09 95       	icall
    1ac6:	89 2b       	or	r24, r25
    1ac8:	e1 f6       	brne	.-72     	; 0x1a82 <fputc+0x10>
    1aca:	d8 01       	movw	r26, r16
    1acc:	16 96       	adiw	r26, 0x06	; 6
    1ace:	8d 91       	ld	r24, X+
    1ad0:	9c 91       	ld	r25, X
    1ad2:	17 97       	sbiw	r26, 0x07	; 7
    1ad4:	01 96       	adiw	r24, 0x01	; 1
    1ad6:	17 96       	adiw	r26, 0x07	; 7
    1ad8:	9c 93       	st	X, r25
    1ada:	8e 93       	st	-X, r24
    1adc:	16 97       	sbiw	r26, 0x06	; 6
    1ade:	ce 01       	movw	r24, r28
    1ae0:	df 91       	pop	r29
    1ae2:	cf 91       	pop	r28
    1ae4:	1f 91       	pop	r17
    1ae6:	0f 91       	pop	r16
    1ae8:	08 95       	ret

00001aea <sprintf>:
    1aea:	ae e0       	ldi	r26, 0x0E	; 14
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	eb e7       	ldi	r30, 0x7B	; 123
    1af0:	fd e0       	ldi	r31, 0x0D	; 13
    1af2:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <__prologue_saves__+0x1c>
    1af6:	0d 89       	ldd	r16, Y+21	; 0x15
    1af8:	1e 89       	ldd	r17, Y+22	; 0x16
    1afa:	86 e0       	ldi	r24, 0x06	; 6
    1afc:	8c 83       	std	Y+4, r24	; 0x04
    1afe:	1a 83       	std	Y+2, r17	; 0x02
    1b00:	09 83       	std	Y+1, r16	; 0x01
    1b02:	8f ef       	ldi	r24, 0xFF	; 255
    1b04:	9f e7       	ldi	r25, 0x7F	; 127
    1b06:	9e 83       	std	Y+6, r25	; 0x06
    1b08:	8d 83       	std	Y+5, r24	; 0x05
    1b0a:	ae 01       	movw	r20, r28
    1b0c:	47 5e       	subi	r20, 0xE7	; 231
    1b0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b10:	6f 89       	ldd	r22, Y+23	; 0x17
    1b12:	78 8d       	ldd	r23, Y+24	; 0x18
    1b14:	ce 01       	movw	r24, r28
    1b16:	01 96       	adiw	r24, 0x01	; 1
    1b18:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <vfprintf>
    1b1c:	ef 81       	ldd	r30, Y+7	; 0x07
    1b1e:	f8 85       	ldd	r31, Y+8	; 0x08
    1b20:	e0 0f       	add	r30, r16
    1b22:	f1 1f       	adc	r31, r17
    1b24:	10 82       	st	Z, r1
    1b26:	2e 96       	adiw	r28, 0x0e	; 14
    1b28:	e4 e0       	ldi	r30, 0x04	; 4
    1b2a:	0c 94 2f 0c 	jmp	0x185e	; 0x185e <__epilogue_restores__+0x1c>

00001b2e <__ultoa_invert>:
    1b2e:	fa 01       	movw	r30, r20
    1b30:	aa 27       	eor	r26, r26
    1b32:	28 30       	cpi	r18, 0x08	; 8
    1b34:	51 f1       	breq	.+84     	; 0x1b8a <__ultoa_invert+0x5c>
    1b36:	20 31       	cpi	r18, 0x10	; 16
    1b38:	81 f1       	breq	.+96     	; 0x1b9a <__ultoa_invert+0x6c>
    1b3a:	e8 94       	clt
    1b3c:	6f 93       	push	r22
    1b3e:	6e 7f       	andi	r22, 0xFE	; 254
    1b40:	6e 5f       	subi	r22, 0xFE	; 254
    1b42:	7f 4f       	sbci	r23, 0xFF	; 255
    1b44:	8f 4f       	sbci	r24, 0xFF	; 255
    1b46:	9f 4f       	sbci	r25, 0xFF	; 255
    1b48:	af 4f       	sbci	r26, 0xFF	; 255
    1b4a:	b1 e0       	ldi	r27, 0x01	; 1
    1b4c:	3e d0       	rcall	.+124    	; 0x1bca <__ultoa_invert+0x9c>
    1b4e:	b4 e0       	ldi	r27, 0x04	; 4
    1b50:	3c d0       	rcall	.+120    	; 0x1bca <__ultoa_invert+0x9c>
    1b52:	67 0f       	add	r22, r23
    1b54:	78 1f       	adc	r23, r24
    1b56:	89 1f       	adc	r24, r25
    1b58:	9a 1f       	adc	r25, r26
    1b5a:	a1 1d       	adc	r26, r1
    1b5c:	68 0f       	add	r22, r24
    1b5e:	79 1f       	adc	r23, r25
    1b60:	8a 1f       	adc	r24, r26
    1b62:	91 1d       	adc	r25, r1
    1b64:	a1 1d       	adc	r26, r1
    1b66:	6a 0f       	add	r22, r26
    1b68:	71 1d       	adc	r23, r1
    1b6a:	81 1d       	adc	r24, r1
    1b6c:	91 1d       	adc	r25, r1
    1b6e:	a1 1d       	adc	r26, r1
    1b70:	20 d0       	rcall	.+64     	; 0x1bb2 <__ultoa_invert+0x84>
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <__ultoa_invert+0x48>
    1b74:	68 94       	set
    1b76:	3f 91       	pop	r19
    1b78:	2a e0       	ldi	r18, 0x0A	; 10
    1b7a:	26 9f       	mul	r18, r22
    1b7c:	11 24       	eor	r1, r1
    1b7e:	30 19       	sub	r19, r0
    1b80:	30 5d       	subi	r19, 0xD0	; 208
    1b82:	31 93       	st	Z+, r19
    1b84:	de f6       	brtc	.-74     	; 0x1b3c <__ultoa_invert+0xe>
    1b86:	cf 01       	movw	r24, r30
    1b88:	08 95       	ret
    1b8a:	46 2f       	mov	r20, r22
    1b8c:	47 70       	andi	r20, 0x07	; 7
    1b8e:	40 5d       	subi	r20, 0xD0	; 208
    1b90:	41 93       	st	Z+, r20
    1b92:	b3 e0       	ldi	r27, 0x03	; 3
    1b94:	0f d0       	rcall	.+30     	; 0x1bb4 <__ultoa_invert+0x86>
    1b96:	c9 f7       	brne	.-14     	; 0x1b8a <__ultoa_invert+0x5c>
    1b98:	f6 cf       	rjmp	.-20     	; 0x1b86 <__ultoa_invert+0x58>
    1b9a:	46 2f       	mov	r20, r22
    1b9c:	4f 70       	andi	r20, 0x0F	; 15
    1b9e:	40 5d       	subi	r20, 0xD0	; 208
    1ba0:	4a 33       	cpi	r20, 0x3A	; 58
    1ba2:	18 f0       	brcs	.+6      	; 0x1baa <__ultoa_invert+0x7c>
    1ba4:	49 5d       	subi	r20, 0xD9	; 217
    1ba6:	31 fd       	sbrc	r19, 1
    1ba8:	40 52       	subi	r20, 0x20	; 32
    1baa:	41 93       	st	Z+, r20
    1bac:	02 d0       	rcall	.+4      	; 0x1bb2 <__ultoa_invert+0x84>
    1bae:	a9 f7       	brne	.-22     	; 0x1b9a <__ultoa_invert+0x6c>
    1bb0:	ea cf       	rjmp	.-44     	; 0x1b86 <__ultoa_invert+0x58>
    1bb2:	b4 e0       	ldi	r27, 0x04	; 4
    1bb4:	a6 95       	lsr	r26
    1bb6:	97 95       	ror	r25
    1bb8:	87 95       	ror	r24
    1bba:	77 95       	ror	r23
    1bbc:	67 95       	ror	r22
    1bbe:	ba 95       	dec	r27
    1bc0:	c9 f7       	brne	.-14     	; 0x1bb4 <__ultoa_invert+0x86>
    1bc2:	00 97       	sbiw	r24, 0x00	; 0
    1bc4:	61 05       	cpc	r22, r1
    1bc6:	71 05       	cpc	r23, r1
    1bc8:	08 95       	ret
    1bca:	9b 01       	movw	r18, r22
    1bcc:	ac 01       	movw	r20, r24
    1bce:	0a 2e       	mov	r0, r26
    1bd0:	06 94       	lsr	r0
    1bd2:	57 95       	ror	r21
    1bd4:	47 95       	ror	r20
    1bd6:	37 95       	ror	r19
    1bd8:	27 95       	ror	r18
    1bda:	ba 95       	dec	r27
    1bdc:	c9 f7       	brne	.-14     	; 0x1bd0 <__ultoa_invert+0xa2>
    1bde:	62 0f       	add	r22, r18
    1be0:	73 1f       	adc	r23, r19
    1be2:	84 1f       	adc	r24, r20
    1be4:	95 1f       	adc	r25, r21
    1be6:	a0 1d       	adc	r26, r0
    1be8:	08 95       	ret

00001bea <_exit>:
    1bea:	f8 94       	cli

00001bec <__stop_program>:
    1bec:	ff cf       	rjmp	.-2      	; 0x1bec <__stop_program>
